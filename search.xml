<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>识别验证码</title>
      <link href="/shi-bie-yan-zheng-ma.html"/>
      <url>/shi-bie-yan-zheng-ma.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>验证码是许多网站都采取的反爬虫机制。本内容将介绍如何使用OCR技术实现字符验证码的识别、如何使用第三方验证码识别平台识别验证码以及滑动拼图验证码的校验工作。</p><h2 id="字符验证码"><a href="#字符验证码" class="headerlink" title="字符验证码"></a>字符验证码</h2><p>字符验证码的特点就是<code>验证码中包含数字、字符或者掺杂着斑点与混淆曲线的图片验证码</code>。识别此类验证码，首先需要找到验证码图片在网页HTML代码中的位置，然后将验证码下载，最后再通过OCR技术进行验证码的识别工作</p><h3 id="搭建OCR环境"><a href="#搭建OCR环境" class="headerlink" title="搭建OCR环境"></a>搭建OCR环境</h3><p><code>Tesseract-OCR</code>是一个免费、开源的OCR引擎，通过该引擎可以识别图片中的验证码，搭建OCR的具体步骤如下：</p><ul><li>打开Tesseract-OCR下载地址（<a href="https://github.com/UB-Mannheim/tesseract/wiki），然后选择与自己操作系统匹配的版本（以Windows64位操作系统为例）" target="_blank" rel="noopener">https://github.com/UB-Mannheim/tesseract/wiki），然后选择与自己操作系统匹配的版本（以Windows64位操作系统为例）</a></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925212847311.png" alt="image-20210925212847311"></p><ul><li><p>Tesseract-OCR文件下载完成后，默认安装即可</p></li><li><p>找到Tesseract-OCR的安装路径（默认为C:\Program Files\Tesseract-OCR\testdata），然后将安装路径添加至系统环境变量中</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925213038955.png" alt="image-20210925213038955"></p><ul><li>安装tesserocr模块，安装命令如下：</li></ul><pre><code>pip install tesserocr</code></pre><blockquote><p>如果使用Anaconda并在安装tesserocr模块时出现错误，可使用如下命令：</p><pre><code>conda install -c simonflueckiger tesserocr</code></pre></blockquote><h3 id="下载验证码图片"><a href="#下载验证码图片" class="headerlink" title="下载验证码图片"></a>下载验证码图片</h3><p>以下面地址对应的网页为例，下载网页中的验证码图片，具体步骤如下：</p><p>测试网页地址：<a href="http://sck.rjkflm.com:666/spider/word/" target="_blank" rel="noopener">http://sck.rjkflm.com:666/spider/word/</a></p><ul><li>使用浏览器打开网页的地址</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925213731335.png" alt="image-20210925213731335"></p><ul><li>打开开发者工具，然后在HTML代码中获取验证码图片所在位置</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925213820700.png" alt="image-20210925213820700"></p><ul><li>对目标网页发送网络请求，并在返回的HTML代码中获取图片的下载地址，然后下载验证码图片</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests   <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request   <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent       <span class="token comment" spellcheck="true"># 导入随机请求头</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup              <span class="token comment" spellcheck="true"># 导入解析html</span>header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span>UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 创建随机请求头</span>url <span class="token operator">=</span> <span class="token string">'http://sck.rjkflm.com:666/spider/word/'</span>        <span class="token comment" spellcheck="true"># 网页请求地址</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>header<span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span>                          <span class="token comment" spellcheck="true"># 设置编码方式</span>html <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析html</span>src <span class="token operator">=</span> html<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>img_url <span class="token operator">=</span> url<span class="token operator">+</span>src                                  <span class="token comment" spellcheck="true"># 组合验证码图片请求地址</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlretrieve<span class="token punctuation">(</span>img_url<span class="token punctuation">,</span><span class="token string">'code.png'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 下载并设置图片名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：项目文件夹会生成验证码图片</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925214301568.png" alt="image-20210925214301568"></p><h3 id="识别验证码"><a href="#识别验证码" class="headerlink" title="识别验证码"></a>识别验证码</h3><p>验证码下载完成后，如果没有安装pillow模块，需要通过“<code>pip install pillow</code>”命令进行安装，然后导入tesserocr与Image模块，再通过Image.open()方法打开验证码图片，接着通过tesserocr.image_to_text()函数识别图片中的验证码信息即可</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tesserocr        <span class="token comment" spellcheck="true"># 导入tesserocr模块</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image   <span class="token comment" spellcheck="true"># 导入图像处理模块</span>img <span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'code.png'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开验证码图片</span>code <span class="token operator">=</span> tesserocr<span class="token punctuation">.</span>image_to_text<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将图片中的验证码转换为文本</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码为：'</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><pre><code>验证码为：uuuc</code></pre><p>OCR的识别技术虽然很强大，但是例如下图所示验证码就会掺杂着许多干扰线条，那么在识别这样的验证码信息时，就需要对验证码图片进行相应的处理并识别</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925225625676.png" alt="image-20210925225625676"></p><p>如果直接通过OCR识别，识别结果将会受到干扰线的影响。代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tesserocr        <span class="token comment" spellcheck="true"># 导入tesserocr模块</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image   <span class="token comment" spellcheck="true"># 导入图像处理模块</span>img <span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'code2.jpg'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开验证码图片</span>code <span class="token operator">=</span> tesserocr<span class="token punctuation">.</span>image_to_text<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将图片中的验证码转换为文本</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码为：'</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><pre><code>验证码为：YSGN.</code></pre><p>通过以上测试可以发现，直接通过OCR技术识别后的验证码多了个“.”，遇到此类情况首先可以将彩色的验证码转换为灰度图片后再次测试。代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tesserocr        <span class="token comment" spellcheck="true"># 导入tesserocr模块</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image   <span class="token comment" spellcheck="true"># 导入图像处理模块</span>img <span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'code2.jpg'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开验证码图片</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 将彩色图片转换为灰度图片</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 显示灰度图片</span>code <span class="token operator">=</span> tesserocr<span class="token punctuation">.</span>image_to_text<span class="token punctuation">(</span>img<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将图片中的验证码转换为文本</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码为：'</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925225953102.png" alt="image-20210925225953102"></p><pre><code>验证码为：YSGN.</code></pre><p>接下来需要将转换为灰度的验证码图片进行二值化处理，将验证码二值化处理后再次通过OCR进行识别。代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tesserocr        <span class="token comment" spellcheck="true"># 导入tesserocr模块</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image   <span class="token comment" spellcheck="true"># 导入图像处理模块</span>img <span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'code2.jpg'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打开验证码图片</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 将彩色图片转换为灰度图片</span>t <span class="token operator">=</span> <span class="token number">155</span>                        <span class="token comment" spellcheck="true"># 设置阀值</span>table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                     <span class="token comment" spellcheck="true"># 二值化数据的列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 循环遍历</span>    <span class="token keyword">if</span> i <span class="token operator">&lt;</span>t<span class="token punctuation">:</span>        table<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        table<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>img <span class="token operator">=</span> img<span class="token punctuation">.</span>point<span class="token punctuation">(</span>table<span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 将图片进行二值化处理</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 显示处理后图片</span>code <span class="token operator">=</span> tesserocr<span class="token punctuation">.</span>image_to_text<span class="token punctuation">(</span>img<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将图片中的验证码转换为文本</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'验证码为：'</span><span class="token punctuation">,</span>code<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 打印验证码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925230131270.png" alt="image-20210925230131270"></p><pre><code>验证码为：YSGN</code></pre><blockquote><p>在识别以上具有干扰线的验证码图片时，我们可以做一些灰度和二值化处理，这样可以提高图片验证码的识别率，如果二值化处理后还是无法达到识别的精准性，可以适当地上下调节一下二值化操作中的阈值</p></blockquote><h2 id="第三方验证码识别"><a href="#第三方验证码识别" class="headerlink" title="第三方验证码识别"></a>第三方验证码识别</h2><p>虽然OCR可以识别验证码图片中的验证码信息，但是识别效率与准确度不高是OCR的缺点。所以使用第三方验证码识别平台是个不错的选择，不仅可以解决验证码识别效率低的问题，还可以提高验证码识别的准确度。使用第三方平台识别验证码是非常简单的，平台提供了完善的API接口，根据平台对应的开发文档即可完成快速开发的需求，但每次验证码成功识别后平台会收取少量的费用</p><p>验证码识别平台一般分为两种：</p><ul><li>打码平台：主要是由在线人员进行验证码的识别工作，然后在较短的时间内返回结果</li><li>AI开发者平台：主要是由人工智能来进行识别，例如，百度AI</li></ul><p><strong>第三方打码平台中验证码识别过程</strong></p><ul><li>在浏览器中打开打码平台网页（<a href="http://www.chaojiying.com/），并且单击首页的“用户注册”按钮" target="_blank" rel="noopener">http://www.chaojiying.com/），并且单击首页的“用户注册”按钮</a></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925231142139.png" alt="image-20210925231142139"></p><ul><li>然后在用户中心的页面中填写注册账号的基本信息</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925231221979.png" alt="image-20210925231221979"></p><ul><li>账号注册完成后，在网页的顶部导航栏中选择“开发文档”，然后在常用开发语言示例下载中选择“Python”语言</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925231341127.png" alt="image-20210925231341127"></p><ul><li>在Python语言Demo下载页面中，查看注意事项，然后单击“点击这里下载”超链接即可下载示例代码</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925231428011.png" alt="image-20210925231428011"></p><ul><li>平台提供的示例代码中，已经将所有需要用到的功能代码进行了封装处理，封装后的代码如下：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token keyword">import</span> requests            <span class="token comment" spellcheck="true"># 网络请求模块</span><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5    <span class="token comment" spellcheck="true"># 加密</span><span class="token keyword">class</span> <span class="token class-name">Chaojiying_Client</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> soft_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username               <span class="token comment" spellcheck="true"># 自己注册的账号</span>        password <span class="token operator">=</span>  password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 自己注册的密码</span>        self<span class="token punctuation">.</span>password <span class="token operator">=</span> md5<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>soft_id <span class="token operator">=</span> soft_id                 <span class="token comment" spellcheck="true"># 软件id</span>        self<span class="token punctuation">.</span>base_params <span class="token operator">=</span> <span class="token punctuation">{</span>                   <span class="token comment" spellcheck="true"># 组合表单数据</span>            <span class="token string">'user'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>            <span class="token string">'pass2'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>password<span class="token punctuation">,</span>            <span class="token string">'softid'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>soft_id<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true"># 请求头信息</span>            <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'Keep-Alive'</span><span class="token punctuation">,</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">PostPic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> im<span class="token punctuation">,</span> codetype<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        im: 图片字节        codetype: 题目类型 参考 http://www.chaojiying.com/price.html        """</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'codetype'</span><span class="token punctuation">:</span> codetype<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        params<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_params<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 更新表单参数</span>        files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'userfile'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'ccc.jpg'</span><span class="token punctuation">,</span> im<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true"># 上传验证码图片</span>        <span class="token comment" spellcheck="true"># 发送网络请求</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://upload.chaojiying.net/Upload/Processing.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 返回响应数据</span>    <span class="token keyword">def</span> <span class="token function">ReportError</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> im_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        im_id:报错题目的图片ID        """</span>        params <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> im_id<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        params<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_params<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://upload.chaojiying.net/Upload/ReportError.php'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在已经确保用户名完成充值的情况下，填写必要参数，然后创建示例代码中的实例对象，实现验证码的识别工作</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#用户中心>>软件ID 生成一个替换 96001</span>    chaojiying <span class="token operator">=</span> Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'超级鹰用户名'</span><span class="token punctuation">,</span> <span class="token string">'超级鹰用户名的密码'</span><span class="token punctuation">,</span> <span class="token string">'96001'</span><span class="token punctuation">)</span>    im <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'a.jpg'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span>    <span class="token comment" spellcheck="true">#1902 验证码类型  官方网站>>价格体系 3.4+版 print 后要加()</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">1902</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用平台示例代码中所提供的验证码图片，运行上述代码示例，程序执行结果如下：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925231812047.png" alt="image-20210925231812047"></p><blockquote><p>上述结果中pic_str所对应的值为返回的验证码信息</p></blockquote><p>在发送识别验证码的网络请求时，代码中的“1902”表示验证码类型，该平台所支持的常用验证码类型如下表</p><table><thead><tr><th>验证码类型</th><th>验证码描述</th></tr></thead><tbody><tr><td>1902</td><td>常见4~6位英文数字</td></tr><tr><td>1101~1020</td><td>1~20位英文数字</td></tr><tr><td>2001~2007</td><td>1~7位纯汉字</td></tr><tr><td>3004~3012</td><td>1~12位纯英文</td></tr><tr><td>4004~4111</td><td>1~11位纯数字</td></tr><tr><td>5000</td><td>不定长汉字英文数字</td></tr><tr><td>5108</td><td>8位英文数字（包含字符）</td></tr><tr><td>5201</td><td>拼音首字母，计算题，成语混合</td></tr><tr><td>5211</td><td>集装箱号4位字母7位数字</td></tr><tr><td>6001</td><td>计算题</td></tr><tr><td>6003</td><td>复杂计算题</td></tr><tr><td>6002</td><td>选择题四选一（ABCD或1234）</td></tr><tr><td>6004</td><td>问答题，智能问答题</td></tr><tr><td>9102</td><td>点击两个相同的字，返回`:x1,y1</td></tr><tr><td>9202</td><td>点击两个相同的动物或物品，返回`:x1,y1</td></tr><tr><td>9103</td><td>坐标多选，返回3个坐标，如`:x1,y1</td></tr><tr><td>9004</td><td>坐标多选，返回1~4个坐标，如`:x1,y1</td></tr></tbody></table><blockquote><p>上表仅列出了比较常用的验证码识别类型</p></blockquote><h2 id="滑动拼图验证码"><a href="#滑动拼图验证码" class="headerlink" title="滑动拼图验证码"></a>滑动拼图验证码</h2><p>下面以测试地址对应的网页为例，实现滑动拼图验证码的自动校验，具体步骤如下：</p><p>测试网页地址：<a href="http://sck.rjkflm.com:666/spider/jigsaw/" target="_blank" rel="noopener">http://sck.rjkflm.com:666/spider/jigsaw/</a></p><ul><li>使用浏览器打开测试网页的地址，将显示滑动拼图验证码</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925233225040.png" alt="image-20210925233225040"></p><ul><li>打开浏览器开发者工具，单击按钮滑块，然后在HTML代码中依次获取“按钮滑块”“图形滑块”以及“空缺滑块”所对应的HTML代码标签所在位置</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925233357756.png" alt="image-20210925233357756"></p><ul><li>拖动按钮滑块，完成滑动拼图验证码的校验，此时将显示下图HTML代码</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925233435459.png" alt="image-20210925233435459"></p><blockquote><p>通过上述几幅图片可以看出，按钮滑块在默认情况下为left:0px，而图形滑块在默认情况下为left:10px。验证成功后按钮滑块的left值为174px，而图形滑块的left值为184px。此时可以总结出这个歌验证过程的位置变化情况</p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925233634823.png" alt="image-20210925233634823"></p><ul><li>通过按钮滑块的left值可以确认需要滑动的距离，接下来只需要使用selenium框架模拟滑动的工作即可</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver  <span class="token comment" spellcheck="true"># 导入webdriver</span><span class="token keyword">import</span> re                       <span class="token comment" spellcheck="true"># 导入正则模块</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 谷歌浏览器</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://sck.rjkflm.com:666/spider/jigsaw/'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 启动网页</span>swiper <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>    <span class="token string">'/html/body/div/div[2]/div[2]/span[1]'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取按钮滑块</span>action <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建动作</span>action<span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>swiper<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 单击并保证不松开</span><span class="token comment" spellcheck="true"># 滑动0距离,不松手，不执行该动作无法获取图形滑块left值</span>action<span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取图形滑块样式</span>verify_style <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>    <span class="token string">'/html/body/div/div[2]/div[1]/div[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取空缺滑块样式</span>verified_style <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>    <span class="token string">'/html/body/div/div[2]/div[1]/div[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取空缺滑块left值</span>verified_left <span class="token operator">=</span>float<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'left: (.*?)px;'</span><span class="token punctuation">,</span>verified_style<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取图形滑块left值</span>verify_left <span class="token operator">=</span>float<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'left: (.*?)px;'</span><span class="token punctuation">,</span>verify_style<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>action<span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span>verified_left<span class="token operator">-</span>verify_left<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 滑动指定距离</span>action<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># 松开鼠标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP抓包工具</title>
      <link href="/app-zhua-bao-gong-ju.html"/>
      <url>/app-zhua-bao-gong-ju.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>爬虫不仅仅只对Web页面的信息进行爬取，还可以爬取应用中存在的大量数据，例如移动端的App。由于App中的数据都是通过异步的方式从后台服务器中获取的，类似于Web中的Ajax请求，所以在爬取数据前同样需要分析App用于获取数据的URL。</p><p>实现App请求地址的抓取工作需要使用到专业的抓包工具，如Charles抓包工具</p><blockquote><p>本内容仅作为学习记录</p></blockquote><h2 id="Charles工具的下载与安装"><a href="#Charles工具的下载与安装" class="headerlink" title="Charles工具的下载与安装"></a>Charles工具的下载与安装</h2><p>常用的App抓包工具有Fidder与Charles工具，从性能来讲Charles的功能更胜一筹。</p><p>Charles工具官方下载页面：<a href="https://www.charlesproxy.com/download/" target="_blank" rel="noopener">https://www.charlesproxy.com/download/</a></p><p>以Windows系统为例：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161209034.png" alt="image-20210925161209034"></p><p>下载完成后双击“charles-proxy-4.5.6-win64.msi”进行安装</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161321240.png" alt="image-20210925161321240"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161347700.png" alt="image-20210925161347700"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161357020.png" alt="image-20210925161357020"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161406464.png" alt="image-20210925161406464"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161419760.png" alt="image-20210925161419760"></p><h2 id="SSL证书的安装"><a href="#SSL证书的安装" class="headerlink" title="SSL证书的安装"></a>SSL证书的安装</h2><h3 id="安装PC端证书"><a href="#安装PC端证书" class="headerlink" title="安装PC端证书"></a>安装PC端证书</h3><p>Charles工具安装完成后，启动Charles工具。Charles工具启动后将默认获取当前PC端所有网络请求，例如，自动获取PC端浏览器中访问的百度页面，不过在查看请求内容时，将显示乱码信息</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161634721.png" alt="image-20210925161634721"></p><blockquote><p>在默认情况下，Charles工具是可以获取PC端的网络请求的</p></blockquote><p>目前网页多数使用HTTPS与服务端进行数据交互，而通过HTTPS传输的数据都是加密的，此时通过Charles所获取到的信息也都是乱码，所以需要安装PC端SSL证书，步骤如下：</p><ul><li>打开安装SSL证书对话框</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161910694.png" alt="image-20210925161910694"></p><ul><li>单击“安装证书”，然后点击“下一步”</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925161948387.png" alt="image-20210925161948387"></p><ul><li>打开证书向导的“证书存储”对话框，在该对话框中首先选择“将所有的证书都放入下列存储”选项，然后单击“浏览”选择证书的存储位置为“受信任的根证书颁发机构”，再单击“确认”，最后单击“下一步”</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925162948312.png" alt="image-20210925162948312"></p><ul><li>在证书导入向导的“正在完成证书向导”对话框中，单击“完成”</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925163037787.png" alt="image-20210925163037787"></p><ul><li>在弹出的安全警告框中单击“是”，即可完成SSL证书的安装</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925163224755.png" alt="image-20210925163224755"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925163305543.png" alt="image-20210925163305543"></p><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>PC端的SSL证书安装完成后，在获取请求详情内容时依然显示乱码。此时还需要设置SSL代理，设置SSL代理的步骤如下：</p><p>打开SSL Proxying Settings并进行设置，如果没有代理的情况下可以将其设置为“*”（表示所有SSL）</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925163604907.png" alt="image-20210925163604907"></p><p>SSL代理设置完成后，重新启动Charles，再次打开浏览器中的百度页面，单机左侧目录中的”/“将显示下图详细信息：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925163714888.png" alt="image-20210925163714888"></p><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h3><p>当需要通过Charles抓取手机中的请求地址时，需要保证PC端与手机端在同一网络环境下，然后为手机端进行网络配置。步骤如下：</p><ul><li>确定PC（电脑端）与手机端在同一网络下，然后如下图操作</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925163911080.png" alt="image-20210925163911080"></p><ul><li>打开移动设备安装证书的信息提示框，在该对话框中需要记录IP地址与端口号</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925163946007.png" alt="image-20210925163946007"></p><ul><li>将提示框的IP地址与端口号记住后，将手机（这里以Android手机为例）WIFI连接与PC（电脑端）同一网络的WIFI，然后在手机WIFI列表中选择“修改网络”</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925164120145.png" alt="image-20210925164120145"></p><ul><li>在修改网络界面中，进行如下操作</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925164217612.png" alt="image-20210925164217612"></p><ul><li>在手机端服务器主机与端口设置完成后，PC（电脑端）Charles将自动弹出是否信任此设备的确认对话框，点击“Allow”即可</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925164316920.png" alt="image-20210925164316920"></p><h3 id="安装手机端证书"><a href="#安装手机端证书" class="headerlink" title="安装手机端证书"></a>安装手机端证书</h3><p>PC端与手机端的网络配置完成后，需要将Charles证书保存在PC端，然后安装在手机端，这样Charles才可以正常的抓取手机App中的网络请求。步骤如下：</p><ul><li>在Charles工具中保存证书</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925165203937.png" alt="image-20210925165203937"></p><ul><li>将证书文件保存在PC端指定路径下</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925165227585.png" alt="image-20210925165227585"></p><ul><li>将Charles_SSL证书文件导入手机，然后在手机中依次选择“设置”–&gt;”安全和隐私”–&gt;“更多安全设置”–&gt;“从SD卡安装证书”，选择“Charles_SSL证书文件”，输入手机密码后设置证书名称，单击“确定”</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925165429737.png" alt="image-20210925165429737"></p><ul><li>完成上述配置后打开任意某个网页</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925165503373.png" alt="image-20210925165503373"></p><ul><li>在Charles工具左侧的请求栏内，同时观察不断出现换色闪烁的最新请求，即可查询到手机中网页对应的请求地址</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210925165554926.png" alt="image-20210925165554926"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据处理与存储</title>
      <link href="/shu-ju-chu-li-yu-cun-chu.html"/>
      <url>/shu-ju-chu-li-yu-cun-chu.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>存储方式：</p><ul><li>保存至文本文件（TXT、CSV、Excel）</li><li>保存至数据库（MySQL、SQLite）</li></ul><p>数据处理：</p><ul><li>NaN（空）数据的筛选</li><li>数据去重等</li></ul><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><p><code>pandas模块</code>可以用来实现数据处理。pandas是一个开源的并且通过BSD许可的库，主要为python语言提供了高性能、易于使用的数据结构和数据分析工具，此外还提供了多种数据操作和处理方法。</p><h3 id="pandas数据结构"><a href="#pandas数据结构" class="headerlink" title="pandas数据结构"></a>pandas数据结构</h3><p>pandas的数据结构中有两大核心，分别是Series与DataFrame。其中：</p><ul><li>Series是一维数组，他与python中基础数据类型结构List相近，Series可以保存多种数据类型的数据，如布尔值、字符串、数字类型等。</li><li>DataFrame是一种表格形式的数据结构，类似于Excel表格，是一种二维的表格数据结构。</li></ul><h4 id="Series对象"><a href="#Series对象" class="headerlink" title="Series对象"></a>Series对象</h4><ul><li>创建Series对象</li></ul><p>在创建Series对象时，只需要将数组形式的数据传入Series()构造函数中即可。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd            <span class="token comment" spellcheck="true"># 导入pandas模块</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># 创建数据数组</span>series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建Series对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印Series对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923151707687.png" alt="image-20210923151707687"></p><blockquote><p>在以上的运行结果中，左侧数字列为索引列，右侧字母列为索引对应的元素。Series对象在没有指定索引时，将默认生成从0开始依次递增的索引值</p></blockquote><p>在创建Series对象时，时可以指定索引名称的，例如指定索引项为a、b、c。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd            <span class="token comment" spellcheck="true"># 导入pandas模块</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># 创建数据数组</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># 创建索引名称的数组</span>series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">,</span>index<span class="token operator">=</span>index<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 创建指定索引的Series对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印指定索引的Series对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923152028294.png" alt="image-20210923152028294"></p><ul><li>访问数据</li></ul><p>在访问Series对象中的数据时，可以单独访问索引数组或者是元素数组。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'索引数组为：'</span><span class="token punctuation">,</span>series<span class="token punctuation">.</span>index<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印索引数组</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'元素数组为：'</span><span class="token punctuation">,</span>series<span class="token punctuation">.</span>values<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印元素数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923222956287.png" alt="image-20210923222956287"></p><p>当需要获取指定下标的数组元素时，可以直接通过“Series对象[下标]”的方式进行数组元素的获取，数组下标从0开始</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定下标的数组元素为：'</span><span class="token punctuation">,</span>series<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印指定下标的数组元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定索引的数组元素为：'</span><span class="token punctuation">,</span>series<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印指定索引的数组元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923223259097.png" alt="image-20210923223259097"></p><p>当需要获取多个下标对应的Series对象时，可以指定下标的范围</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印下标为0、1、2对应的Series对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取多个下标对应的Series对象：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>series<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923223511923.png" alt="image-20210923223511923"></p><p>除了通过指定下标范围的方式获取Series对象之外，还可以通过指定多个索引的方式获取Series对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 打印索引a、b对应的Series对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取多个索引对应的Series对象：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>series<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923223708131.png" alt="image-20210923223708131"></p><ul><li>修改元素值</li></ul><p>修改Series对象的元素值时，同样可以通过指定下标或者指定索引的方式来实现</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改下标为0的元素值：\n'</span><span class="token punctuation">)</span>series<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'D'</span><span class="token keyword">print</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'修改索引为b的元素值：\n'</span><span class="token punctuation">)</span>series<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token keyword">print</span><span class="token punctuation">(</span>series<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923224041460.png" alt="image-20210923224041460"></p><h4 id="DataFrame对象"><a href="#DataFrame对象" class="headerlink" title="DataFrame对象"></a>DataFrame对象</h4><p>在创建DataFrame对象时，需要通过字典来实现。其中每列的名称为键，而每个键对应的是一个数组，这个数组作为值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923224836243.png" alt="image-20210923224836243"></p><blockquote><p>在上述运行结果中，左侧单独的数字为索引列，在没有指定特定的索引时，DataFrame对象默认的索引将从0开始递增。右侧A、B、C列名为键，列名对应的值为数组</p></blockquote><p>DataFrame对象同样可以单独指定索引名称，指定方式与Series对象类似</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">}</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>index<span class="token operator">=</span>index<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建自定义索引DataFrame对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923225135375.png" alt="image-20210923225135375"></p><p>如果数据中含有不需要数据时，可以在创建DataFrame对象时指定需要的数据列名</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建指定列名DataFrame对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923225311459.png" alt="image-20210923225311459"></p><h3 id="数据的增、删、改、查"><a href="#数据的增、删、改、查" class="headerlink" title="数据的增、删、改、查"></a>数据的增、删、改、查</h3><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>当为DataFrame对象添加一列数据时，可以先创建列名，然后为其赋值数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span>data_frame<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 增加D列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923225629479.png" alt="image-20210923225629479"></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p>pandas模块中提供了<code>drop()函数</code>，用于删除DataFrame对象中的某行或某列数据，该函数提供了多个参数，其中比较常见的参数及含义如下表所示：</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>labels</td><td>需要删除的行或列的名称，接收string或array</td></tr><tr><td>axis</td><td>默认为0，表示删除行，当axis=1时表示删除列</td></tr><tr><td>index</td><td>指定需要删除的行</td></tr><tr><td>columns</td><td>指定需要删除的列</td></tr><tr><td>inplace</td><td>设置为False表示不改变原数据，返回一个执行删除后的新DataFrame对象；设置为True将对原数据进行删除操作</td></tr></tbody></table><p>实现删除DataFrame对象原数据中指定列与索引的行数据</p><pre class="line-numbers language-python"><code class="language-python">data_frame<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 删除原数据中索引为0的那行数据</span>data_frame<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 删除元数据中列名为A的那列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923230313796.png" alt="image-20210923230313796"></p><blockquote><p>在实现删除DataFrame对象中指定列名的数据时，也可以通过del关键字来实现，例如删除原数据中列名为A的数据，即可使用del data_frame[‘A’]代码</p></blockquote><p>drop()函数除了可以删除指定的列或者是行数据外，还可以通过指定行索引的范围，实现删除多行数据的功能</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除原数据中行索引从0至2的前三行数据</span>data_frame<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923230701883.png" alt="image-20210923230701883"></p><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>当需要修改DataFrame对象中某一列的某个元素时，可以通过赋值的方式来进行元素的修改</p><pre class="line-numbers language-python"><code class="language-python">data_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span>        <span class="token comment" spellcheck="true"># 将A列第三行数据修改为10</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923230858184.png" alt="image-20210923230858184"></p><p>在修改DataFrame对象中某一列的所有数据时，需要了解当前修改列名所对应的元素数组中包含的元素个数，然后根据原有元素的个数进行对应元素的修改</p><pre class="line-numbers language-python"><code class="language-python">data_frame<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 修改B列中所有数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印DataFrame对象内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923231121239.png" alt="image-20210923231121239"></p><blockquote><p>将某一列赋值为单个元素时，例如，data_frame[‘B’]=1，此时B列所有对应的数据将<code>都被修改</code>为1</p></blockquote><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>在获取DataFrame对象中某一列的数据时，可以通过指定列名或者直接调用列名属性的方式来获取指定列的数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定列名的数据为：\n'</span><span class="token punctuation">,</span>data_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定列名属性的数据为：\n'</span><span class="token punctuation">,</span>data_frame<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923231832464.png" alt="image-20210923231832464"></p><p>在获取DataFrame对象从第1行至第3行范围内的数据时，可以通过指定索引范围的方式来获取数据。行索引从0开始，行索引0对应的是DataFrame对象中的第1行数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定行索引范围的数据：\n'</span><span class="token punctuation">,</span>data_frame<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923232134495.png" alt="image-20210923232134495"></p><p>在获取DataFrame对象中某一列的某个元素时，可以通过依次指定列名称、行索引的方式来进行数据的获取</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定列中的某个数据：\n'</span><span class="token punctuation">,</span>data_frame<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923232843783.png" alt="image-20210923232843783"></p><h3 id="NaN数据处理"><a href="#NaN数据处理" class="headerlink" title="NaN数据处理"></a>NaN数据处理</h3><h4 id="修改元素为NaN"><a href="#修改元素为NaN" class="headerlink" title="修改元素为NaN"></a>修改元素为NaN</h4><p>NaN数据在numpy模块中表示空缺数据，所以在数据分析中偶尔会需要将数据结构中的某个元素修改为NaN值，这时只需要调用numpy.NaN，为需要修改的元素赋值即可实现修改元素的目的</p><pre class="line-numbers language-python"><code class="language-python">data_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>nan  <span class="token comment" spellcheck="true"># 将数据中列名为A，行索引为0的元素修改为NaN</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923233217015.png" alt="image-20210923233217015"></p><h4 id="统计NaN数据"><a href="#统计NaN数据" class="headerlink" title="统计NaN数据"></a>统计NaN数据</h4><p>pandas模块提供了两个可以快速识别空缺值的方法：</p><ul><li>isnull()方法用于判断数值是否为空缺值，如果是则返回True</li><li>notnull()方法用于识别非空缺值，该方法在检测出不是空缺值的数据时将返回True</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每列空缺值数量为：\n'</span><span class="token punctuation">,</span>data_frame<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打印数据中空缺值数量</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'每列非空缺值数量为：\n'</span><span class="token punctuation">,</span>data_frame<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印数据中非空缺值数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923233802215.png" alt="image-20210923233802215"></p><h4 id="筛选NaN元素"><a href="#筛选NaN元素" class="headerlink" title="筛选NaN元素"></a>筛选NaN元素</h4><p>在实现NaN元素的筛选时，可以使用dropna()函数</p><pre class="line-numbers language-python"><code class="language-python">data_frame<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将包含NaN元素所在的整行数据删除</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923234025428.png" alt="image-20210923234025428"></p><blockquote><p>如果需要将数据中包含NaN元素所在的整列数据删除，可以将axis参数设置为1</p></blockquote><p>dropna()函数提供了一个how参数，如果将该参数设置为all，dropna()函数将会删除某行或者是某列所有元素全部为NaN的值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span>data_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>nandata_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>nandata_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>nandata_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>nandata_frame<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> numpy<span class="token punctuation">.</span>nandata_frame<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 删除包含NaN元素对应的整列数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923234430251.png" alt="image-20210923234430251"></p><h4 id="NaN元素的替换"><a href="#NaN元素的替换" class="headerlink" title="NaN元素的替换"></a>NaN元素的替换</h4><p>当处理数据中的NaN元素时，为了避免删除数据中比较重要的参考数据。可以使用fillna()函数将数据中的NaN元素替换为同一个元素</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span>None<span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span>data_frame<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将数据中的NaN元素修改为0</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923234907123.png" alt="image-20210923234907123"></p><p>如果需要将不同列中的NaN元素修改为不同的值，可以通过字典方式对每列依次修改</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span>None<span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span>None<span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span><span class="token comment" spellcheck="true"># 将数据中A列中NaN元素修改为0，B列修改为1，C列修改为2</span>data_frame<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923235314183.png" alt="image-20210923235314183"></p><h3 id="去除重复数据"><a href="#去除重复数据" class="headerlink" title="去除重复数据"></a>去除重复数据</h3><p>pandas模块提供的drop_duplicates()方法用于去除指定列中的重复数据，语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">pandas<span class="token punctuation">.</span>dataFrame<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span>None<span class="token punctuation">,</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span>Fasle<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>subset：表示指定需要去重的列名，也可以是多个列名组成的列表。默认为None，表示全部列</li><li>keep：表示保存重复数据的哪一条数据，first表示保留第一条、last表示保留最后一条、False表示重复项数据都不保留。默认为first</li><li>inplace：表示是否在原数据中进行操作，默认为False</li></ul><p>在指定去除某一列中重复数据时，需要在subset参数位置指定列名</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">,</span><span class="token string">'A1'</span><span class="token punctuation">,</span><span class="token string">'A3'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">,</span><span class="token string">'B2'</span><span class="token punctuation">,</span><span class="token string">'B1'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span>data_frame<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923235951228.png" alt="image-20210923235951228"></p><blockquote><p>在去除DataFrame对象中的重复数据时，将会删除指定列中重复数据所对应的整行数据</p></blockquote><blockquote><p>drop_cuplicates()方法除了删除DataFrame对象中的数据行以外，还可以对DataFrame对象中的某一列数据进行重复数据的删除。例如new_data=data_frame[‘A’].drop_duplicates()</p></blockquote><p>drop_duplicates()方法不仅可以实现DataFrame对象中单列的去重操作，还可以实现多列的去重操作</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">,</span><span class="token string">'A1'</span><span class="token punctuation">,</span><span class="token string">'A1'</span><span class="token punctuation">,</span><span class="token string">'A2'</span><span class="token punctuation">,</span><span class="token string">'A2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">,</span><span class="token string">'B1'</span><span class="token punctuation">,</span><span class="token string">'B3'</span><span class="token punctuation">,</span><span class="token string">'B4'</span><span class="token punctuation">,</span><span class="token string">'B5'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'C1'</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">,</span><span class="token string">'C3'</span><span class="token punctuation">,</span><span class="token string">'C4'</span><span class="token punctuation">,</span><span class="token string">'C5'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>data_frame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建DataFrame对象</span>data_frame<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_frame<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924000652815.png" alt="image-20210924000652815"></p><h2 id="文件的存取"><a href="#文件的存取" class="headerlink" title="文件的存取"></a>文件的存取</h2><h3 id="基本文件操作TXT"><a href="#基本文件操作TXT" class="headerlink" title="基本文件操作TXT"></a>基本文件操作TXT</h3><h4 id="TXT文件存储"><a href="#TXT文件存储" class="headerlink" title="TXT文件存储"></a>TXT文件存储</h4><p>如果想要简单地进行TXT文件存储工作，可以通过open()函数操作文件实现，即需要先创建或者打开指定的文件并创建文件对象。open()函数的基本语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">file <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">[</span><span class="token punctuation">,</span>mode<span class="token punctuation">[</span><span class="token punctuation">.</span>buffering<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>file：被创建的文件对象</li><li>filename：要创建或打开文件地文件名称，需要使用单引号或双引号将其括起来。如果要打开的文件和当前文件在同一目录下，那么直接写文件名即可，否则需要指定完整路径</li><li>mode：可选参数，用于指定文件的打开模式。默认模式为只读（即r）</li><li>buffering：可选参数，用于指定读写文件的缓冲模式，值为0表示不缓存；值为1表示缓存；值大于1则表示缓冲区的大小。默认为缓存模式</li></ul><p>mode参数参数值说明：</p><table><thead><tr><th>值</th><th>说明</th><th>注意</th></tr></thead><tbody><tr><td>r</td><td>以只读模式打开文件。文件的指针将会放在文件的开头</td><td>文件必须存在</td></tr><tr><td>rb</td><td>以二进制格式打开文件，并且采用只读模式。文件的指针将会放在文件的开头，一般用于非文本文件，如图片、声音等</td><td>文件必须存在</td></tr><tr><td>r+</td><td>打开文件后，可以读取文件内容，也可以写入新的内容覆盖原有内容（从文件开头进行覆盖）</td><td>文件必须存在</td></tr><tr><td>rb+</td><td>以二进制格式打开文件，并且采用读写模式。文件的指针将会放在文件的开头，一般用于非文本文件，如图片、声音等</td><td>文件必须存在</td></tr><tr><td>w</td><td>以只写模式打开文件。</td><td>文件存在，则将其覆盖，否则创建文件</td></tr><tr><td>wb</td><td>以二进制格式打开文件，并且采用只写模式。一般用于非文本文件，如图片、声音等</td><td>文件存在，则将其覆盖，否则创建文件</td></tr><tr><td>w+</td><td>打开文件后，先清空原有内容，使其变为一个空的文件，对这个空文件有读写权限</td><td>文件存在，则将其覆盖，否则创建文件</td></tr><tr><td>wb+</td><td>以二进制格式打开文件，并且采用读写模式。一般用于非文本文件，如图片、声音等</td><td>文件存在，则将其覆盖，否则创建文件</td></tr><tr><td>a</td><td>以追加模式打开一个文件。如果该文件已经存在，文件指针将在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于写入</td><td></td></tr><tr><td>ab</td><td>以二进制格式打开文件，并且采用追加模式。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于写入</td><td></td></tr><tr><td>a+</td><td>以读写模式打开文件。如果该文件已经存在，文件指针将在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td><td></td></tr><tr><td>ab+</td><td>以二进制格式打开文件，并且采用追加模式。如果该文件已经存在，文件指针将放在文件的末尾（即新内容会被写入到已有内容之后），否则，创建新文件用于读写</td><td></td></tr></tbody></table><p>以爬取某网页中励志名句为例：</p><ul><li>首先通过requests发送网络请求</li><li>然后接收响应结果并通过BeautifulSoup解析HTML代码</li><li>接着提取所有信息</li><li>最后将信息逐条写入data.txt文件中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests     <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># html解析库</span>url <span class="token operator">=</span> <span class="token string">'http://quotes.toscrape.com/tag/inspirational/'</span>   <span class="token comment" spellcheck="true"># 定义请求地址</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 如果请求成功</span>    <span class="token comment" spellcheck="true">#创建一个BeautifulSoup对象，获取页面正文</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>    text_all <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'text'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取所有显示励志名句的span标签</span>    txt_file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建open对象</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>text_all<span class="token punctuation">)</span><span class="token punctuation">:</span>              <span class="token comment" spellcheck="true"># 循环遍历爬取内容</span>        txt_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">.</span>text<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 写入每条爬取的励志名句并在结尾换行</span>    txt_file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># 关闭文件操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924104902732.png" alt="image-20210924104902732"></p><h4 id="读取TXT文件"><a href="#读取TXT文件" class="headerlink" title="读取TXT文件"></a>读取TXT文件</h4><h5 id="读取指定字符"><a href="#读取指定字符" class="headerlink" title="读取指定字符"></a>读取指定字符</h5><p>文件对象提供了read()方法用于读取指定个数的字符，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>file：为打开的文件对象</li><li>size：为可选参数，用于指定要读取的字符个数，如果省略则一次性读取所有内容</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开文件</span>    string <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 读取前9个字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>message.txt内容如下：</p><pre><code>Python的强大，强大到你无法想象！！！</code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924112832316.png" alt="image-20210924112832316"></p><p>使用read()方法读取文件时，是从文件的开头读取的。如果想要读取部分内容，可以先使用文件对象的seek()方法将文件的指针移动到新的位置，然后再应用read()方法读取。seek()方法的基本语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>offset<span class="token punctuation">[</span><span class="token punctuation">,</span>whence<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>file：表示已经打开的文件对象</li><li>offset：用于指定移动的字符个数，其具体位置与whence有关</li><li>whence：用于指定从什么位置开始计算。值为0表示从文件头开始计算；1表示从当前位置开始计算；2表示从文件尾开始计算，默认为0</li></ul><p>例如：想要从文件的第11个字符开始读取8个字符</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打开文件</span>    file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># 移动文件指针到新的位置</span>    string <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 读取8个字符</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924113441437.png" alt="image-20210924113441437"></p><blockquote><p>在使用seek()方法时，如果采用GBK编码，那么offset的值是按一个汉字（包括中文标点符号）占两个字符计算，而采用UTF-8编码，则一个汉字占3个字符，不过无论采用何种编码英文和数字都是按一个字符计算的。这与read()方法不同。</p></blockquote><h5 id="读取一行"><a href="#读取一行" class="headerlink" title="读取一行"></a>读取一行</h5><p>在使用read()方法读取文件时，如果文件很大，一次读取全部内容到内存容易造成内存不足，所以通常会采用逐行读取。readline()方法用于每次读取一行数据，基本语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">file<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，file为打开的文件对象。与read()方法一样，打开文件时，也需要指定打开模式为r（只读）或者r+（读写）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"Python经典应用"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 打开保存Python经典应用信息的文件</span>    number <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true"># 记录行号</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        number <span class="token operator">+=</span> <span class="token number">1</span>        line <span class="token operator">=</span> file<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> line <span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># 跳出循环</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span>line<span class="token punctuation">,</span>end<span class="token operator">=</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出一行内容</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924171518870.png" alt="image-20210924171518870"></p><h5 id="读取全部行"><a href="#读取全部行" class="headerlink" title="读取全部行"></a>读取全部行</h5><p>读取全部行的作用同调用read()方法时不指定size类似，只不过读取全部行时，返回的是一个字符串列表，每个元素为文件的一行内容。读取全部行，使用的是readlines()方法，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，file为打开的文件对象。与read()方法一样，打开文件时，也需要指定打开模式为r（只读）或者r+（读写）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"Python经典应用"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'message.txt'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 打开保存Python经典应用信息的文件</span>    message <span class="token operator">=</span> file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 读取全部信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 输出信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">"over"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924171930358.png" alt="image-20210924171930358"></p><h3 id="存取CSV文件"><a href="#存取CSV文件" class="headerlink" title="存取CSV文件"></a>存取CSV文件</h3><p>CSV文件是文本文件的一种，该文件中每一行数据的各元素使用逗号进行分隔。其实存取CSV文件时同样可以使用open()函数，不过pandas模块实现CSV文件的存取更加方便</p><h4 id="CSV文件的存储"><a href="#CSV文件的存储" class="headerlink" title="CSV文件的存储"></a>CSV文件的存储</h4><p>pandas提供了to_csv()函数用于实现CSV文件的存储，参数信息如下：</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>filepath_or_buffer</td><td>表示文件路径的字符串</td></tr><tr><td>sep</td><td>str类型，表示分隔符，默认为逗号“,”</td></tr><tr><td>na_rep</td><td>str类型，用于替换缺失值，默认为“ ”空</td></tr><tr><td>float_format</td><td>str类型，指定浮点数据的格式，例如，’%.2f’表示保留两位小数</td></tr><tr><td>columns</td><td>表示指定写入哪列数据的列名，默认为None</td></tr><tr><td>header</td><td>表示是否写入数据中的列名，默认为False，表示不写入</td></tr><tr><td>index</td><td>表示是否将行索引写入文件，默认为True</td></tr><tr><td>mode</td><td>str类型，表示写入模式默认为“w”</td></tr><tr><td>encoding</td><td>str类型，表示写入文件的编码格式</td></tr></tbody></table><p>例如创建A、B、C三列数据，然后将数据写入CSV文件中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 创建三列数据</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建DataFrame对象</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 存储为CSV文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924173401840.png" alt="image-20210924173401840"></p><blockquote><p>上图第一行数据为默认生成的索引列，在写入数据时如果不需要默认的索引列，可以在to_cs()函数中设置index参数为False即可</p></blockquote><h4 id="CSV文件的读取"><a href="#CSV文件的读取" class="headerlink" title="CSV文件的读取"></a>CSV文件的读取</h4><p>pandas模块提供了read_csv()函数用于CSV文件的读取工作。read_csv()函数中的常用参数及含义如下：</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>filepath_or_buffer</td><td>表示文件路径的字符串</td></tr><tr><td>sep</td><td>str类型，表示分隔符，默认为逗号“,”</td></tr><tr><td>header</td><td>表示将哪一行数据作为列名</td></tr><tr><td>names</td><td>为读取后的数据设置列名，默认为None</td></tr><tr><td>index_col</td><td>通过列索引指定列的位置，默认为None</td></tr><tr><td>skiprows</td><td>int类型，需要跳过的行号，从文件内数据的开始处算起</td></tr><tr><td>skipfooter</td><td>int类型，需要跳过的行号，从文件内数据的末尾处算起</td></tr><tr><td>na_values</td><td>将指定的值设置为NaN</td></tr><tr><td>nrows</td><td>int类型，设置需要读取数据中的前n行数据</td></tr><tr><td>encoding</td><td>str类型，用于设置文本编码格式。例如，“utf-8”表示UTF-8编码</td></tr><tr><td>squeeze</td><td>设置为True，表示如果解析的数据只包含一列，则返回一个Series。默认为False</td></tr><tr><td>engine</td><td>表示数据解析的引擎，可以指定为c或python，默认为c</td></tr></tbody></table><p>在实现一个简单的读取CSV文件时，直接调用pandas.read_csv()函数，然后指定文件路径即可</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取的CSV文件内容为：\n'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924174421818.png" alt="image-20210924174421818"></p><p>还可以将读取出来的数据指定列，写入新的文件当中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将读取到的数据中指定的列，写入新的文件中</span>data<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'new_test.csv'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  new_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'new_test.csv'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取的CSV文件内容为：\n'</span><span class="token punctuation">,</span>new_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924174700430.png" alt="image-20210924174700430"></p><h3 id="存取Excel文件"><a href="#存取Excel文件" class="headerlink" title="存取Excel文件"></a>存取Excel文件</h3><h4 id="Excel文件的存储"><a href="#Excel文件的存储" class="headerlink" title="Excel文件的存储"></a>Excel文件的存储</h4><p>Excel文件的扩展名目前有两种：一种是<code>.xls</code>；另一种是<code>.xlsx</code></p><p>通过DataFrame的数据对象直接调用to_excel()方法即可实现Excel文件的写入功能，该方法的参数含义与to_csv()方法类似。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">}</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'test.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Excel文件的读取"><a href="#Excel文件的读取" class="headerlink" title="Excel文件的读取"></a>Excel文件的读取</h4><p>pandas模块的read_excel()函数用于Excel文件的读取，常用参数及含义如下：</p><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>io</td><td>表示文件路径的字符串</td></tr><tr><td>sheet_name</td><td>表示指定Excel文件内的分表位置，返回多表可以使用sheet_name=[0,1]，默认为0</td></tr><tr><td>header</td><td>表示指定哪一行数据作为列名，默认为0</td></tr><tr><td>skiprows</td><td>int类型，需要跳过的行号，从文件内数据的开始处算起</td></tr><tr><td>skipfooter</td><td>int类型，需要跳过的行号，从文件内数据的末尾处算起</td></tr><tr><td>index_col</td><td>通过索引指定列的位置，默认为None</td></tr><tr><td>names</td><td>指定列的名字</td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'text.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读取的Excel文件内容为：\n'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="SQLite数据库"><a href="#SQLite数据库" class="headerlink" title="SQLite数据库"></a>SQLite数据库</h2><p>与许多其他数据库管理系统不同，SQLite不是一个客户端/服务器结构的数据库引擎，而是一种嵌入式数据库，他的数据库就是一个<code>文件</code>。SQLite将整个数据库，包括定义、表、索引以及数据本身，作为一个单独的、可跨平台使用的文件存储在主机中。由于SQLite本身是用C语言编写的，而且体积很小，所以经常被集成到各种应用程序中。</p><p>Python内置了SQLite3，所以在Python中使用SQLite数据库不需要安装任何模块。</p><h3 id="创建数据库文件"><a href="#创建数据库文件" class="headerlink" title="创建数据库文件"></a>创建数据库文件</h3><p>Python可直接使用import导入SQLite3模块。Python操作数据库的通用的流程如下图所示</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210924222537336.png" alt="image-20210924222537336"></p><p>例如创建一个名称为mrsoft.db的SQLite数据库文件，然后执行SQL语句创建一个user（用户表），user表包含id和name两个字段</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sqlite3<span class="token comment" spellcheck="true"># 连接到SQLite数据库</span><span class="token comment" spellcheck="true"># 数据库文件是mrsoft.db，如果文件不存在，会自动在当前目录创建</span>conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'mrsoft.db'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个Cursor</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行一条SQL语句，创建user表</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'create table user (id int(10) primary key, name varchar(20))'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭游标</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭Connection</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述代码中，使用sqlite3.connect()方法连接SQLite数据库文件mrsoft.db，由于mrsoft.db文件并不存在，所以会创建mrsoft.db文件，该文件包含了user表的相关信息</p><p>注：上述代码只能运行一次，再次运行会出错，因为已存在user表</p></blockquote><h3 id="操作SQLite"><a href="#操作SQLite" class="headerlink" title="操作SQLite"></a>操作SQLite</h3><h4 id="新增用户数据信息"><a href="#新增用户数据信息" class="headerlink" title="新增用户数据信息"></a>新增用户数据信息</h4><p>为了向数据表中新增数据，可以使用如下SQL语句：</p><pre class="line-numbers language-sqlite"><code class="language-sqlite">insert into 表名(字段名1,字段名2,...,字段名n) values(字段值1,字段值2,...,字段值n)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如在user表中添加数据：</p><pre class="line-numbers language-sqlite"><code class="language-sqlite">cursor.execute('insert into user(id,name) values("1","charles")')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看用户数据信息"><a href="#查看用户数据信息" class="headerlink" title="查看用户数据信息"></a>查看用户数据信息</h4><p>查找数据表中的数据可使用如下SQL语句：</p><pre class="line-numbers language-sqlite"><code class="language-sqlite">select 字段名1,字段名2,字段名3,... from 表名 where 查询条件s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此外，查询数据时通常使用如下3种方式：</p><ul><li>fetchone()：获取查询结果集中的下一条记录</li><li>fetchmany(size)：获取指定数量的记录</li><li>fetchall()：获取结果集的所有记录</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行查询语句</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from user'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取查询结果</span>result1 <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用fetchone()方法查询一条数据</span>result2 <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchmany<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用fetchmany(size)方法查询指定数量的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>result3 <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用fetchall()方法查询所有数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改上面代码，将获取查询结果的语句块代码修改为：</p><pre class="line-numbers language-python"><code class="language-python">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'selece * from user where id > ?'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result3 <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在select查询语句中，使用问号作为占位符代替具体的数值，然后使用一个元组来替换问号（注意不要忽略元组中最后的逗号），上述查询语句等价于：</p><pre class="line-numbers language-python"><code class="language-python">cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'selece * from user where id > 1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用占位符的方式可以避免SQL注入的风险，推荐使用</p></blockquote><h4 id="修改用户数据信息"><a href="#修改用户数据信息" class="headerlink" title="修改用户数据信息"></a>修改用户数据信息</h4><p>修改uesr表中的数据可以使用如下SQL语句：</p><pre class="line-numbers language-sqlite"><code class="language-sqlite">update 表名 set 字段名 = 字段值 where 查询条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个Cursor</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将user表id为1的数据name字段值修改为“mr”</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'update user set name = ? where id = ?'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'mr'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除用户数据信息"><a href="#删除用户数据信息" class="headerlink" title="删除用户数据信息"></a>删除用户数据信息</h4><p>删除user表中的数据可以使用如下SQL语句：</p><pre class="line-numbers language-sqlite"><code class="language-sqlite">delete from 表名 where 查询条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个Cursor</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除user表id为1的数据</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>'delete <span class="token keyword">from</span> user where id <span class="token operator">=</span> ?’<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h2><h3 id="MySQL下载安装"><a href="#MySQL下载安装" class="headerlink" title="MySQL下载安装"></a>MySQL下载安装</h3><p>详见MySQL安装博客</p><h3 id="安装PyMySQL"><a href="#安装PyMySQL" class="headerlink" title="安装PyMySQL"></a>安装PyMySQL</h3><p>由于MySQL服务器以独立的进程运行，并通过网络对外服务，所以需要支持Python的MySQL驱动来连接到MySQL服务器。在Python中支持MySQL的模块很多，在此处选择使用PyMySQL模块，安装命令如下：</p><pre><code>pip install PyMySQL</code></pre><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>PyMySQL模块也遵循Python Database API 2.0规范，所以操作MySQL数据库的方式与SQLite相似</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true"># 打开数据库连接,参数1:主机名或IP；参数2：用户名；参数3：密码；参数4：数据库名称</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"mrsoft"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用cursor()方法创建一个游标对象cursor</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用execute()方法执行SQL查询</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT VERSION()"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用fetchone()方法获取单条数据.</span>data <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Database version : %s "</span> <span class="token operator">%</span> data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>数据库连接成功后，接下里就可以为数据库创建数据表了。创建数据表需要使用execute()方法，例如创建一个books图书表，books表包含id（主键）、name（图书名称）、category（图书分类）、price（图书价格）和publish_time（出版时间）5个字段，创建books表的SQL语句如下：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> books <span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    category <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    price <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    publish_time <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建数据表前，使用如下语句实现当前数据表存在时先删除：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token string">'books'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"mrsoft"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用cursor()方法创建一个游标对象cursor</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用预处理语句创建表</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""CREATE TABLE books (id int NOT NULL AUTO_INCREMENT,name varchar(50) NOT NULL,category varchar(50) NOT NULL,price decimal(10,2) DEFAULT NULL,publish_time date DEFAULT NULL,PRIMARY KEY (id)) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4;"""</span><span class="token comment" spellcheck="true"># 执行SQL语句</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作MySQL数据表"><a href="#操作MySQL数据表" class="headerlink" title="操作MySQL数据表"></a>操作MySQL数据表</h3><p>MySQL数据表的操作主要包括数据的增、删、改、查，与操作SQLite类似，我们使用executemany()方法向数据表中批量添加多条记录，executemany()方法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">executemany<span class="token punctuation">(</span>operation<span class="token punctuation">,</span>seq_of_params<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>operation：操作的SQL语句</li><li>seq_of_params：参数序列</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true"># 打开数据库连接</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"mrsoft"</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用cursor()方法获取操作游标</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据列表</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"零基础学Python"</span><span class="token punctuation">,</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'79.80'</span><span class="token punctuation">,</span><span class="token string">'2018-5-20'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"Python从入门到精通"</span><span class="token punctuation">,</span><span class="token string">'Python'</span><span class="token punctuation">,</span><span class="token string">'69.80'</span><span class="token punctuation">,</span><span class="token string">'2018-6-18'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"零基础学PHP"</span><span class="token punctuation">,</span><span class="token string">'PHP'</span><span class="token punctuation">,</span><span class="token string">'69.80'</span><span class="token punctuation">,</span><span class="token string">'2017-5-21'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"PHP项目开发实战入门"</span><span class="token punctuation">,</span><span class="token string">'PHP'</span><span class="token punctuation">,</span><span class="token string">'79.80'</span><span class="token punctuation">,</span><span class="token string">'2016-5-21'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"零基础学Java"</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token string">'69.80'</span><span class="token punctuation">,</span><span class="token string">'2017-5-21'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 执行sql语句，插入多条数据</span>    cursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"insert into books(name, category, price, publish_time) values (%s,%s,%s,%s)"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 提交数据</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 发生错误时回滚</span>    db<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭数据库连接</span>db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上述代码中，需特别注意以下几点：</p><ul><li>使用connect()方法连接数据库时，额外设置字符集“cahrset=utf-8”，可以防止插入中文时出错</li><li>在使用insert语句插入数据时，使用“%s”作为占位符，可以防止SQL注入</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程与多进程爬虫</title>
      <link href="/duo-xian-cheng-yu-duo-jin-cheng-pa-chong.html"/>
      <url>/duo-xian-cheng-yu-duo-jin-cheng-pa-chong.html</url>
      
        <content type="html"><![CDATA[<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程介绍"><a href="#进程介绍" class="headerlink" title="进程介绍"></a>进程介绍</h3><p>首先介绍一下多任务，顾名思义，多任务就是指操作系统能够执行多个任务。例如使用windows或Linux操作系统可以同时看电影、聊天等，此时操作系统就是在执行多任务，而每一个任务就是一个进程</p><p>进程（Process）是计算机中已运行程序的实体。进程与程序不同，<code>程序本身只是指令、数据及其组织形式的描述</code>，<code>进程才是程序（那些指令和数据）的真正运行实体</code>。例如，在没有打开QQ时，QQ只是程序。打开QQ后，操作系统就为QQ开启了一个进程。再打开一个QQ则又开启了一个进程</p><h3 id="线程介绍"><a href="#线程介绍" class="headerlink" title="线程介绍"></a>线程介绍</h3><p><code>线程（Thread）是操作系统能够进行运算调度的最小单位。</code>他被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。例如，对于视频播放器，显示视频用一个线程，播放音频用另一个线程。只有两个线程同时工作，我们才能正常观看画面和声音同步的视频</p><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>由于线程是操作系统直接支持的执行单元，因此高级语言（如python、java等）都内置多线程支持。python的标准库提供了两个模块：_thread和threading，其中</p><ul><li>_thread是低级模块</li><li>threading是高级模块，对_thread进行了封装</li></ul><h3 id="使用threading模块创建线程"><a href="#使用threading模块创建线程" class="headerlink" title="使用threading模块创建线程"></a>使用threading模块创建线程</h3><p>threading模块提供了一个Thread类来代表一个线程对象，语法如下：</p><pre class="line-numbers language-python"><code class="language-python">Thread<span class="token punctuation">(</span><span class="token punctuation">[</span>group<span class="token punctuation">[</span><span class="token punctuation">,</span>target<span class="token punctuation">[</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Thread类的参数说明如下：</p><ul><li>group：值为None，为以后版本而保留</li><li>target：表示一个可调用对象，线程启动时，run()方法将调用此对象，默认值为None，表示不调用任何内容</li><li>name：表示当前线程名称，默认创建一个“Thread-N”格式的唯一名称</li><li>args：表示传递给target函数的参数元组</li><li>kwargs：表示传递给target函数的参数字典</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> threading<span class="token punctuation">,</span>time<span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread name is %s"</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----主线程开始-----"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建4个线程，存入列表</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>process<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 开启线程</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> threads<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 等待子线程结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----主线程结束-----"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922165439501.png" alt="image-20210922165439501"></p><p>从上图结果可以看出<code>线程的执行顺序是不确定的</code></p><h3 id="使用Thread子类创建线程"><a href="#使用Thread子类创建线程" class="headerlink" title="使用Thread子类创建线程"></a>使用Thread子类创建线程</h3><p>Thread线程类也可以通过定义一个继承Thread线程类的子类来创建线程</p><ul><li>创建一个继承threading.Thread线程类的子类SubThread，并定义一个run()方法</li><li>实例化SubThread类创建两个线程</li><li>调用start()方法开启线程，会自动调用run()方法</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">SubThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            msg <span class="token operator">=</span> <span class="token string">"子线程"</span><span class="token operator">+</span>self<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'执行，i='</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#name属性中保存的是当前线程的名字</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----主线程开始-----'</span><span class="token punctuation">)</span>    t1 <span class="token operator">=</span> SubThread<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 创建子线程t1</span>    t2 <span class="token operator">=</span> SubThread<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建子线程t2</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 启动子线程t1</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 启动子线程t2</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 等待子线程t1</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 等待子线程t2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----主线程结束-----'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922170401636.png" alt="image-20210922170401636"></p><h2 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h2><p>定义一个全局变量g_num，分别创建两个子线程对g_num执行不同操作，并输出操作后结果。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子线程1开始------'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> g_num    g_num <span class="token operator">+=</span> <span class="token number">50</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g_num is %d'</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子线程1结束------'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子线程2开始------'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> g_num    g_num <span class="token operator">-=</span> <span class="token number">50</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g_num is %d'</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子线程2结束------'</span><span class="token punctuation">)</span>g_num <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># 定义一个全局变量</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------主线程开始------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g_num is %d'</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>    t1 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>plus<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例化线程p1</span>    t2 <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>minus<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 实例化线程p2</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 开启线程p1</span>    t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 开启线程p2</span>    t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 等待p1线程结束</span>    t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 等待p2线程结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------主线程结束------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922170726114.png" alt="image-20210922170726114"></p><blockquote><p>在一个进程内的所有线程共享全局变量，能够在不使用其他方式的前提下完成多线程之间的数据共享</p></blockquote><h3 id="互斥锁介绍"><a href="#互斥锁介绍" class="headerlink" title="互斥锁介绍"></a>互斥锁介绍</h3><p>互斥锁（Mutual exclusion，缩写Mutex），可以防止多个线程同时读写某一块内存区域。互斥锁为资源引入一个状态：锁定和非锁定。某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；直到该线程释放资源，将资源的状态编程“非锁定”，其他的线程才能再次锁定该资源。</p><p>互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。</p><h3 id="互斥锁的使用"><a href="#互斥锁的使用" class="headerlink" title="互斥锁的使用"></a>互斥锁的使用</h3><p>在threading模块中使用Lock类可以方便处理锁定。Lock类有2个方法：acquire()锁定和release()释放锁。</p><pre class="line-numbers language-python"><code class="language-python">mutex <span class="token operator">=</span> threading<span class="token punctuation">.</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 创建锁</span>mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">[</span>blocking<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 锁定</span>mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 释放锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>语法介绍：</p><ul><li>acquire([blocking])：获取锁，必要时需要阻塞直到锁释放为止。如果提供blocking参数并将他设置为False，当无法获取锁定时将立即返回Fasle，如果成功获取锁定则返回True</li><li>release()：释放一个锁。当锁处于未锁定状态时，或者从与原本调用了acquire()方法的不同线程调用此方法将会出现错误</li></ul><p>示例：模拟实现多人同时订购电影票的功能，假设电影院某场次只有100张电影票，10个用户同时抢购该电影票。每售出一张，显示一次剩余的电影票张数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token punctuation">,</span>Lock<span class="token keyword">import</span> timen<span class="token operator">=</span><span class="token number">100</span> <span class="token comment" spellcheck="true"># 共100张票</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> n    mutex<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 上锁</span>    temp<span class="token operator">=</span>n                      <span class="token comment" spellcheck="true"># 赋值给临时变量</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 休眠0.1秒</span>    n<span class="token operator">=</span>temp<span class="token number">-1</span>                    <span class="token comment" spellcheck="true"># 数量减1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'购买成功，剩余%d张电影票'</span><span class="token operator">%</span>n<span class="token punctuation">)</span>    mutex<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 释放锁</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    mutex<span class="token operator">=</span>Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 实例化Lock类</span>    t_l<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                      <span class="token comment" spellcheck="true"># 初始化一个列表</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token operator">=</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例化线程类</span>        t_l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 将线程实例存入列表中</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 创建线程</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> t_l<span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 等待子线程结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922175651330.png" alt="image-20210922175651330"></p><blockquote><p>使用互斥锁时，要避免死锁。</p></blockquote><p><strong>死锁产生的四个必要条件：</strong></p><ul><li>互斥条件：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源被另一进程占有时，则申请者等待直到资源被占有者释放。</li><li>不可剥夺条件：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。</li><li>请求和保持条件：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。</li><li>循环等待条件：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所申请地资源。</li></ul><p>以上给出了导致死锁的四个必要条件，只要系统发生死锁则以上四个条件至少有一个成立。事实上循环等待的成立蕴含了前三个条件的成立，似乎没有必要列出然而考虑这些条件对死锁的预防是有利的，因为可以通过破坏四个条件中的任何一个来预防死锁的发生。</p><p><strong>死锁预防：</strong></p><p>我们可以通过破坏死锁产生的4个必要条件来 预防死锁，由于<code>资源互斥是资源使用的固有特性是无法改变的</code>。</p><ul><li>破坏“不可剥夺”条件：一个进程不能获得所需要的全部资源时便处于等待状态，等待期间他占有的资源将被隐式的释放重新加入到 系统的资源列表中，可以被其他的进程使用，而等待的进程只有重新获得自己原有的资源以及新申请的资源才可以重新启动，执行。</li><li>破坏”请求与保持条件“：第一种方法静态分配即每个进程在开始执行时就申请他所需要的全部资源。第二种是动态分配即每个进程在申请所需要的资源时他本身不占用系统资源。</li><li>破坏“循环等待”条件：采用资源有序分配其基本思想是将系统中的所有资源顺序编号，将紧缺的，稀少的采用较大的编号，在申请资源时必须按照编号的顺序进行，一个进程只有获得较小编号的进程才能申请较大编号的进程。</li></ul><h3 id="使用队列在线程间通信"><a href="#使用队列在线程间通信" class="headerlink" title="使用队列在线程间通信"></a>使用队列在线程间通信</h3><p>multiprocessing模块的Queue队列可以实现线程间通信。使用Queue队列在线程间通信通常应用于生产者–消费者模式。产生数据的模块称为生产者，而处理数据的模块称为消费者。在生产者–消费者之间的缓冲区称之为仓库。生产者负责往仓库运输商品，而消费者负责从仓库中取出商品。这就构成了生产者–消费者模式。</p><p>示例：定义一个生产者类Product，定义一个消费者类Consumer。生产者生成5件产品，依次写入队列，而消费者依次从队列中取出产品。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">import</span> random<span class="token punctuation">,</span>threading<span class="token punctuation">,</span>time<span class="token comment" spellcheck="true"># 生产者类</span><span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data<span class="token operator">=</span>queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生产者%s将产品%d加入队列!"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生产者%s完成!"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 消费者类</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data<span class="token operator">=</span>queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            val <span class="token operator">=</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者%s将产品%d从队列中取出!"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者%s完成!"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>getName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----主线程开始-----'</span><span class="token punctuation">)</span>    queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 实例化队列</span>    producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span><span class="token string">'Producer'</span><span class="token punctuation">,</span>queue<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例化线程Producer，并传入队列作为参数</span>    consumer <span class="token operator">=</span> Consumer<span class="token punctuation">(</span><span class="token string">'Consumer'</span><span class="token punctuation">,</span>queue<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例化线程Consumer，并传入队列作为参数</span>    producer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动线程Producer</span>    consumer<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动线程Consumer</span>    producer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 等待线程Producer结束</span>    consumer<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 等待线程Consumer结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----主线程结束-----'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922181044240.png" alt="image-20210922181044240"></p><h2 id="创建进程的常用方式"><a href="#创建进程的常用方式" class="headerlink" title="创建进程的常用方式"></a>创建进程的常用方式</h2><p>在python中有多个模块可以创建进程，比较常用的有os.fork()函数、multiprocessing模块和Pool进程池。由于os.fork()函数只适用于Unix/Linux/Mac系统上运行，在Windows操作系统中不可用，所有本章重点介绍multiprocessing模块和Pool进程池这两个跨平台模块</p><h3 id="使用multiprocessing模块创建进程"><a href="#使用multiprocessing模块创建进程" class="headerlink" title="使用multiprocessing模块创建进程"></a>使用multiprocessing模块创建进程</h3><p>multiprocessing模块提供了一个Process类来代表一个进程对象，语法如下：</p><pre class="line-numbers language-python"><code class="language-python">Process<span class="token punctuation">(</span><span class="token punctuation">[</span>group<span class="token punctuation">[</span><span class="token punctuation">,</span>target<span class="token punctuation">[</span><span class="token punctuation">,</span>name<span class="token punctuation">[</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>group：参数为使用，值始终为None</li><li>target：表示当前进程启动时执行的可调用对象</li><li>name：为当前进程实例的别名</li><li>args：表示传递给target函数的参数元组</li><li>kwargs：表示传递给target函数的参数字典</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token comment" spellcheck="true"># 执行调用子进程代码</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'我是子进程'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程开始'</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>test<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 实例化Process进程类</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                           <span class="token comment" spellcheck="true"># 启动子进程</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'主进程结束'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922215354259.png" alt="image-20210922215354259"></p><p>上述代码中，先实例化Process类，然后使用p.start()方法启动子进程，开始执行test()函数。Process的实例p常用的方法除start()外，还有如下常用方法：</p><ul><li>is_alive()：判断进程实例是否还在执行</li><li>join([timeout])：是否等待进程实例执行结束，或等待多少秒</li><li>start()：启动进程实例（创建子进程）</li><li>run()：如果没有给定target参数，对这个对象调用start()方法时，就将执行对象中的run()方法</li><li>terminate()：不管任务是否完成，立即终止</li></ul><p>Process类还有如下常用属性：</p><ul><li>name：当前进程实例别名，默认为Process-N，N为从1开始递增的整数</li><li>pid：当前进程实例的PID值</li></ul><p>示例演示：创建两个子进程，分别使用os模块和time模块输出父进程和子进程的ID以及子进程的时间，并调用Process类的name和pid属性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token comment" spellcheck="true">#两个子进程将会调用的两个方法</span><span class="token keyword">def</span>  <span class="token function">child_1</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子进程（%s）开始执行，父进程为（%s）"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 计时开始</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>interval<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 程序将会被挂起interval秒</span>    t_end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 计时结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子进程（%s）执行时间为'%0.2f'秒"</span><span class="token operator">%</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t_end <span class="token operator">-</span> t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span>  <span class="token function">child_2</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子进程（%s）开始执行，父进程为（%s）"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 计时开始</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>interval<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 程序将会被挂起interval秒</span>    t_end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 计时结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子进程（%s）执行时间为'%0.2f'秒"</span><span class="token operator">%</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t_end <span class="token operator">-</span> t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------父进程开始执行-------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"父进程PID：%s"</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 输出当前程序的PID</span>    p1<span class="token operator">=</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>child_1<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 实例化进程p1</span>    p2<span class="token operator">=</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>child_2<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"mrsoft"</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 实例化进程p2</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 启动进程p1</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 启动进程p2</span>    <span class="token comment" spellcheck="true">#同时父进程仍然往下执行，如果p2进程还在执行，将会返回True</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p1.is_alive=%s"</span><span class="token operator">%</span>p1<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p2.is_alive=%s"</span><span class="token operator">%</span>p2<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出p1和p2进程的别名和PID</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p1.name=%s"</span><span class="token operator">%</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p1.pid=%s"</span><span class="token operator">%</span>p1<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p2.name=%s"</span><span class="token operator">%</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p2.pid=%s"</span><span class="token operator">%</span>p2<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------等待子进程-------"</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待p1进程结束</span>    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待p2进程结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------父进程执行结束-------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922220515240.png" alt="image-20210922220515240"></p><h3 id="使用Process子类创建进程"><a href="#使用Process子类创建进程" class="headerlink" title="使用Process子类创建进程"></a>使用Process子类创建进程</h3><p>对于简单的小任务，通常使用process(target=test)方式实现多进程。但是如果要处理复杂任务的进程，通常定义一个类，使其继承Process类，每次实例化这个类的时候，就等同于实例化一个进程对象。</p><p>使用Process子类方式创建2个子进程，分别输出父、子进程的PID，以及每个子进程的状态和运行时间</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token comment" spellcheck="true">#继承Process类</span><span class="token keyword">class</span> <span class="token class-name">SubProcess</span><span class="token punctuation">(</span>Process<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 由于Process类本身也有__init__初识化方法，这个子类相当于重写了父类的这个方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>interval<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Process<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 调用Process父类的初始化方法</span>        self<span class="token punctuation">.</span>interval <span class="token operator">=</span> interval   <span class="token comment" spellcheck="true"># 接收参数interval</span>        <span class="token keyword">if</span> name<span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 判断传递的参数name是否存在</span>            self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token comment" spellcheck="true"># 如果传递参数name,则为子进程创建name属性，否则使用默认属性</span>    <span class="token comment" spellcheck="true">#重写了Process类的run()方法</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子进程(%s) 开始执行，父进程为（%s）"</span><span class="token operator">%</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>interval<span class="token punctuation">)</span>        t_stop <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"子进程(%s)执行结束，耗时%0.2f秒"</span><span class="token operator">%</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>t_stop<span class="token operator">-</span>t_start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------父进程开始执行-------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"父进程PID：%s"</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 输出当前程序的ID</span>    p1 <span class="token operator">=</span> SubProcess<span class="token punctuation">(</span>interval<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'mrsoft'</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> SubProcess<span class="token punctuation">(</span>interval<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#对一个不包含target属性的Process类执行start()方法，就会运行这个类中的run()方法，</span>    <span class="token comment" spellcheck="true">#所以这里会执行p1.run()</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 启动进程p1</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 启动进程p2</span>    <span class="token comment" spellcheck="true"># 输出p1和p2进程的执行状态，如果真正进行，返回True,否则返回False</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p1.is_alive=%s"</span><span class="token operator">%</span>p1<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p2.is_alive=%s"</span><span class="token operator">%</span>p2<span class="token punctuation">.</span>is_alive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#输出p1和p2进程的别名和PID</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p1.name=%s"</span><span class="token operator">%</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p1.pid=%s"</span><span class="token operator">%</span>p1<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p2.name=%s"</span><span class="token operator">%</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p2.pid=%s"</span><span class="token operator">%</span>p2<span class="token punctuation">.</span>pid<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------等待子进程-------"</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待p1进程结束</span>    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待p2进程结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------父进程执行结束-------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922222056231.png" alt="image-20210922222056231"></p><p>上述代码中，定义了SubProcess子类，继承multiprocess.Process父类。SubProcess子类中定义了2个方法：__init__()初始化方法和run()方法。在__init__()初始化方法中，调用multiprocess.Process父类的__init__()初始化方法，否则父类初始化方法会被覆盖，无法开启进程。此外，在SubProcess子类中并没有定义start()方法，但在主进程中却调用了start()方法，此时就会自动执行SubProcess类的run()方法。</p><h3 id="使用进程池Pool创建进程"><a href="#使用进程池Pool创建进程" class="headerlink" title="使用进程池Pool创建进程"></a>使用进程池Pool创建进程</h3><p> 若要创建很多个进程，可以使用multiprocessing模块提供的Pool类，即Pool进程池</p><p>Pool类的常用方法：</p><ul><li>apply_async(func[,args[,kwds]])：使用非阻塞方式调用func函数（并行执行，阻塞方式必须等待上一个进程退出才能执行下一个进程），args为传递给func的参数列表，kwds为传递给func的关键字参数字列表</li><li>apply(func[,args[,kwds]])：使用阻塞方式调用func函数</li><li>close()：关闭进程池（Pool），使其不再接受新的任务</li><li>terminate()：不管任务是否完成，立即终止</li><li>join()：主进程阻塞，等待子进程的退出，必须在close()或terminate()方法之后使用</li></ul><p>在上面的方法中提到apply_async()方法使用非阻塞方式调用函数，而apply()方法使用阻塞方式调用函数。</p><p>阻塞方式必须要等待上一进程退出才能执行下一进程，而非阻塞方式则可以并行执行</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922225927592.png" alt="image-20210922225927592"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding=utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'子进程（%s）执行task %s ...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 休眠1秒</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'父进程（%s）.'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 定义一个进程池，最大进程数3</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 从0开始循环10次</span>        p<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用非阻塞方式调用task()函数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'等待所有子进程结束...'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 关闭进程池，关闭后p不再接收新的请求</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待子进程结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有子进程结束.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922230105119.png" alt="image-20210922230105119"></p><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>下述代码将验证进程间是否可以直接共享信息</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">def</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子进程1开始------'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> g_num    g_num <span class="token operator">+=</span> <span class="token number">50</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g_num is %d'</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子进程1结束------'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子进程2开始------'</span><span class="token punctuation">)</span>    <span class="token keyword">global</span> g_num    g_num <span class="token operator">-=</span> <span class="token number">50</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g_num is %d'</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------子进程2结束------'</span><span class="token punctuation">)</span>g_num <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># 定义一个全局变量</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------主进程开始------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'g_num is %d'</span><span class="token operator">%</span>g_num<span class="token punctuation">)</span>    p1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>plus<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 实例化进程p1</span>    p2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>minus<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 实例化进程p2</span>    p1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 开启进程p1</span>    p2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 开启进程p2</span>    p1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 等待p1进程结束</span>    p2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 等待p2进程结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-------主进程结束------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922230805899.png" alt="image-20210922230805899"></p><p>从上图可见进程间没有直接实现资源共享，因此若要实现进程间通信可以使用python的multiprocessing模块提供的Queue（队列）、Pipes（管道）等多种方式来交换数据，</p><h3 id="队列简介"><a href="#队列简介" class="headerlink" title="队列简介"></a>队列简介</h3><p>先进先出</p><h3 id="多进程队列的使用"><a href="#多进程队列的使用" class="headerlink" title="多进程队列的使用"></a>多进程队列的使用</h3><p>multiprocessing模块的Queue队列实现多进程之间的数据传递。Queue本身是一个消息队列程序。</p><p>初始化Queue()对象时（例如：q=Queue(num)），若括号中没有指定最大可接收的消息数量，或数量为负值，那么就代表可接受的消息数量没有上限（直到内存尽头）。Queue的常用方法如下：</p><ul><li>Queue.qsize()：返回当前队列包含的消息数量</li><li>Queue.empty()：如果队列为空，返回True，否则返回False</li><li>Queue.full()：如果队列满了，返回True，否则返回False</li><li>Queue.get([block[,timeout]])：获取队列中的一条消息，然后将其从队列中移除，block默认值为True<ul><li>如果block使用默认值，且没有设置timeout（单位秒），消息队列为空，此时程序将被阻塞（停在读状态），直到从消息队列读到消息为止，如果设置了timeout，则会等待timeout秒，若还是没有读取到任何消息，则抛出“Queue.Empty”异常</li><li>如果block为False，消息队列为空，则会立刻抛出“Queue.Empty”异常</li></ul></li><li>Queue.get_nowait()：相当于Queue.get(False)</li><li>Queue.put([block[,timeout]])：将item消息写入队列，block默认值为True<ul><li>如果block使用默认值，且没有设置timeout（单位秒），当前消息队列已经没有空间写入时，此时程序将被阻塞（停在写状态），直到从消息队列腾出空间为止，如果设置了timeout，则会等待timeout秒，若还是没有空间，则抛出“Queue.Empty”异常</li><li>如果block为False，当消息队列没有空间可写入时，则会立刻抛出“Queue.Empty”异常</li></ul></li><li>Queue.put_nowait(item)：相当于Queue.put(False)</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Queue<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q<span class="token operator">=</span>Queue<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 初始化一个Queue对象，最多可接收三条put消息</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息1"</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息2"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回False</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息3"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回True</span>    <span class="token comment" spellcheck="true"># 因为消息队列已满，下面的try会抛出异常，</span>    <span class="token comment" spellcheck="true"># 第一个try会等待2秒后再抛出异常，第二个try会立刻抛出异常</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"消息4"</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消息队列已满，现有消息数量:%s"</span><span class="token operator">%</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token string">"消息4"</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消息队列已满，现有消息数量:%s"</span><span class="token operator">%</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取消息时，先判断消息队列是否为空，为空时再读取</span>    <span class="token keyword">if</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----从队列中获取消息---'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>q<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 先判断消息队列是否已满，不为满时再写入</span>    <span class="token keyword">if</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>put_nowait<span class="token punctuation">(</span><span class="token string">"消息4"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922232759327.png" alt="image-20210922232759327"></p><h3 id="使用队列在进程间通信"><a href="#使用队列在进程间通信" class="headerlink" title="使用队列在进程间通信"></a>使用队列在进程间通信</h3><p>创建2个子进程，一个子进程负责向队列中写入数据，另一个子进程负责从队列中读取数据。为了保证能够正确从队列中读取数据，设置读取的进程等待时间为2秒，如果2秒后仍然无法读取数据，则抛出异常</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">import</span>  time<span class="token comment" spellcheck="true"># 向队列中写入数据</span><span class="token keyword">def</span> <span class="token function">write_task</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>full<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            message <span class="token operator">=</span> <span class="token string">"消息"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>message<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"写入:%s"</span><span class="token operator">%</span>message<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从队列读取数据</span><span class="token keyword">def</span> <span class="token function">read_task</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># 休眠1秒</span>    <span class="token keyword">while</span> <span class="token operator">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"读取:%s"</span> <span class="token operator">%</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 等待2秒，如果还没读取到任何消息，</span>                                           <span class="token comment" spellcheck="true"># 则抛出"Queue.Empty"异常</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----父进程开始-----"</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 父进程创建Queue，并传给各个子进程</span>    pw <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>write_task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 实例化写入队列的子进程，并且传递队列</span>    pr <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>read_task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 实例化读取队列的子进程，并且传递队列</span>    pw<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 启动子进程 pw，写入</span>    pr<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 启动子进程 pr，读取</span>    pw<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待 pw 结束</span>    pr<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待 pr 结束</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----父进程结束-----"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922233346934.png" alt="image-20210922233346934"></p><h2 id="多进程爬虫"><a href="#多进程爬虫" class="headerlink" title="多进程爬虫"></a>多进程爬虫</h2><p>尽管多线程可以实现并发执行程序，但是多个线程之间只能共享当前进程的内存，所以线程所申请到的资源是有限的。想要更好的发挥爬虫的并发执行，考虑使用multiprocessing模块和Pool进程池来实现一个多进程爬虫。</p><p>下面以爬取某网站电影信息与下载地址为例子，实现多进程爬虫的具体步骤</p><h3 id="分析请求地址"><a href="#分析请求地址" class="headerlink" title="分析请求地址"></a>分析请求地址</h3><ul><li>打开电影网站的主页地址(<a href="https://www.ygdy8.net/html/gndy/dyzz/index.html)，然后点击底部下一页，对比两个主页地址翻页规律" target="_blank" rel="noopener">https://www.ygdy8.net/html/gndy/dyzz/index.html)，然后点击底部下一页，对比两个主页地址翻页规律</a></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922235014288.png" alt="image-20210922235014288"></p><pre><code>https://www.ygdy8.net/html/gndy/dyzz/index.html        # 主页1地址https://www.ygdy8.net/html/gndy/dyzz/list_23_2.html    # 主页2地址https://www.ygdy8.net/html/gndy/dyzz/list_23_3.html    # 主页3地址</code></pre><ul><li>将主页1地址修改为（<a href="https://www.ygdy8.net/html/gndy/dyzz/list_23_1.html），测试主页1是否正常显示与源地址相同内容，如果相同即可通过修改后面的list_23_1（页码数字）实现主页的翻页功能" target="_blank" rel="noopener">https://www.ygdy8.net/html/gndy/dyzz/list_23_1.html），测试主页1是否正常显示与源地址相同内容，如果相同即可通过修改后面的list_23_1（页码数字）实现主页的翻页功能</a></li><li>进入开发者工具，定位主页中电影的标题，获取电影详情页的链接地址</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922235506916.png" alt="image-20210922235506916"></p><h3 id="爬取电影详情页地址"><a href="#爬取电影详情页地址" class="headerlink" title="爬取电影详情页地址"></a>爬取电影详情页地址</h3><ul><li>创建pool_spider.py文件，然后在该文件中导入当前爬虫所需要的模块</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests                      <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent <span class="token comment" spellcheck="true"># 导入请求头模块</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool     <span class="token comment" spellcheck="true"># 导入进程池</span><span class="token keyword">import</span> re                            <span class="token comment" spellcheck="true"># 导入正则表达式模块</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup        <span class="token comment" spellcheck="true"># 导入解析html代码的模块</span><span class="token keyword">import</span> time                          <span class="token comment" spellcheck="true"># 导入时间模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建Spider类，首先在该类中的init()方法中分别初始化保存电影详情页请求地址的列表</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Spider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>info_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true"># 所有电影详情页的请求地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>创建get_home()方法，首先在该方法中创建随即请求头，然后发送网络请求，当请求成功后爬取电影详情页的网络地址，最后将爬取的链接地址添加到对应的列表中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取主页信息</span><span class="token keyword">def</span> <span class="token function">get_home</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> home_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random  <span class="token comment" spellcheck="true"># 创建随机请求头</span>    home_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>home_url<span class="token punctuation">,</span> header<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送主页网络请求</span>    <span class="token keyword">if</span> home_response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断请求是否成功</span>        home_response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gb2312'</span>  <span class="token comment" spellcheck="true"># 设置编码方式</span>        html <span class="token operator">=</span> home_response<span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取返回的HTML代码</span>        <span class="token comment" spellcheck="true"># 获取所有电影详情页地址</span>        details_urls <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;a href="(.*?)" class="ulink">'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>info_urls<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>details_urls<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加请求地址列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建程序入口，然后创建主页请求地址的列表，接着创建自定义爬虫类的对象，最后分别通过串行和多进程的方式爬取电影详情页地址，并统计两组爬虫所使用的时间</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 创建程序入口</span>    <span class="token comment" spellcheck="true"># 创建主页请求地址的列表</span>    home_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.ygdy8.net/html/gndy/dyzz/list_23_{}.html'</span>                    <span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    s <span class="token operator">=</span> Spider<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建自定义爬虫类对象</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 记录串行爬取电影详情页地址的起始时间</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> home_url<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 循环遍历主页请求地址</span>        s<span class="token punctuation">.</span>get_home<span class="token punctuation">(</span>i<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 发送网络请求，获取每个电影详情页地址</span>    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 记录串行爬取电影详情页地址结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'串行爬取电影详情页地址耗时：'</span><span class="token punctuation">,</span>end_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span>    start_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 记录四进程爬取电影详情页地址起始时间</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 创建4进程对象</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_home<span class="token punctuation">,</span>home_url<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 通过进程获取每个电影详情页地址</span>    end_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 记录4进程爬取电影详情页地址结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4进程爬取电影详情页地址耗时:'</span><span class="token punctuation">,</span> end_time_4 <span class="token operator">-</span> start_time_4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爬取电影信息与下载地址"><a href="#爬取电影信息与下载地址" class="headerlink" title="爬取电影信息与下载地址"></a>爬取电影信息与下载地址</h3><p>完成以上准备工作，接下来需要实现电影信息与下载地址的爬取，不过在爬取信息时同样需要通过浏览器开发者工具，获取电影信息与下载地址所在的HTML标签。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923000421598.png" alt="image-20210923000421598"></p><p>通过电影详情页面右侧的滚动条，将网页滚动到底部，然后通过浏览器的开发者工具找到电影下载地址所在的HTML标签</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210923000521312.png" alt="image-20210923000521312"></p><p>确定需要爬取内容所在HTML的位置后，需要编写爬取信息的代码，首先在Spider类中创建get_info()方法，在该方法中先通过随机请求头发送电影详情页的网络请求，接着在解析后的HTML代码中获取需要的电影信息并将每行信息添加至临时表格。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random  <span class="token comment" spellcheck="true"># 创建随机请求头</span>    info_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> header<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送获取每条电影信息的网络请求</span>    <span class="token keyword">if</span> info_response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断请求是否成功</span>        info_response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gb2312'</span>        html <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>info_response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取返回的html代码</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 获取迅雷下载地址</span>            download_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;a href=".*?">(.*?)&lt;/a>&lt;/td>'</span><span class="token punctuation">,</span>                                      info_response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            name <span class="token operator">=</span> html<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div[class="title_all"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取电影名称</span>            <span class="token comment" spellcheck="true"># 将电影的详细信息进行处理，先去除所有html中的空格（\u3000），然后用◎将数据进行分割</span>            info_all <span class="token operator">=</span> <span class="token punctuation">(</span>html<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div[id="Zoom"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\u3000'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'◎'</span><span class="token punctuation">)</span>            date <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取上映时间</span>            imdb <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取IMDb评分</span>            douban <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取豆瓣评分</span>            length <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取片长</span>            <span class="token comment" spellcheck="true"># 电影信息</span>            info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">'date'</span><span class="token punctuation">:</span> date<span class="token punctuation">,</span> <span class="token string">'imdb'</span><span class="token punctuation">:</span> imdb<span class="token punctuation">,</span>                    <span class="token string">'douban'</span><span class="token punctuation">:</span> douban<span class="token punctuation">,</span> <span class="token string">'length'</span><span class="token punctuation">:</span> length<span class="token punctuation">,</span> <span class="token string">'download_url'</span><span class="token punctuation">:</span> download_url<span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印电影信息</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 出现异常不再爬取，直接爬起下一个电影的信息</span>            <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在程序入口添加代码，首先需要组合每个电影详情页的请求地址，然后分别通过串行与多进程的方式爬取电影详情信息，并将对应信息保存在Excel表格中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 以下代码用于爬取电影详情信息，并保存</span>info_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.ygdy8.net'</span> <span class="token operator">+</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">.</span>info_urls<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 组合每个电影详情页的请求地址</span>info_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录爬取电影详情信息的起始时间</span><span class="token keyword">for</span> i <span class="token keyword">in</span> info_urls<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环遍历电影详情页请求地址</span>    s<span class="token punctuation">.</span>get_info<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送网络请求，获取每个电影详情信息</span>info_end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录串行结束时间</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'串行爬取电影详情信息耗时：'</span><span class="token punctuation">,</span> info_end_time <span class="token operator">-</span> info_start_time<span class="token punctuation">)</span>info_start_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录4进程爬取电影详情信息的起始时间</span>pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建4进程对象</span>pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_info<span class="token punctuation">,</span> info_urls<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 通过进程获取每个电影详情信息</span>info_end_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录4进程爬取电影详情信息结束时间</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4进程爬取电影详情信息耗时:'</span><span class="token punctuation">,</span> info_end_time_4 <span class="token operator">-</span> info_start_time_4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>此示例完整代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests                      <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent <span class="token comment" spellcheck="true"># 导入请求头模块</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool     <span class="token comment" spellcheck="true"># 导入进程池</span><span class="token keyword">import</span> re                            <span class="token comment" spellcheck="true"># 导入正则表达式模块</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup        <span class="token comment" spellcheck="true"># 导入解析html代码的模块</span><span class="token keyword">import</span> time                          <span class="token comment" spellcheck="true"># 导入时间模块</span><span class="token keyword">class</span> <span class="token class-name">Spider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>info_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true"># 所有电影详情页的请求地址</span>    <span class="token comment" spellcheck="true"># 获取主页信息</span>    <span class="token keyword">def</span> <span class="token function">get_home</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> home_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random  <span class="token comment" spellcheck="true"># 创建随机请求头</span>        home_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>home_url<span class="token punctuation">,</span> header<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送主页网络请求</span>        <span class="token keyword">if</span> home_response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断请求是否成功</span>            home_response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gb2312'</span>  <span class="token comment" spellcheck="true"># 设置编码方式</span>            html <span class="token operator">=</span> home_response<span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取返回的HTML代码</span>            <span class="token comment" spellcheck="true"># 获取所有电影详情页地址</span>            details_urls <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;a href="(.*?)" class="ulink">'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>info_urls<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>details_urls<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 添加请求地址列表</span>    <span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random  <span class="token comment" spellcheck="true"># 创建随机请求头</span>        info_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> header<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送获取每条电影信息的网络请求</span>        <span class="token keyword">if</span> info_response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断请求是否成功</span>            info_response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gb2312'</span>            html <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>info_response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取返回的html代码</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 获取迅雷下载地址</span>                download_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;a href=".*?">(.*?)&lt;/a>&lt;/td>'</span><span class="token punctuation">,</span>                                          info_response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                name <span class="token operator">=</span> html<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div[class="title_all"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取电影名称</span>                <span class="token comment" spellcheck="true"># 将电影的详细信息进行处理，先去除所有html中的空格（\u3000），然后用◎将数据进行分割</span>                info_all <span class="token operator">=</span> <span class="token punctuation">(</span>html<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div[id="Zoom"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>p<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\u3000'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'◎'</span><span class="token punctuation">)</span>                date <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取上映时间</span>                imdb <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取IMDb评分</span>                douban <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取豆瓣评分</span>                length <span class="token operator">=</span> info_all<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取片长</span>                <span class="token comment" spellcheck="true"># 电影信息</span>                info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">'date'</span><span class="token punctuation">:</span> date<span class="token punctuation">,</span> <span class="token string">'imdb'</span><span class="token punctuation">:</span> imdb<span class="token punctuation">,</span>                        <span class="token string">'douban'</span><span class="token punctuation">:</span> douban<span class="token punctuation">,</span> <span class="token string">'length'</span><span class="token punctuation">:</span> length<span class="token punctuation">,</span> <span class="token string">'download_url'</span><span class="token punctuation">:</span> download_url<span class="token punctuation">}</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印电影信息</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 出现异常不再爬取，直接爬起下一个电影的信息</span>                <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 创建程序入口</span>    <span class="token comment" spellcheck="true"># 创建主页请求地址的列表</span>    home_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.ygdy8.net/html/gndy/dyzz/list_23_{}.html'</span>                    <span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    s <span class="token operator">=</span> Spider<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建自定义爬虫类对象</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 记录串行爬取电影详情页地址的起始时间</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> home_url<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 循环遍历主页请求地址</span>        s<span class="token punctuation">.</span>get_home<span class="token punctuation">(</span>i<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 发送网络请求，获取每个电影详情页地址</span>    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 记录串行爬取电影详情页地址结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'串行爬取电影详情页地址耗时：'</span><span class="token punctuation">,</span>end_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span>    start_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 记录四进程爬取电影详情页地址起始时间</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 创建4进程对象</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_home<span class="token punctuation">,</span>home_url<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 通过进程获取每个电影详情页地址</span>    end_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 记录4进程爬取电影详情页地址结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4进程爬取电影详情页地址耗时:'</span><span class="token punctuation">,</span> end_time_4 <span class="token operator">-</span> start_time_4<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以下代码用于爬取电影详情信息，并保存</span>    info_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.ygdy8.net'</span> <span class="token operator">+</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">.</span>info_urls<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 组合每个电影详情页的请求地址</span>    info_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录爬取电影详情信息的起始时间</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> info_urls<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环遍历电影详情页请求地址</span>        s<span class="token punctuation">.</span>get_info<span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送网络请求，获取每个电影详情信息</span>    info_end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录串行结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'串行爬取电影详情信息耗时：'</span><span class="token punctuation">,</span> info_end_time <span class="token operator">-</span> info_start_time<span class="token punctuation">)</span>    info_start_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录4进程爬取电影详情信息的起始时间</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建4进程对象</span>    pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>s<span class="token punctuation">.</span>get_info<span class="token punctuation">,</span> info_urls<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 通过进程获取每个电影详情信息</span>    info_end_time_4 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录4进程爬取电影详情信息结束时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4进程爬取电影详情信息耗时:'</span><span class="token punctuation">,</span> info_end_time_4 <span class="token operator">-</span> info_start_time_4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 多线程与多进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取动态渲染的信息</title>
      <link href="/pa-qu-dong-tai-xuan-ran-de-xin-xi.html"/>
      <url>/pa-qu-dong-tai-xuan-ran-de-xin-xi.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>很多网页数据并不是由服务端一次性返回的，需要向服务端单独发送一个或多个异步请求，服务端才会返回JSON格式的数据信息。本章介绍如何使用Ajax、selenium自动化测试、PhantomJS以及Splash技术<code>获取动态渲染的信息</code>。</p><h2 id="Ajax数据的爬取"><a href="#Ajax数据的爬取" class="headerlink" title="Ajax数据的爬取"></a>Ajax数据的爬取</h2><p>Ajax的全程是“Asynchronous JavaScript and XML”，可以说是“异步JavaScript”与“XML”的组合。他是一门单独的编译语言，可以在不刷新、不更改页面链接的情况下实现与服务器交换数据并更新网页部分内容。</p><p>在实现爬取Ajax动态加载的数据信息时：</p><ul><li>首先需要在浏览器的网络监视器中，根据动态加载的技术选择网络请求的类型</li><li>然后通过逐个筛选的方式，查询浏览信息中的关键数据并获取对应的请求地址</li><li>最后进行信息的解析工作</li></ul><p><strong>Ajax数据的爬取过程如下所示</strong></p><p>以爬取b站排行榜视频为例（此示例所爬取的B站排行榜URL地址已经被更换，因此此示例无法爬取到视频，仅作为一个爬取Ajax数据的例子）</p><h3 id="分析请求地址"><a href="#分析请求地址" class="headerlink" title="分析请求地址"></a>分析请求地址</h3><ul><li>在浏览器打开B站排行榜（<a href="https://vc.bilibili.com/p/eden/rank#/?tab=全部），然后进入开发者工具，选择“网络监视器”并在类型处选择“XHR”，最后按下快捷键" target="_blank" rel="noopener">https://vc.bilibili.com/p/eden/rank#/?tab=全部），然后进入开发者工具，选择“网络监视器”并在类型处选择“XHR”，最后按下快捷键</a><f5>刷新当前网页</f5></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210922094203.jpg" alt="微信图片_20210922094203"></p><ul><li>依次点击每一条网络请求，然后选择“响应”选项查看每条网络请求所返回的数据，并找到与网页内容相同的数据</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922094453531.png" alt="image-20210922094453531"></p><ul><li>确认了网络请求所返回的数据后，折叠“响应”中的JSON数据，确认每次请求返回10组数据</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922094624664.png" alt="image-20210922094624664"></p><ul><li>选中当前网络请求，然后单击“消息头”选项获取网络请求地址</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922094743461.png" alt="image-20210922094743461"></p><ul><li>滑动网页，查看网页中排名前10以外的小视频。此时观察网络监视器的网络请求列表中，如果出现了新的网络请求则单击该请求并查看对应的请求地址</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922094910865.png" alt="image-20210922094910865"></p><blockquote><p>根据以上的操作方式再次获取排名前20以外的小视频，然后获取最新的网络请求地址。经过对比可以观察出指定规律，请求地址中的“page_size=10”表示每页有10组数据，而“next_offset=”没有参数的情况下是第一页（也就是小视频排行前10名的数据），“next_offset=11”表示第二页，“next_offset=21”表示第三页</p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922095201506.png" alt="image-20210922095201506"></p><h3 id="提取视频标题与视频地址"><a href="#提取视频标题与视频地址" class="headerlink" title="提取视频标题与视频地址"></a>提取视频标题与视频地址</h3><p>开始编写爬虫程序：</p><ul><li>导入爬虫程序所需要的模块，然后创建网络请求地址，由于发去目标为10页、每页10组数据，所以需要将请求地址中的next_offset=参数所对应的值设置为变量，这样可以实现循环请求每页JSON数据</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 网络请求模块</span><span class="token keyword">import</span> time      <span class="token comment" spellcheck="true"># 时间模块</span><span class="token keyword">import</span> random    <span class="token comment" spellcheck="true"># 随机模块</span><span class="token keyword">import</span> os        <span class="token comment" spellcheck="true"># 操作系统模块</span><span class="token keyword">import</span> re        <span class="token comment" spellcheck="true"># 正则表达式</span><span class="token comment" spellcheck="true"># 哔哩哔哩小视频json地址</span>json_url <span class="token operator">=</span> <span class="token string">'http://api.vc.bilibili.com/board/v1/ranking/top?page_size=10&amp;next_offset={page}1&amp;tag=%E4%BB%8A%E6%97%A5%E7%83%AD%E9%97%A8&amp;platform=pc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建Crawl类，然后再init()方法中创建浏览器的头部信息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Crawl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建头部信息</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在Crawl类中创建get_json()方法，在该方法中首先通过requests.get方法实现网络请求的发生，然后判断一下当前请求成功返回获取到的json信息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_json</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> json_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>json_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断请求是否成功</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回json信息</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取json信息的请求没有成功！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建程序入口，首先创建Crawl爬虫类对象，然后通过for循环的方式进行网络请求，最后打印出所有的视频标题与对应的视频地址</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> Crawl<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 创建爬虫类对象</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环请求10页每页10组数据</span>        json <span class="token operator">=</span> c<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span>json_url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>page<span class="token operator">=</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取返回的json数据</span>        infos <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 信息集</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> infos<span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 遍历信息</span>            title <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'description'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 视频标题</span>            video_url <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'video_playurl'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 视频地址</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>video_url<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 打印提取的视频标题与视频地址</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机产生获取json请求的间隔时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视频的批量下载"><a href="#视频的批量下载" class="headerlink" title="视频的批量下载"></a>视频的批量下载</h3><p>视频的标题与视频地址提取完成后，说明整个怕从程序已经测试成功，接下来只需要通过爬虫的视频地址进行视频下载即可，步骤如下：</p><ul><li>在Crawl类中创建download_video()方法，在该方法中首先通过requests.get实现视频地址的网络请求，然后判断请求是否成功，成功后再通过open()函数将视频写入本地即可</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#下载视频</span><span class="token keyword">def</span> <span class="token function">download_video</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>video_url<span class="token punctuation">,</span>titlename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 下载视频的网络请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果video目录不存在时</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建该目录</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断请求是否成功</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'video/'</span><span class="token operator">+</span>titlename<span class="token operator">+</span><span class="token string">'.mp4'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># 将视频写入指定位置</span>                <span class="token keyword">for</span> data <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 循环写入，实现一段一段的写</span>                    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                                                <span class="token comment" spellcheck="true"># 写入视频文件</span>                    f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                    <span class="token comment" spellcheck="true"># 刷新缓存</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成！'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'视频下载失败！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在程序入口中，获取视频标题代码的下面，通过正则表达式匹配的方式将视频标题中的非法字符与符号进行筛选</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 只保留标题中英文、数字与汉字，其它符号会影响写入文件</span>comp <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'[^A-Z^a-z^0-9^\u4e00-\u9fa5]'</span><span class="token punctuation">)</span>title <span class="token operator">=</span> comp<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将不符合条件的符号替换为空</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在打印提取的视频标题与视频地址代码的下面，通过Crawl类对象名c调用download_video()方法实现小视频的批量下载</li></ul><pre class="line-numbers language-python"><code class="language-python">c<span class="token punctuation">.</span>download_video<span class="token punctuation">(</span>video_url<span class="token punctuation">,</span> title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 下载视频,视频标题作为视频的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>完整代码如下：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 网络请求模块</span><span class="token keyword">import</span> time      <span class="token comment" spellcheck="true"># 时间模块</span><span class="token keyword">import</span> random    <span class="token comment" spellcheck="true"># 随机模块</span><span class="token keyword">import</span> os        <span class="token comment" spellcheck="true"># 操作系统模块</span><span class="token keyword">import</span> re        <span class="token comment" spellcheck="true"># 正则表达式</span><span class="token comment" spellcheck="true"># 哔哩哔哩小视频json地址</span>json_url <span class="token operator">=</span> <span class="token string">'http://api.vc.bilibili.com/board/v1/ranking/top?page_size=10&amp;next_offset={page}1&amp;tag=%E4%BB%8A%E6%97%A5%E7%83%AD%E9%97%A8&amp;platform=pc'</span><span class="token keyword">class</span> <span class="token class-name">Crawl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建头部信息</span>        self<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0'</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">get_json</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> json_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>json_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断请求是否成功</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回json信息</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取json信息的请求没有成功！'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#下载视频</span>    <span class="token keyword">def</span> <span class="token function">download_video</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>video_url<span class="token punctuation">,</span>titlename<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 下载视频的网络请求</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>video_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果video目录不存在时</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建该目录</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断请求是否成功</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'video/'</span><span class="token operator">+</span>titlename<span class="token operator">+</span><span class="token string">'.mp4'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># 将视频写入指定位置</span>                    <span class="token keyword">for</span> data <span class="token keyword">in</span> response<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span>chunk_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 循环写入，实现一段一段的写</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                                                <span class="token comment" spellcheck="true"># 写入视频文件</span>                        f<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                    <span class="token comment" spellcheck="true"># 刷新缓存</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完成！'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'视频下载失败！'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> Crawl<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 创建爬虫类对象</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环请求10页每页10组数据</span>        json <span class="token operator">=</span> c<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span>json_url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>page<span class="token operator">=</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取返回的json数据</span>        infos <span class="token operator">=</span> json<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 信息集</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> infos<span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 遍历信息</span>            title <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'description'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 视频标题</span>            <span class="token comment" spellcheck="true"># 只保留标题中英文、数字与汉字，其它符号会影响写入文件</span>            comp <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'[^A-Z^a-z^0-9^\u4e00-\u9fa5]'</span><span class="token punctuation">)</span>            title <span class="token operator">=</span> comp<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将不符合条件的符号替换为空</span>            video_url <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'video_playurl'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 视频地址</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>video_url<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 打印提取的视频标题与视频地址</span>            c<span class="token punctuation">.</span>download_video<span class="token punctuation">(</span>video_url<span class="token punctuation">,</span> title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 下载视频,视频标题作为视频的名字</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 随机产生获取json请求的间隔时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用selenium爬取动态加载的信息"><a href="#使用selenium爬取动态加载的信息" class="headerlink" title="使用selenium爬取动态加载的信息"></a>使用selenium爬取动态加载的信息</h2><p>selenium是浏览器自动化测试框架，是一个用于Web应用程序测试的工具，可以直接运行在浏览器当中，并可以<code>驱动浏览器执行指定的动作</code>，如点击、下拉等操作，还可以<code>获取浏览器当前页面的源码</code>，就像用户在浏览器中操作一样。该工具所支持的浏览器有IE浏览器、Mozilla Firefox以及Google Chrome等</p><h3 id="安装selenium模块"><a href="#安装selenium模块" class="headerlink" title="安装selenium模块"></a>安装selenium模块</h3><pre><code>pip install selenium</code></pre><h3 id="下载浏览器驱动"><a href="#下载浏览器驱动" class="headerlink" title="下载浏览器驱动"></a>下载浏览器驱动</h3><p>Microsoft Edge的webdriver驱动下载地址：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads" target="_blank" rel="noopener">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/#downloads</a></p><h3 id="selenium模块的使用"><a href="#selenium模块的使用" class="headerlink" title="selenium模块的使用"></a>selenium模块的使用</h3><p>驱动下载完成后将其（msedgedriver.exe）保存在与python.exe文件同级路径中即可。</p><blockquote><p>如果想跟chrome一样配置无界面模式呢？你会发现webdriver.Edge()方法中不能添加option参数，所以这里需要再添加一个python库，msedge-selenium-tools</p><pre><code>pip install msedge-selenium-tools</code></pre></blockquote><p>以获取京东商品信息为例，selenium模块使用代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver  <span class="token comment" spellcheck="true"># 导入浏览器驱动模块</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait  <span class="token comment" spellcheck="true"># 导入等待类</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC  <span class="token comment" spellcheck="true"># 等待条件</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By                       <span class="token comment" spellcheck="true"># 节点定位</span><span class="token keyword">from</span> msedge<span class="token punctuation">.</span>selenium_tools <span class="token keyword">import</span> EdgeOptions<span class="token keyword">from</span> msedge<span class="token punctuation">.</span>selenium_tools <span class="token keyword">import</span> Edge<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建Edge浏览器驱动参数对象</span>    Edge_options <span class="token operator">=</span> EdgeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>    Edge_options<span class="token punctuation">.</span>use_chromium <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment" spellcheck="true"># 使用headless无界面浏览器模式</span>    Edge_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'headless'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 加载Edge浏览器驱动</span>    driver <span class="token operator">=</span> Edge<span class="token punctuation">(</span>options<span class="token operator">=</span>Edge_options<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 请求地址</span>    r <span class="token operator">=</span> driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://item.jd.com/12353915.html'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待10秒</span>    <span class="token comment" spellcheck="true"># 等待页面加载class名称为itemInfo-wrap的节点，该节点中包含商品信息</span>    wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span><span class="token string">"itemInfo-wrap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取itemInfo-wrap节点中所有div节点</span>    name_div <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'itemInfo-wrap'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_elements_by_tag_name<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    summary_price <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'summary-price'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'提取的商品标题如下：'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 打印商品标题</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'提取的商品宣传语如下：'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name_div<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 打印宣传语</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'提取的编著信息如下：'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name_div<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 打印编著信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'提取的价格信息如下：'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>summary_price<span class="token punctuation">.</span>text<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 打印价格信息</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 退出浏览器驱动</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'显示异常信息！'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922110332595.png" alt="image-20210922110332595"></p><h3 id="selenium模块的常用方法"><a href="#selenium模块的常用方法" class="headerlink" title="selenium模块的常用方法"></a>selenium模块的常用方法</h3><p>selenium模块支持多种获取网页节点的方法，比较常用的方法如下表所示：</p><table><thead><tr><th>常用方法</th><th>描述</th></tr></thead><tbody><tr><td>driver.find_element_by_id()</td><td>根据id获取节点，参数为字符类型id对应的值</td></tr><tr><td>driver.find_element_by_name()</td><td>根据name获取节点，参数为字符类型name对应的值</td></tr><tr><td>driver.find_element_by_xpath()</td><td>根据XPath获取节点，参数为字符类型的XPath</td></tr><tr><td>driver.find_element_by_link_text()</td><td>根据i链接文本获取节点，参数为字符类型链接文本</td></tr><tr><td>driver.find_element_by_tag_name()</td><td>根据节点名称获取节点，参数为字符类型的节点名称</td></tr><tr><td>driver.find_element_by_class_name()</td><td>根据class获取节点，参数为字符类型class对应的值</td></tr><tr><td>driver.find_element_by_css_selector()</td><td>根据css选择器获取节点，参数为字符类型css选择器语法</td></tr></tbody></table><blockquote><p>上表中的方法均为<code>获取单个节点</code>的方法，如果需要获取符合条件的多个节点时，可以再对应方法中的element后面加s即可，例如driver.find_element_by_id() –&gt; driver.find_elements_by_id()</p></blockquote><p>除了上述常见的获取节点方法以外，还可以使用driver.find_element()方法获取单个节点，使用driver.find_elements()方法获取多个节点。只是再调用这两种方法时，需要为其指定by与value参数。</p><ul><li>by参数表示获取节点的方式</li><li>value参数表示获取方式所对应的值（条件）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取name节点中所有div节点</span>name_div <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>TAG_NAME<span class="token punctuation">,</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'提取的商品标题如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name_div<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印商品标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>By的属性及其用法可参考下表：</p><table><thead><tr><th>By属性</th><th>用法</th></tr></thead><tbody><tr><td>By.ID</td><td>表示根据id值获取对应的单个或多个节点</td></tr><tr><td>By.LINK_TEXT</td><td>表示根据链接文本获取对应的单个或多个节点</td></tr><tr><td>By.PARTIAL_LINK_TEXT</td><td>表示根据部分链接文本获取对应的单个或多个节点</td></tr><tr><td>By.NAME</td><td>根据name值获取对应的单个或多个节点</td></tr><tr><td>By.TAG_NAME</td><td>根据节点名称获取单个或多个节点</td></tr><tr><td>By.CLASS_NAME</td><td>根据class值获取单个或多个节点</td></tr><tr><td>By.CSS_SELECTOR</td><td>根据CSS选择器获取单个或多个节点，对应value为字符串CSS位置</td></tr><tr><td>By.XPATH</td><td>根据By.XPATH获取单个或多个节点，对应的value为字符串节点位置</td></tr></tbody></table><p>在使用selenium模块获取某个节点中的某个属性所对应的值时，可以使用get_attribute()方法来实现</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 根据XPATH定位获取指定节点中的href地址</span>href <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">'//*[id="p-author"]/a[1]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定节点中的地址信息如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Splash的爬虫应用"><a href="#Splash的爬虫应用" class="headerlink" title="Splash的爬虫应用"></a>Splash的爬虫应用</h2><blockquote><p>注：由于当前使用的笔记本安装不了splash，因此本部分内容只作为记录，而没有运行过代码</p></blockquote><p>Splash是一个JavaScript渲染服务，它是一个带有HTTP API的轻型Web浏览器。python可以通过HTTP API调用Splash中的一些方法实现对页面的渲染工作，同时它还可以使用Lua语言实现界面的渲染，所以使用Splash同样可以实现对动态渲染页面的爬取</p><h3 id="搭建Splash环境（windows-10）"><a href="#搭建Splash环境（windows-10）" class="headerlink" title="搭建Splash环境（windows 10）"></a>搭建Splash环境（windows 10）</h3><p>首先需要先安装Docker，然后通过docker命令安装Splash，再启动Splash服务，才可以正常使用Splash</p><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><p>Docker只支持Micsoft Windows10专业版或企业版64位，对于以前的版本，需要下载Docker Toolbox</p><p>Docker下载完成后，双击Docker Desktop Installer.exe文件进行安装</p><blockquote><p>windows10系统下安装Docker时，需要开启Hyper -V</p></blockquote><h4 id="安装Splash"><a href="#安装Splash" class="headerlink" title="安装Splash"></a>安装Splash</h4><p>只需在Anaconda Prompt命令窗口中输入下述命令即可：</p><pre><code>docker pull scrapinghub/splash</code></pre><p>Splash安装完成后，需要使用下述命令启动Splash服务：</p><pre><code>docker run -p 8050:8050 scrapinghub/splash</code></pre><p>Splash服务启动完成后，在浏览器输入<a href="http://localhost:8050/即可打开测试页面" target="_blank" rel="noopener">http://localhost:8050/即可打开测试页面</a></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922141939809.png" alt="image-20210922141939809"></p><p>在Splash测试页面中，右侧的代码是默认生成的Lua脚本。接下来可以在右侧上方的输入框中输入一个网址，例如百度网址，然后单击“Render me”按钮，将显示下述界面</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210922142126962.png" alt="image-20210922142126962"></p><p>上图显示内容是通过Lua代码所生成的，其中包含渲染截图、HAR加载统计数据、网页源代码</p><blockquote><p>如果电脑关机或者重启后，再次使用Splash时需要重新启动Splash服务，即“docker run -p 8050:8050 scrapinghub/splash”</p></blockquote><h3 id="Splash中的HTTP-API"><a href="#Splash中的HTTP-API" class="headerlink" title="Splash中的HTTP API"></a>Splash中的HTTP API</h3><p>Splash提供了API接口，可以实现pyton与Splash之间的交互。Splash比较常见的接口及使用方法如下：</p><h4 id="render-html"><a href="#render-html" class="headerlink" title="render.html"></a>render.html</h4><p>通过该接口可以实现<code>获取JavaScript渲染后的HTML代码</code>，接口请求地址：<a href="http://localhost:8050/render.html" target="_blank" rel="noopener">http://localhost:8050/render.html</a></p><p><code>使用render.html接口只需要将接口地址设置为发送网络请求的主地址，然后将需要爬取的网页地址以参数的方式添加至网络请求中即可</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup    <span class="token comment" spellcheck="true"># 导入HTML解析模块</span>splash_url <span class="token operator">=</span> <span class="token string">'http://localhost:8050/render.html'</span>     <span class="token comment" spellcheck="true"># Splash的render.html接口地址</span>args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">}</span>              <span class="token comment" spellcheck="true"># 需要爬取的页面地址</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>splash_url<span class="token punctuation">,</span>args<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 发送网络请求</span>response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span>                            <span class="token comment" spellcheck="true"># 设置编码方式</span>bs <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建解析HTML代码的BeautifulSoup对象</span><span class="token comment" spellcheck="true"># 获取百度首页logo图片的链接</span>img_url <span class="token operator">=</span> <span class="token string">'https:'</span><span class="token operator">+</span>bs<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'div[class="s-p-top"]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>img_url<span class="token punctuation">)</span>                                       <span class="token comment" spellcheck="true"># 打印链接地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>render.html的其他常用参数及含义：</p><table><thead><tr><th>参数名</th><th>描述</th></tr></thead><tbody><tr><td>timeout</td><td>设置渲染页面超时的时间</td></tr><tr><td>proxy</td><td>设置代理服务的地址</td></tr><tr><td>wait</td><td>设置页面加载后等待更新的时间</td></tr><tr><td>images</td><td>设置是否下载图片，默认值为1表示下载图片，值为0表示不下载图片</td></tr><tr><td>js_source</td><td>设置用户自定义的JavaScript代码，在页面渲染前执行</td></tr></tbody></table><p>详细参数可参考官方文档：<a href="https://splash.readthedocs.io/en/stable/api.html" target="_blank" rel="noopener">https://splash.readthedocs.io/en/stable/api.html</a></p><h4 id="render-png"><a href="#render-png" class="headerlink" title="render.png"></a>render.png</h4><p>通过该接口可以实现<code>获取目标网页的截图</code>，接口请求地址：<a href="http://localhost:8050/render.png" target="_blank" rel="noopener">http://localhost:8050/render.png</a></p><p><code>render.png接口相比render.html还需要两个重要参数，分别为“width”和“height”，使用这两个参数即可指定目标网页截图的宽度与高度</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span>splash_url <span class="token operator">=</span> <span class="token string">'http://localhost:8050/render.png'</span>     <span class="token comment" spellcheck="true"># Splash的render.png接口地址</span>args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">,</span><span class="token string">'width'</span><span class="token punctuation">:</span><span class="token number">1280</span><span class="token punctuation">,</span><span class="token string">'height'</span><span class="token punctuation">:</span><span class="token number">800</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 需要爬取的页面地址</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>splash_url<span class="token punctuation">,</span>args<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'baidu.png'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true"># 调用open函数</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                                 <span class="token comment" spellcheck="true"># 将返回的二进制数据保存成图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Splash还提供了render.jpeg接口，该接口与render.png类似，只不过返回的是JPEG格式的二进制数据</p></blockquote><h4 id="render-json"><a href="#render-json" class="headerlink" title="render.json"></a>render.json</h4><p>通过该接口可以实现<code>获取JavaScript渲染网页信息的JSON</code>，根据传递的参数，它可以包含HTML、PNG和其他信息。接口请求地址：<a href="http://localhost:8050/render.json" target="_blank" rel="noopener">http://localhost:8050/render.json</a></p><p><code>在默认情况下使用render.json接口，将返回请求地址、页面标题、页面尺寸的JSON信息</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span>splash_url <span class="token operator">=</span> <span class="token string">'http://localhost:8050/render.json'</span>     <span class="token comment" spellcheck="true"># Splash的render.json接口地址</span>args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'url'</span><span class="token punctuation">:</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">}</span>              <span class="token comment" spellcheck="true"># 需要爬取的页面地址</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>splash_url<span class="token punctuation">,</span>args<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 打印返回的json信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行Lua自定义脚本"><a href="#执行Lua自定义脚本" class="headerlink" title="执行Lua自定义脚本"></a>执行Lua自定义脚本</h3><p>Splash还提供了一个非常强大的execute接口，该接口可以实现在python代码中执行Lua脚本，使用该接口就必须指定lua_source参数，该参数表示需要执行的Lua脚本，Splash执行完成以后将结果返回给python。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote   <span class="token comment" spellcheck="true"># 导入quote方法</span><span class="token comment" spellcheck="true"># 自定义的lua脚本</span>lua_script <span class="token operator">=</span> <span class="token triple-quoted-string string">'''function main(splash)    splash:go("https://www.baidu.com/")    splash:wait(0.5)    return splash:html()end'''</span>splash_url <span class="token operator">=</span> <span class="token string">'http://localhost:8050/execute?lua_source='</span><span class="token operator">+</span> quote<span class="token punctuation">(</span>lua_script<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># Splash的execute接口地址</span><span class="token comment" spellcheck="true"># 定义headers信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) '</span>                        <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>splash_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                                      <span class="token comment" spellcheck="true"># 打印渲染后的html代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Splash中使用Lua脚本可以执行一系列渲染操作，这样可以通过Splash模拟浏览器实现网页数据的提取工作</p><p>Lua脚本中的语法比较简单，可以通过“splash:”的方式调用其内部的方法与属性</p><ul><li>第05行的代码<code>function main(splash)</code>表示脚本入口</li><li>第06行的代码<code>splash:go(&quot;https://www.baidu.com/&quot;)</code>表示调用go()方法访问网络地址</li><li>第07行的代码<code>splash:wait(0.5)</code>表示等待0.5秒</li><li>第08行的代码<code>return splash:html()</code>表示返回渲染后的HTML代码</li><li>第09行的代码<code>end</code>表示脚本结束</li></ul><p>Lua脚本的常用属性与方法含义：</p><table><thead><tr><th>参数与方法</th><th>描述</th></tr></thead><tbody><tr><td>splash.args属性</td><td>获取加载时配置的参数，例如url、GET参数、POST表单等</td></tr><tr><td>splash.js_enabled属性</td><td>该属性默认为true表示可执行JavaScript代码，设置false表示禁止执行</td></tr><tr><td>splash.private_mode_enabled属性</td><td>表示是否使用浏览器的私有模式（隐身模式），true表示启动，false表示关闭</td></tr><tr><td>splash.resource_timeout属性</td><td>设置网络请求的默认超时时间，以秒为单位</td></tr><tr><td>splash.images_enabled属性</td><td>启用或禁用图像，true表示启用，false表示禁用</td></tr><tr><td>splash.plugins_enabled属性</td><td>启用或禁用浏览器插件，true表示启用，false表示禁用</td></tr><tr><td>splash.scroll_position属性</td><td>获取或设置当前滚动位置</td></tr><tr><td>splash.jsfunc()方法</td><td>将JavaScript函数转换为可调用的Lua脚本，但JavaScript函数必须在一对双中括号内</td></tr><tr><td>splash.evaljs()方法</td><td>执行一段JavaScript代码，并返回最后一条语句的结果</td></tr><tr><td>splash.runjs()方法</td><td>仅执行JavaScript代码</td></tr><tr><td>splash.call_later()方法</td><td>设置并执行定时任务</td></tr><tr><td>splash.http_get()方法</td><td>发送HTTP GET请求并返回响应，而无需将结果加载到浏览器窗口</td></tr><tr><td>splash.http_post()方法</td><td>发送HTTP POST请求并返回响应，而无需将结果加载到浏览器窗口</td></tr><tr><td>splash.get_cookies()方法</td><td>获取当前页面的Cookies信息，结果以HAR Cookies格式返回</td></tr><tr><td>splash.add_cookies()方法</td><td>为当前页面添加Cookies信息</td></tr><tr><td>splash.clear_cookies()方法</td><td>清除所有的Cookies</td></tr></tbody></table><p>官方API文档参考：<a href="https://splash.readthedocs.io/en/stable/scripting-ref.html" target="_blank" rel="noopener">https://splash.readthedocs.io/en/stable/scripting-ref.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析数据的Beautiful Soup模块</title>
      <link href="/jie-xi-shu-ju-de-beautiful-soup-mo-kuai.html"/>
      <url>/jie-xi-shu-ju-de-beautiful-soup-mo-kuai.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Beautiful Soup是一个用于从HTML和XML文件中提取数据的Python模块。Beautiful Soup提供一些简单的函数用来处理导航、搜索、修改分析树等功能。Beautiful Soup模块中的查找提取功能非常强大，且非常便捷，可有效提高效率。</p><p>Beautiful Soup自动将输入文档转换为Unicode编码，输出文档转换为UTF-8编码。开发者不需要考虑编码方式，除非文档没有指定一个编码方式，这时，Beautiful Soup就不能自动识别编码方式了。此时，开发者仅仅需要说明一下原始编码方式即可。</p><h2 id="使用Beautiful-Soup解析数据"><a href="#使用Beautiful-Soup解析数据" class="headerlink" title="使用Beautiful Soup解析数据"></a>使用Beautiful Soup解析数据</h2><h3 id="Beautiful-Soup的安装"><a href="#Beautiful-Soup的安装" class="headerlink" title="Beautiful Soup的安装"></a>Beautiful Soup的安装</h3><p>目前推荐使用Beautiful Soup 4，这个模块目前已被移植到bs4中了。所以在导入时需要 <code>from bs4 import BeautifulSoup</code>，有以下三种安装方式：</p><ul><li><p>如果使用的是Debian或者Ubuntu Linux，则可以使用系统软件包管理器安装Beautiful Soup，安装命令为：<code>apt-get install python-bs4</code></p></li><li><p>Beautiful Soup 4 是通过PyPi发布的，可以通过easy_install或pip来安装它。包名是beautifulsoup4，它可以兼容python2和python3。安装命令为：<code>easy_install beautifulsoup4</code>或者<code>pip install beautifulsoup4</code></p></li></ul><blockquote><p>注：在使用Beautiful Soup 4之前，需要先通过命令<code>pip install bs4</code>进行bs4库的安装</p></blockquote><ul><li>如果当前的Beautiful Soup不是你想要的版本，可以通过下载源码的方式进行安装，源码的下载地址为<a href="https://www.crummy.com/software/BeautifulSoup/bs4/download/，然后再控制台中打开源码指定路径，输入`python" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/bs4/download/，然后再控制台中打开源码指定路径，输入`python</a> setup.py install`即可</li></ul><h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><p>Beautiful Soup支持Python标准库中包含的HTML解析器，但它也支持许多第三方Python解析器，其中包含lxml解析器。根据不同的操作系统，可以使用下述命令之一安装lxml：</p><ul><li>apt-get install python-lxml</li><li>easy_install lxml</li><li>pip install lxml</li></ul><p>另一个解析器是html5lib，它是一个用于解析HTML的Python库，按照web浏览器的方式解析HTML，可以使用下述命令之一安装html5lib：</p><ul><li>apt-get install python-html5lib</li><li>easy_install html5lib</li><li>pip install html5lib</li></ul><p>关于每个解析器的优缺点如下表：</p><table><thead><tr><th>解析器</th><th>用法</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Python标准库</td><td>BeautifulSoup(markup, “html.parser”)</td><td>Python标准库，执行速度适中</td><td>（在Pyton 2.7.3或3.2.2之前的版本中）文档容错能力差</td></tr><tr><td>lxml的HTML解析器</td><td>BeautifulSoup(markup, “lxml”)</td><td>速度快，文档容错能力强</td><td>需要安装C语言库</td></tr><tr><td>lxml的XML解析器</td><td>BeautifulSoup(markup, “lxml-xml”) 或者BeautifulSoup(markup, “xml”)</td><td>速度快， 唯一支持XML的解析器</td><td>需要安装C语言库</td></tr><tr><td>html5lib</td><td>BeautifulSoup(markup, “html5lib”)</td><td>最好的容错性，以浏览器的方式解析文档，生成HTML5格式的文档</td><td>速度慢，不依赖外部扩展</td></tr></tbody></table><h3 id="Beautiful-Soup的简单应用"><a href="#Beautiful-Soup的简单应用" class="headerlink" title="Beautiful Soup的简单应用"></a>Beautiful Soup的简单应用</h3><p>Beautiful Soup安装完成后，下面将介绍如何让通过Beautiful Soup库进行HTML的解析工作，具体实力步骤如下：</p><ul><li>导入bs4库，然后创建一个模拟HTML代码的字符串</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>第一个 HTML 页面&lt;/title>&lt;/head>&lt;body>&lt;p>body 元素的内容会显示在浏览器中。&lt;/p>&lt;p>title 元素的内容会显示在浏览器的标题栏中。&lt;/p>&lt;/body>&lt;/html>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建BeautifulSoup对象，并指定解析器为lxml，最后通过打印的方式将解析的HTML代码显示在控制台当中</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印解析的HTML代码</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 打印数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210919172135727.png" alt="image-20210919172135727"></p><blockquote><p>如果将html_doc字符串中的代码，保存在index.html文件中，可以通过打开HTML文件的方式进行代码的解析，并且可以通过prettify()方法进行代码的格式化处理，代码如下：</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建BeautifulSoup对象打开需要解析的HTML文件</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>open<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印格式化后的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="获取节点内容"><a href="#获取节点内容" class="headerlink" title="获取节点内容"></a>获取节点内容</h2><p>使用Beautiful Soup<code>可以直接调用节点的名称，然后再调用对应的string属性便可以获取到节点内的文本信息</code>。</p><h3 id="获取节点对应的代码"><a href="#获取节点对应的代码" class="headerlink" title="获取节点对应的代码"></a>获取节点对应的代码</h3><p><strong>使用Beautiful Soup模块获取节点对应的代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>第一个 HTML 页面&lt;/title>&lt;/head>&lt;body>&lt;p>body 元素的内容会显示在浏览器中。&lt;/p>&lt;p>title 元素的内容会显示在浏览器的标题栏中。&lt;/p>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head节点内容为：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 打印head节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'body节点内容为：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>body<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 打印body节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'title节点内容为：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 打印title节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'p节点内容为：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印p节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210919234624108.png" alt="image-20210919234624108"></p><blockquote><p>在打印p节点对应的代码时，可以发现<code>只打印了第一个p节点内容</code>，这说明当有<code>多个节点</code>时，该选择方式<code>只会获取第一个节点中的内容，其他后面的节点将被忽略</code></p></blockquote><p>除了通过指定节点名称的方式获取节点内容以外，还可以使用name属性获取节点的名称</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取节点名称</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>name<span class="token punctuation">)</span>               <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>name<span class="token punctuation">)</span>               <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取节点属性"><a href="#获取节点属性" class="headerlink" title="获取节点属性"></a>获取节点属性</h3><p>每个节点可能都会含有多个属性，例如，class或者id等。如果已经选择了一个指定的节点名称，那么只需要调用attrs即可获取这个节点下的所有属性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>横排响应式登录&lt;/title>    &lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"/>    &lt;meta name="viewport" content="width=device-width"/>    &lt;link href="font/css/bootstrap.min.css" type="text/css" rel="stylesheet">    &lt;link href="css/style.css" type="text/css" rel="stylesheet">&lt;/head>&lt;body>&lt;h3>登录&lt;/h3>&lt;div class="glyphicon glyphicon-envelope">&lt;input type="text" placeholder="请输入邮箱">&lt;/div>&lt;div class="glyphicon glyphicon-lock">&lt;input type="password" placeholder="请输入密码">&lt;/div>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'meta节点中属性如下：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'link节点中属性如下：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>link<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'div节点中属性如下：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210919235430428.png" alt="image-20210919235430428"></p><p>在以上的运行结果中可以发现，attrs的返回结果为字典类型，字典中的元素分别是属性名称与对应的值。所以在attrs后面添加<code>[]</code>括号并在括号内添加属性名称即可获取指定属性对应的值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'meta节点中http-equiv属性对应的值为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'http-equiv'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'link节点中href属性对应的值为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>link<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'div节点中class属性对应的值为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210919235844287.png" alt="image-20210919235844287"></p><p>在获取节点中指定属性所对应的值时，除了使用上面的方式以外，还可以不写attrs，直接在节点后面以中括号的形式直接添加属性名称来获取对应的值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'meta节点中http-equiv属性对应的值为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'http-equiv'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'link节点中href属性对应的值为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>link<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'div节点中class属性对应的值为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>div<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="获取节点包含的文本内容"><a href="#获取节点包含的文本内容" class="headerlink" title="获取节点包含的文本内容"></a>获取节点包含的文本内容</h3><p>获取节点包含的文本内容只需要在节点名称后面添加string属性即可</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'title节点所包含的文本内容为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'h3节点所包含的文本内容为：：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>h3<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="嵌套获取节点内容"><a href="#嵌套获取节点内容" class="headerlink" title="嵌套获取节点内容"></a>嵌套获取节点内容</h3><p>HTML代码中每个节点都会出现嵌套的可能，而使用Beautiful Soup获取每个节点的内容时，可以通过<code>“.”</code>直接获取下一个节点中的内容（当前节点的子节点）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>横排响应式登录&lt;/title>    &lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"/>    &lt;meta name="viewport" content="width=device-width"/>    &lt;link href="font/css/bootstrap.min.css" type="text/css" rel="stylesheet">    &lt;link href="css/style.css" type="text/css" rel="stylesheet">&lt;/head>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head节点内容如下：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head节点数据类型为：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head节点中title节点内容如下：\n'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head节点中title节点数据类型为：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head节点中title节点中的文本内容为：'</span><span class="token punctuation">,</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'head节点中title节点中文本内容的数据类型为：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920211803647.png" alt="image-20210920211803647"></p><blockquote><p>在获取head与其内部的title节点内容时数据类型均为“&lt;class ‘bs4.element.Tag’&gt;”，也就说明在Tag类型的基础上可以获取当前节点的子节点内容，这样的获取方式可以叫作嵌套获取节点内容</p></blockquote><h3 id="关联获取"><a href="#关联获取" class="headerlink" title="关联获取"></a>关联获取</h3><p>在获取节点时，不一定都能做到一步获取到指定节点内容中的内容，有时还需要先确认某一个节点，然后以该节点为中心获取对应的子节点、孙节点、父节点以及兄弟节点</p><h4 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h4><p>在获取某节点下面的所有子节点时，可以使用contents或者是children属性来实现，其中</p><ul><li>contents返回的是一个列表，在这个列表中的每个元素都是一个子节点内容</li><li>children返回的则是一个“list_iterator”类型的可迭代对象</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>contents<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 列表形式打印head下所有子节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>children<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 可迭代对象形式打印head下所有子节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920212516131.png" alt="image-20210920212516131"></p><p>通过head.contents所获取的所有子节点中有三个换行符\n以及两个子标题（title与meta）对应的所有内容。head.children所获取的则是一个“list_iterator”可迭代对象，如果需要获取该对象中的所有内容可以直接将其转换为list类型或者通过for循环遍历的方式进行获取。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印将可迭代对象转换为列表形式的所有子节点</span><span class="token keyword">for</span> i <span class="token keyword">in</span> soup<span class="token punctuation">.</span>head<span class="token punctuation">.</span>children<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 循环遍历可迭代对象中的所有子节点</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 打印子节点内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920215229583.png" alt="image-20210920215229583"></p><h4 id="获取孙节点"><a href="#获取孙节点" class="headerlink" title="获取孙节点"></a>获取孙节点</h4><p>在获取某节点下面所有的子孙节点时，可以使用<code>descendants属性</code>来实现，该属性会返回一个generator对象，获取该对象中的所有内容时，同样可以直接将其转换为list类型或者通过for循环遍历的方式进行获取。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>…此处省略…&lt;body>&lt;div id="test1">    &lt;div id="test2">        &lt;ul>            &lt;li class="test3" value = "user1234">                此处为演示信息            &lt;/li>        &lt;/ul>    &lt;/div>&lt;/div>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>descendants<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 打印body节点下所有子孙节点内容的generator对象</span><span class="token keyword">for</span> i <span class="token keyword">in</span> soup<span class="token punctuation">.</span>body<span class="token punctuation">.</span>descendants<span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 循环遍历generator对象中的所有子孙节点</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印子孙节点内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920220403223.png" alt="image-20210920220403223"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920220417127.png" alt="image-20210920220417127"></p><h4 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h4><p>获取父节点有两种方式：</p><ul><li>通过<code>parent属性</code>直接获取指定节点的父节点内容</li><li>通过<code>parents属性</code>获取指定节点的父节点及以上（祖先节点）内容</li></ul><p>只是parents属性会返回一个generator对象，获取该对象中的所有内容时，同样可以直接将其转换为list类型或通过for循环遍历的方式进行获取</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 打印title节点的父节点内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parents<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 打印title节点的父节点及以上内容的generator对象</span><span class="token keyword">for</span> i <span class="token keyword">in</span> soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>parents<span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 循环遍历generator对象中的所有父节点及以上内容</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>name<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 打印父节点及祖先节点名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920224625536.png" alt="image-20210920224625536"></p><h4 id="获取兄弟节点"><a href="#获取兄弟节点" class="headerlink" title="获取兄弟节点"></a>获取兄弟节点</h4><p>兄弟节点也就是同级节点，表示在同一级节点内的所有子节点间的关系。如，在一段HTML代码中获取第一个p节点的<code>下一个</code>div兄弟节点时可以使用<code>next_sibling属性</code>，如果想获取当前div节点的<code>上一个</code>兄弟节点p时可以使用<code>previous_sibling属性</code>。通过这两个属性获取兄弟节点时，如果两个节点之间含有换行符（\n）、空字符或者是其他文本内容时，将返回这些文本节点</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;body>&lt;p class="p-1" value = "1">&lt;a href="https://item.jd.com/12353915.html">零基础学Python&lt;/a>&lt;/p>第一个p节点下文本&lt;div class="div-1" value = "2">&lt;a href="https://item.jd.com/12451724.html">Python从入门到项目实践&lt;/a>&lt;/div>&lt;p class="p-3" value = "3">&lt;a href="https://item.jd.com/12512461.html">Python项目开发案例集锦&lt;/a>&lt;/p>&lt;div class="div-2" value = "4">&lt;a href="https://item.jd.com/12550531.html">Python编程锦囊&lt;/a>&lt;/div>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 打印第一个p节点下一个兄弟节点（文本节点内容）</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 以列表形式打印文本节点中的所有元素</span>div <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling<span class="token punctuation">.</span>next_sibling  <span class="token comment" spellcheck="true"># 获取p节点同级的第一个div节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 打印第一个div节点内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span>previous_sibling<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 打印第一个div节点上一个兄弟节点（文本节点内容）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920230440104.png" alt="image-20210920230440104"></p><ul><li>如果想要获取当前节点后面的所有兄弟节点时，可以使用next_siblings属性。</li><li>如果想要获取当前节点前面的所有兄弟节点时，可以使用previous_siblings属性。</li><li>通过这两个属性所获取的节点都将以generator（可迭代对象）的形式返回。</li></ul><p>在获取节点内容时，同时可以直接将其转换为list类型或者通过for循环遍历的方式进行获取</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取p节点后面的所有兄弟节点如下：'</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取p节点前面的所有兄弟节点如下：'</span><span class="token punctuation">,</span>list<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>previous_siblings<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920232219648.png" alt="image-20210920232219648"></p><h2 id="使用find-方法获取内容"><a href="#使用find-方法获取内容" class="headerlink" title="使用find()方法获取内容"></a>使用find()方法获取内容</h2><p>在HTML代码中获取比较复杂的内容时，可以使用find_all()方法与find()方法。调用这些方法，然后传入指定的参数即可灵活的获取节点中内容。</p><h3 id="find-all-—-获取所有符合条件的内容"><a href="#find-all-—-获取所有符合条件的内容" class="headerlink" title="find_all()—-获取所有符合条件的内容"></a>find_all()—-获取所有符合条件的内容</h3><p>Beautigul Soup提供了一个find_all()方法，该方法可以获取所有符合条件的内容。语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">find_all<span class="token punctuation">(</span>name<span class="token operator">=</span>None<span class="token punctuation">,</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>text<span class="token operator">=</span>None<span class="token punctuation">,</span>limit<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在find_all()方法中，常用参数分别是name、attrs以及text，下面将具体介绍：</p><h4 id="name参数"><a href="#name参数" class="headerlink" title="name参数"></a>name参数</h4><p>name参数用来指定节点名称，指定该参数以后将返回一个可迭代对象，所有符合条件的内容均为对象中的一个元素。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;body>&lt;p class="p-1" value = "1">&lt;a href="https://item.jd.com/12353915.html">零基础学Python&lt;/a>&lt;/p>&lt;p class="p-2" value = "2">&lt;a href="https://item.jd.com/12451724.html">Python从入门到项目实践&lt;/a>&lt;/p>&lt;p class="p-3" value = "3">&lt;a href="https://item.jd.com/12512461.html">Python项目开发案例集锦&lt;/a>&lt;/p>&lt;div class="div-2" value = "4">&lt;a href="https://item.jd.com/12550531.html">Python编程锦囊&lt;/a>&lt;/div>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 打印名称为p的所有节点内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打印数据类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920234756311.png" alt="image-20210920234756311"></p><blockquote><p>bs4.element.ResultSet类型的数据与Python中的列表类似，如果想获取可迭代对象中的某条数据可以使用<code>切片</code>方式进行，如获取所有p节点中的第一个参数可参考以下代码：</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为bs4.element.ResultSet类型的数据中的每一个元素都是bs4.element.Tag类型，所以可以直接对某一个元素进行嵌套获取，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印第一个p节点内的子节点a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920235302075.png" alt="image-20210920235302075"></p><h4 id="attrs参数"><a href="#attrs参数" class="headerlink" title="attrs参数"></a>attrs参数</h4><p>attrs参数表示通过指定属性进行数据的获取工作，在填写attrs参数时，默认情况下需要填写字典类型的参数值，但也可以通过赋值的方式填写参数值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;body>&lt;p class="p-1" value = "1">&lt;a href="https://item.jd.com/12353915.html">零基础学Python&lt;/a>&lt;/p>&lt;p class="p-1" value = "2">&lt;a href="https://item.jd.com/12451724.html">Python从入门到项目实践&lt;/a>&lt;/p>&lt;p class="p-3" value = "3">&lt;a href="https://item.jd.com/12512461.html">Python项目开发案例集锦&lt;/a>&lt;/p>&lt;div class="div-2" value = "4">&lt;a href="https://item.jd.com/12550531.html">Python编程锦囊&lt;/a>&lt;/div>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字典参数结果如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 打印value值为1的所有内容，字典参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'赋值参数结果如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'p-1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 打印class为p-1的所有内容，赋值参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印value值为3的所有内容，赋值参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920235441912.png" alt="image-20210920235441912"></p><h4 id="text参数"><a href="#text参数" class="headerlink" title="text参数"></a>text参数</h4><p>指定text参数可以获取节点中的文本，该参数可以指定字符串或者正则表达式对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token keyword">import</span> re                      <span class="token comment" spellcheck="true"># 导入正则表达式模块</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;body>&lt;p class="p-1" value = "1">&lt;a href="https://item.jd.com/12353915.html">零基础学Python&lt;/a>&lt;/p>&lt;p class="p-1" value = "2">&lt;a href="https://item.jd.com/12451724.html">Python从入门到项目实践&lt;/a>&lt;/p>&lt;p class="p-3" value = "3">&lt;a href="https://item.jd.com/12512461.html">Python项目开发案例集锦&lt;/a>&lt;/p>&lt;div class="div-2" value = "4">&lt;a href="https://item.jd.com/12550531.html">Python编程锦囊&lt;/a>&lt;/div>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定字符串所获取的内容如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">'零基础学Python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 打印指定字符串所获取的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定正则表达式对象所获取的内容如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印指定正则表达式对象所获取的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920235557702.png" alt="image-20210920235557702"></p><h3 id="find-—-获取第一个匹配的节点内容"><a href="#find-—-获取第一个匹配的节点内容" class="headerlink" title="find()—-获取第一个匹配的节点内容"></a>find()—-获取第一个匹配的节点内容</h3><p><code>find_all()方法</code>可以获取<code>所有</code>符合条件的节点内容，而<code>find()方法</code>只能获取<code>第一个</code>匹配的节点内容</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token keyword">import</span> re                      <span class="token comment" spellcheck="true"># 导入正则表达式模块</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;body>&lt;p class="p-1" value = "1">&lt;a href="https://item.jd.com/12353915.html">零基础学Python&lt;/a>&lt;/p>&lt;p class="p-1" value = "2">&lt;a href="https://item.jd.com/12451724.html">Python从入门到项目实践&lt;/a>&lt;/p>&lt;p class="p-3" value = "3">&lt;a href="https://item.jd.com/12512461.html">Python项目开发案例集锦&lt;/a>&lt;/p>&lt;div class="div-2" value = "4">&lt;a href="https://item.jd.com/12550531.html">Python编程锦囊&lt;/a>&lt;/div>&lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印第一个name为p的节点内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'p-3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 打印第一个class为p-3的节点内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'value'</span><span class="token punctuation">:</span><span class="token string">'4'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 打印第一个value为4的节点内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>text<span class="token operator">=</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印第一个文本中包含Python的文本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210920235743745.png" alt="image-20210920235743745"></p><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><p>Beautiful Soup模块还提供了多个其他方法，这些方法与find_all()和find()方法相同，只是查询范围不同，具体如下表：</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>find_parent()</td><td>获取父节点内容</td></tr><tr><td>find_parents()</td><td>获取所有祖先节点内容</td></tr><tr><td>find_next_sibling()</td><td>获取后面第一个兄弟节点内容</td></tr><tr><td>find_next_siblings()</td><td>获取后面所有兄弟节点内容</td></tr><tr><td>find_previous_sibling()</td><td>获取前面第一个兄弟节点内容</td></tr><tr><td>find_previous_siblings()</td><td>获取前面所有兄弟节点内容</td></tr><tr><td>find_next()</td><td>获取当前节点的下一个第一个符合条件的节点内容</td></tr><tr><td>find_all_next()</td><td>获取当前节点的下一个所有符合条件的节点内容</td></tr><tr><td>find_previous()</td><td>获取第一个符合条件的节点内容</td></tr><tr><td>find_all_previous()</td><td>获取所有符合条件的节点内容</td></tr></tbody></table><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>Beautiful Soup模块还提供了CSS选择器来获取节点内容，如果是Tag或者是BeautifulSoup对象都可以直接调用select()方法，然后填写指定参数即可通过CSS选择器获取到节点中的内容。如果对CSS选择器不是很熟悉，可以参考“<a href="https://www.w3school.com.cn/cssref/css_selectors.asp”CSS选择器参考手册。" target="_blank" rel="noopener">https://www.w3school.com.cn/cssref/css_selectors.asp”CSS选择器参考手册。</a></p><p>在使用CSS选择器获取节点内容时，首先需要调用select()方法，然后为其指定字符串类型的CSS选择器，常见的CSS选择器如下：</p><ul><li>直接填写字符串类型的节点名称</li><li>class：表示指定class属性值</li><li>#id：表示指定id属性的值</li></ul><p>使用CSS选择器调用select()方法获取节点内容示例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup  <span class="token comment" spellcheck="true"># 导入BeautifulSoup库</span><span class="token comment" spellcheck="true"># 创建模拟HTML代码的字符串</span>html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>关联获取演示&lt;/title>    &lt;meta charset="utf-8"/>&lt;/head>&lt;body>    &lt;div class="test_1" id="class_1">         &lt;p class="p-1" value = "1">&lt;a href="https://item.jd.com/12353915.html">零基础学Python&lt;/a>&lt;/p>        &lt;p class="p-2" value = "2">&lt;a href="https://item.jd.com/12451724.html">Python从入门到项目实践&lt;/a>&lt;/p>        &lt;p class="p-3" value = "3">&lt;a href="https://item.jd.com/12512461.html">Python项目开发案例集锦&lt;/a>&lt;/p>        &lt;p class="p-4" value = "4">&lt;a href="https://item.jd.com/12550531.html">Python编程锦囊&lt;/a>&lt;/p>    &lt;/div>    &lt;div class="test_2" id="class_2">        &lt;p class="p-5">&lt;a href="https://item.jd.com/12185501.html">零基础学Java（全彩版）&lt;/a>&lt;/p>        &lt;p class="p-6">&lt;a href="https://item.jd.com/12199033.html">零基础学Android（全彩版）&lt;/a>&lt;/p>        &lt;p class="p-7">&lt;a href="https://item.jd.com/12250414.html">零基础学C语言（全彩版）&lt;/a>&lt;/p>    &lt;/div>    &lt;/body>&lt;/html>"""</span><span class="token comment" spellcheck="true"># 创建一个BeautifulSoup对象，获取页面正文</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有p节点内容如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 打印所有p节点内容</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有p节点中的第二个p节点内容如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 打印所有p节点中的第二个p节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逐层获取的title节点如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'html head title'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印逐层获取的title节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类名为test_2所对应的节点如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.test_2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 打印类名为test_2所对应的节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'id值为class_1所对应的节点如下：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#class_1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         # 打印id值为class_1所对应的节点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210921000656315.png" alt="image-20210921000656315"></p><p>select()方法除了以上基本使用方法以外，还可以实现嵌套获取、获取属性值以及获取文本等，这里以下述代码为实例介绍获取节点内容的其他方法：</p><pre class="line-numbers language-python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>    &lt;title>横排响应式登录&lt;/title>    &lt;meta http-equiv="Content-Type" content="text/html" charset="utf-8"/>    &lt;meta name="viewport" content="width=device-width"/>    &lt;link href="font/css/bootstrap.min.css" type="text/css" rel="stylesheet">    &lt;link href="css/style.css" type="text/css" rel="stylesheet">&lt;/head>&lt;/html>"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>获取节点内容方式</th><th>描述</th></tr></thead><tbody><tr><td>soup.select(‘div[class=”test_1”]’)[0].select(‘p’)[0]</td><td>嵌套获取class名为test_1对应的div中所有p节点中的第一个</td></tr><tr><td>soup.select(‘p’)[0][‘value’]    ;    soup.select(‘p’)[0].attrs[‘value’]</td><td>获取所有p节点中第一个节点内value属性对应的值（两种方式）</td></tr><tr><td>soup.select(‘p’)[0].get_text()    ;    soup.select(‘p’)[0].string</td><td>获取所有p节点中第一个节点内的文本（两种方式）</td></tr><tr><td>soup.select(‘p’)[1:]</td><td>获取所有p节点中第二个以后的p节点</td></tr><tr><td>soup.select(‘.p-1,.p-5’)</td><td>获取class名为p-1与p-5对应的节点</td></tr><tr><td>soup.select(‘a[href]’)</td><td>获取存在href属性的所有a节点</td></tr><tr><td>soup.select(‘p[value=”1”]’)</td><td>获取所有属性值为value=“1”的p节点</td></tr></tbody></table><blockquote><p>Beautiful Soup模块还提供了一个select_one()方法，用于获取所有符合条件节点中的第一个节点，例如soup.select_one(‘a’)将获取所有a节点中的第一个a节点内容</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XPath解析</title>
      <link href="/xpath-jie-xi.html"/>
      <url>/xpath-jie-xi.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XPath定位网页中的数据，将会更加简单有效。</p><p>XPath是XML路径语言，全名为“XML Path Language”，是一门可以在XML文件中查找信息的语言。该语言不仅可以实现XML文件的搜索，还可以再HTML文件中进行搜索。所以在爬虫中可以使用XPath在HTML文件或代码中进行可用信息的抓取。</p><p>XPath不仅提供了简洁明了的路径表达式，还提供了100多个函数，可用于字符串、数值、时间比较、序列处理、逻辑值等。XPath与1999年11月16日成为W3C标准，被设计为供XSLT、XPointer以及其他XML解析软件使用，XPath使用路径表达式在XML或HTML中选取节点，最常用路径表达式如下：</p><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>选取此节点的所有子节点</td></tr><tr><td>/</td><td>从当前节点选取子节点</td></tr><tr><td>//</td><td>从当前节点选取子孙节点</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>..</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr><tr><td>*</td><td>选取所有节点</td></tr></tbody></table><p>XPath官方文档：<a href="https://www.w3.org/TR/xpath/all/" target="_blank" rel="noopener">https://www.w3.org/TR/xpath/all/</a></p><h2 id="XPath的解析操作"><a href="#XPath的解析操作" class="headerlink" title="XPath的解析操作"></a>XPath的解析操作</h2><p>python中存在很多支持XPath提取数据的解析模块，这里主要介绍<code>lxml模块</code>，该模块可以解析HTML和XML，并且支持XPath解析方式。因为lxml模块底层是通过C语言所编写的，所以解析效率高。</p><p>lxml模块安装命令：</p><pre><code>pip install lxml</code></pre><h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><h4 id="parse-方法"><a href="#parse-方法" class="headerlink" title="parse()方法"></a>parse()方法</h4><p>parse()方法主要用于实现解析本地的HTML文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span>parser<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTMLParser<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建HTMLParser对象</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'demo.html'</span><span class="token punctuation">,</span>parser<span class="token operator">=</span>parser<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析demo.html文件</span>html_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>html_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印解码后的HTML代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附：上述代码中demo.html代码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"></span><span class="token comment" spellcheck="true">&lt;!-- saved from url=(0038)http://sck.rjkflm.com:666/spider/auth/ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>标题文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./demo_files/logo1.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>hello 明日科技 ~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918112706493.png" alt="image-20210918112706493"></p><h4 id="HTML-方法"><a href="#HTML-方法" class="headerlink" title="HTML()方法"></a>HTML()方法</h4><p><strong>解析字符串类型的HTML代码</strong></p><p>etree子模块还提供了HTML()方法，该方法可以实现解析字符串类型的HTML代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''             &lt;title>标题文档&lt;/title>&lt;/head>&lt;body>&lt;img src="./demo_files/logo1.png" />&lt;br />hello 明日科技 ~&lt;/body>&lt;/html>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span>html_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>html_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印解码后的HTML代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918113002847.png" alt="image-20210918113002847"></p><hr><p><strong>解析服务器返回的HTML代码</strong></p><p>在实际开发中，HTML()方法的使用率是非常高的，因为发送网络请求后，多数情况下都会将返回的响应结果转换为字符串类型，如果返回的结果是HTML代码，则需要使用HTML()方法来进行解析。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token keyword">import</span> requests          <span class="token comment" spellcheck="true"># 导入requests模块</span><span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth  <span class="token comment" spellcheck="true"># 导入HTTPBasicAuth类</span><span class="token comment" spellcheck="true"># 定义请求地址</span>url <span class="token operator">=</span> <span class="token string">'http://sck.rjkflm.com:666/spider/auth/'</span>ah <span class="token operator">=</span> HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 创建HTTPBasicAuth对象，参数为用户名与密码</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>auth<span class="token operator">=</span>ah<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果请求成功</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span>    html_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印解码后的HTML代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918113254169.png" alt="image-20210918113254169"></p><blockquote><p>上图中的<code>“&amp;#13;”</code>表示Unicode编码的回车字符</p></blockquote><h3 id="获取所有节点"><a href="#获取所有节点" class="headerlink" title="获取所有节点"></a>获取所有节点</h3><p>在获取HTML代码中的所有节点时，可以使用“//*”的方式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="level_one on">&lt;ul>&lt;li> &lt;a href="/index/index/view/id/1.html" title="什么是Java" class="on">什么是Java&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java的版本">Java的版本&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java API文档">Java API文档&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="JDK的下载">JDK的下载&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="JDK的安装">JDK的安装&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="配置JDK">配置JDK&lt;/a> &lt;/li>&lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span>node_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取所有节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据类型：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>node_all<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 打印数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据长度：'</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>node_all<span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 打印数据长度</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据内容：'</span><span class="token punctuation">,</span>node_all<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 打印数据内容</span><span class="token comment" spellcheck="true"># 通过推导式打印所有节点名称，通过节点对象.tag获取节点名称</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> node_all<span class="token punctuation">]</span><span class="token punctuation">)</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串，html字符串为上一示例的html字符串</span>li_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取所有li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有li节点'</span><span class="token punctuation">,</span>li_all<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印所有li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定li节点：'</span><span class="token punctuation">,</span>li_all<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印指定li节点</span>li_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>li_all<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span><span class="token comment" spellcheck="true"># 打印指定节点的HTML代码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定节点HTML代码：'</span><span class="token punctuation">,</span>li_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918113548555.png" alt="image-20210918113548555"></p><p>如果需要获取HTML代码中所指定名称的节点，可以在“//”后面添加节点的名称。以获取所有“li”节点为例</p><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析HTML字符串，HTML字符串为上一示例的HTML字符串</span>li_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取所有li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有li节点'</span><span class="token punctuation">,</span>li_all<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印所有li节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定li节点：'</span><span class="token punctuation">,</span>li_all<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印指定li节点</span>li_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>li_all<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span><span class="token comment" spellcheck="true"># 打印指定节点的HTML代码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定节点HTML代码：'</span><span class="token punctuation">,</span>li_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918114058878.png" alt="image-20210918114058878"></p><h3 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h3><p><strong>使用“/”获取一个节点中的直接子节点</strong></p><p>如果需要获取一个节点中的直接子节点可以使用“/”，例如获取li节点中所有子节点a，可以使用<code>“//li/a”</code>的方法进行获取</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="level_one on">&lt;ul>&lt;li>    &lt;a href="/index/index/view/id/1.html" title="什么是Java" class="on">什么是Java&lt;/a>    &lt;a>Java&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java的版本">Java的版本&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java API文档">Java API文档&lt;/a> &lt;/li>&lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span>a_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li/a'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取li节点中所有子节点a</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有子节点a'</span><span class="token punctuation">,</span>a_all<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印所有a节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定a节点：'</span><span class="token punctuation">,</span>a_all<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印指定a节点</span>a_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>a_all<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span><span class="token comment" spellcheck="true"># 打印指定节点的HTML代码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定节点HTML代码：'</span><span class="token punctuation">,</span>a_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918140016949.png" alt="image-20210918140016949"></p><hr><p><strong>使用“//”实现获取子孙节点</strong></p><p>“//”可以用来获取直接的子节点，如果需要获取子孙节点时，就可以使用“//”来实现。以获取ul节点中所有子孙节点a为例。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="level_one on">&lt;ul>&lt;li>    &lt;a href="/index/index/view/id/1.html" title="什么是Java" class="on">什么是Java&lt;/a>    &lt;a>Java&lt;/a> &lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java的版本">Java的版本&lt;/a> &lt;/li>&lt;li>     &lt;a href="javascript:" onclick="login(0)" title="Java API文档">        &lt;a>a节点中的a节点&lt;/a>    &lt;/a>&lt;/li>&lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span>a_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul//a'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取ul节点中所有子孙节点a</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有子节点a'</span><span class="token punctuation">,</span>a_all<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印所有a节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定a节点：'</span><span class="token punctuation">,</span>a_all<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印指定a节点</span>a_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>a_all<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span><span class="token comment" spellcheck="true"># 打印指定节点的HTML代码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定节点HTML代码：'</span><span class="token punctuation">,</span>a_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918140250950.png" alt="image-20210918140250950"></p><blockquote><p>在获取ul子孙节点时如果使用“//ul/a”的方式获取，是无法匹配到任何结果的。因为“/”用来获取直接字节点，ul的直接子节点为li，并没有a节点，所以无法匹配</p></blockquote><h3 id="获取父节点"><a href="#获取父节点" class="headerlink" title="获取父节点"></a>获取父节点</h3><p>在获取一个节点的父节点时，可以使用“..”来实现，以获取所有a节点的父节点为例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="level_one on">&lt;ul>&lt;li>&lt;a href="/index/index/view/id/1.html" title="什么是Java" class="on">什么是Java&lt;/a>&lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java的版本">Java的版本&lt;/a> &lt;/li>&lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span>a_all_parent <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/..'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取所有a节点的父节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有a的父节点'</span><span class="token punctuation">,</span>a_all_parent<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印所有a的父节点</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定a的父节点：'</span><span class="token punctuation">,</span>a_all_parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印指定a的父节点</span>a_txt <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>a_all_parent<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 转换字符串类型,并进行编码</span><span class="token comment" spellcheck="true"># 打印指定节点的HTML代码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取指定节点HTML代码：\n'</span><span class="token punctuation">,</span>a_txt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918140707138.png" alt="image-20210918140707138"></p><blockquote><p>除了使用“..”获取一个节点的父节点以外，还可以使用<code>“/parent::*”</code>的方式来获取</p></blockquote><h3 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h3><p>使用XPath获取HTML代码中的文本时，可以使用text()方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="level_one on">&lt;ul>&lt;li>&lt;a href="/index/index/view/id/1.html" title="什么是Java" class="on">什么是Java&lt;/a>&lt;/li>&lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java的版本">Java的版本&lt;/a> &lt;/li>&lt;/ul>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span>a_text <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a/text()'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取所有a节点中的文本信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有a节点中文本信息：'</span><span class="token punctuation">,</span>a_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918141215651.png" alt="image-20210918141215651"></p><h3 id="属性匹配"><a href="#属性匹配" class="headerlink" title="属性匹配"></a>属性匹配</h3><h4 id="属性匹配-1"><a href="#属性匹配-1" class="headerlink" title="属性匹配"></a>属性匹配</h4><p>如果需要更精准地获取某个节点的内容，可以使用<code>“[@...]”</code>实现节点属性匹配，其中“…”表示属性匹配的条件。例如，获取所有class=“level”中的所有div节点</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="video_scroll">    &lt;div class="level">什么是Java&lt;/div>    &lt;div class="level">Java的版本&lt;/div>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取所有class="level"的div节点中的文本信息</span>div_one <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="level"]/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>div_one<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打印class="level"的div中文本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918141624877.png" alt="image-20210918141624877"></p><blockquote><p>使用<code>“[@...]”</code>实现属性匹配时，不仅可以用于class属性的匹配，还可以用于id、href等属性的匹配。</p></blockquote><h4 id="属性多值匹配"><a href="#属性多值匹配" class="headerlink" title="属性多值匹配"></a>属性多值匹配</h4><p>如果某个节点的某个属性出现了多个值时，可以将所有值作为匹配条件，进行节点的筛选</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="video_scroll">    &lt;div class="level one">什么是Java&lt;/div>    &lt;div class="level">Java的版本&lt;/div>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取所有class="level one"的div节点中的文本信息</span>div_one <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="level one"]/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>div_one<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打印class="level one"的div中文本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918142312540.png" alt="image-20210918142312540"></p><p>如果需要即获取class=”level one”又获取class=”level”的div节点时，可以使用contains()方法，该方法中有两个参数，第一个参数用于指定属性名称，第二个参数用于指定属性值，如果HTML代码中包含指定的属性值，就可以匹配成功</p><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取所有class属性值中包含level的div节点中的文本信息</span>div_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"level")]/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>div_all<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打印所有符合条件的文本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918142546097.png" alt="image-20210918142546097"></p><h4 id="多属性匹配"><a href="#多属性匹配" class="headerlink" title="多属性匹配"></a>多属性匹配</h4><p>通过属性匹配HTML代码的节点时，还会遇到一种情况：那就是<code>一个节点中出现多个属性</code>，这时就<code>需要同时匹配多个属性，才可以更精确地获取指定节点中的数据</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="video_scroll">    &lt;div class="level" id="one">什么是Java&lt;/div>    &lt;div class="level">Java的版本&lt;/div>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取所有符合class="level与id="one"的div节点中的文本信息</span>div_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="level" and @id="one"]/text()'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>div_all<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 打印所有符合条件的文本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918142833024.png" alt="image-20210918142833024"></p><blockquote><p>上述代码中使用了and运算符，该运算符表示“与”</p></blockquote><p>XPath提供了很多运算符：</p><table><thead><tr><th>运算符</th><th>例子</th><th>返回值</th></tr></thead><tbody><tr><td>+（加法）</td><td>5 + 5</td><td>返回 10.0</td></tr><tr><td>-（减法）</td><td>8 - 6</td><td>返回 2.0</td></tr><tr><td>*（乘法）</td><td>4 * 6</td><td>返回 24.0</td></tr><tr><td>div（除法）</td><td>24 div 6</td><td>返回 4.0</td></tr><tr><td>=（等于）</td><td>price = 38.0</td><td>如果price是38.0，则返回true，否则返回false</td></tr><tr><td>！=（不等于）</td><td>price != 38.0</td><td>如果price不是38.0，则返回true，否则返回false</td></tr><tr><td>&lt;（小于）</td><td>price &lt; 38.0</td><td>如果price小于38.0，则返回true，否则返回false</td></tr><tr><td>&lt;=（小于等于）</td><td>price &lt;= 38.0</td><td>如果price小于或等于38.0，则返回true，否则返回false</td></tr><tr><td>&gt;（大于）</td><td>price &gt; 38.0</td><td>如果price大于38.0，则返回true，否则返回false</td></tr><tr><td>&gt;=（大于等于）</td><td>price &gt;= 38.0</td><td>如果price大于或等于38.0，则返回true，否则返回false</td></tr><tr><td>or（或）</td><td>price = 38.0 or price = 39.0</td><td>如果price等于38.0或者39.0，则返回true，否则返回false</td></tr><tr><td>and（与）</td><td>price &gt; 38.0 and price &lt; 39.0</td><td>如果price大于38.0且小于39.0，则返回true，否则返回false</td></tr><tr><td>mod（求余）</td><td>6 mod 4</td><td>返回 2.0</td></tr><tr><td>|（计算两个节点集）</td><td>//div|//a</td><td>返回所有div和a的节点集</td></tr></tbody></table><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><p>“@”不仅可以实现通过属性匹配节点，还可以直接获取属性所对应的值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="video_scroll">    &lt;li class="level" id="one">什么是Java&lt;/li>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取li节点中的class属性值</span>li_class <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li/@class'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取li节点中的id属性值</span>li_id <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li/@id'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'class属性值：'</span><span class="token punctuation">,</span>li_class<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'id属性值：'</span><span class="token punctuation">,</span>li_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918144114185.png" alt="image-20210918144114185"></p><h3 id="按序获取属性值"><a href="#按序获取属性值" class="headerlink" title="按序获取属性值"></a>按序获取属性值</h3><p>如果同时匹配了多个节点，但只需要其中的某一个节点时，可以使用<code>指定索引的方式</code>获取对应的节点内容，</p><p><strong><code>不过XPath中的索引是从1开始的，需要注意不要与Python中的列表索引混淆</code></strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="video_scroll">    &lt;li> &lt;a href="javascript:" onclick="login(0)" title="Java API文档">Java API文档&lt;/a> &lt;/li>    &lt;li> &lt;a href="javascript:" onclick="login(0)" title="JDK的下载">JDK的下载&lt;/a> &lt;/li>    &lt;li> &lt;a href="javascript:" onclick="login(0)" title="JDK的安装">JDK的安装&lt;/a> &lt;/li>    &lt;li> &lt;a href="javascript:" onclick="login(0)" title="配置JDK">配置JDK&lt;/a> &lt;/li>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取所有li/a节点中title属性值</span>li_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li/a/@title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有属性值：'</span><span class="token punctuation">,</span>li_all<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取第1个li/a节点中title属性值</span>li_first <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li[1]/a/@title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一个属性值：'</span><span class="token punctuation">,</span>li_first<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取第4个li/a节点中title属性值</span>li_four <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li[4]/a/@title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第四个属性值：'</span><span class="token punctuation">,</span>li_four<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918144417594.png" alt="image-20210918144417594"></p><p>除了使用固定的索引来获取指定节点中的内容外，还可以使用XPath中提供的函数来获取指定节点中的内容</p><pre class="line-numbers language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取最后一个li/a节点中title属性值</span>li_last <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li[last()]/a/@title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最后一个属性值：'</span><span class="token punctuation">,</span>li_last<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取第1个li/a节点中title属性值</span>li <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li[position()=1]/a/@title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第一个位置的属性值：'</span><span class="token punctuation">,</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取倒数第二个li/a节点中title属性值</span>li <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li[last()-1]/a/@title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'倒数第二个位置的属性值：'</span><span class="token punctuation">,</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取位置大于1的li/a节点中title属性值</span>li <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/li[position()>1]/a/@title'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'位置大于1的属性值：'</span><span class="token punctuation">,</span>li<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918144549814.png" alt="image-20210918144549814"></p><h3 id="使用节点轴获取节点内容"><a href="#使用节点轴获取节点内容" class="headerlink" title="使用节点轴获取节点内容"></a>使用节点轴获取节点内容</h3><p>XPath还提供了一些节点轴的匹配方法，例如，获取祖先节点、子孙节点、兄弟节点等</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token comment" spellcheck="true"># 定义html字符串</span>html_str <span class="token operator">=</span> <span class="token triple-quoted-string string">'''&lt;div class="video_scroll">    &lt;li>&lt;a href="javascript:" onclick="login(0)" title="Java API文档">Java API文档&lt;/a>&lt;/li>     &lt;li>&lt;a href="javascript:" onclick="login(0)" title="JDK的下载">JDK的下载&lt;/a>&lt;/li>     &lt;li> &lt;a href="javascript:" onclick="login(0)" title="JDK的安装">JDK的安装&lt;/a> &lt;/li>&lt;/div>'''</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html_str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解析html字符串</span><span class="token comment" spellcheck="true"># 获取li[2]所有祖先节点</span>ancestors <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[2]/ancestor::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li[2]所有祖先节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> ancestors<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取li[2]祖先节点位置为body</span>body <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[2]/ancestor::body'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li[2]指定祖先节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> body<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取li[2]属性为class="video_scroll"的祖先节点</span>class_div <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[2]/ancestor::*[@class="video_scroll"]'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li[2]class="video_scroll"的祖先节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> class_div<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取li[2]/a所有属性值</span>attributes <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[2]/a/attribute::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li[2]/a的所有属性值：'</span><span class="token punctuation">,</span>attributes<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取div所有子节点</span>div_child <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div/child::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'div的所有子节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> div_child<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取body所有子孙节点</span>body_descendant <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//body/descendant::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'body的所有子孙节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> body_descendant<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取li[1]节点后的所有节点</span>li_following <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/following::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li[1]之后的所有节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> li_following<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取li[1]节点后的所有同级节点</span>li_sibling <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[1]/following-sibling::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li[1]之后的所有同级节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> li_sibling<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取li[3]节点前的所有节点</span>li_preceding <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[3]/preceding::*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'li[3]之前的所有节点名称：'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>tag <span class="token keyword">for</span> i <span class="token keyword">in</span> li_preceding<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918144748263.png" alt="image-20210918144748263"></p><h2 id="案例：爬取豆瓣电影Top250中的电影信息"><a href="#案例：爬取豆瓣电影Top250中的电影信息" class="headerlink" title="案例：爬取豆瓣电影Top250中的电影信息"></a>案例：爬取豆瓣电影Top250中的电影信息</h2><p>本节将使用requests模块与lxml模块中的XPath解析器，爬取豆瓣电影Top250的电影信息</p><p>网页地址：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a></p><h3 id="分析请求地址"><a href="#分析请求地址" class="headerlink" title="分析请求地址"></a>分析请求地址</h3><p>豆瓣电影Top250首页底部可以确定电影信息一共有10页内容，每页有25个电影信息。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918145305381.png" alt="image-20210918145305381"></p><p>切换页面的URL如下</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918145426302.png" alt="image-20210918145426302"></p><h3 id="分析信息位置"><a href="#分析信息位置" class="headerlink" title="分析信息位置"></a>分析信息位置</h3><p>通过浏览器开发者工具定位电影名称、导演、主演、电影评分、评价人数等信息的HTML代码对应位置</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918145637532.png" alt="image-20210918145637532"></p><h3 id="爬虫代码的实现"><a href="#爬虫代码的实现" class="headerlink" title="爬虫代码的实现"></a>爬虫代码的实现</h3><ul><li>导入爬虫所需模块，然后创建一个请求头</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree    <span class="token comment" spellcheck="true"># 导入etree子模块</span><span class="token keyword">import</span> time               <span class="token comment" spellcheck="true"># 导入时间模块</span><span class="token keyword">import</span> random             <span class="token comment" spellcheck="true"># 导入随机模块</span><span class="token keyword">import</span> requests           <span class="token comment" spellcheck="true"># 导入网络请求模块</span>header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>由于HTML代码中的信息内存存在大量的空白符，所以创建一个processing()方法，用于处理字符串中的空白符</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 处理字符串中的空白符，并拼接字符串</span><span class="token keyword">def</span> <span class="token function">processing</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 定义保存内容的字符串</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> strs<span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>n<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去除空字符</span>        s <span class="token operator">=</span> s <span class="token operator">+</span> n  <span class="token comment" spellcheck="true"># 拼接字符串</span>    <span class="token keyword">return</span> s      <span class="token comment" spellcheck="true"># 返回拼接后的字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建get_movie_info()方法，在该方法中<ul><li>首先通过requests.get()方法发送网络请求</li><li>然后通过etree.HTML()方法解析HTML代码</li><li>最后通过XPath提取电影的相关信息</li></ul></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取电影信息</span><span class="token keyword">def</span> <span class="token function">get_movie_info</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 发送网络请求</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 解析html字符串</span>    div_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="info"]'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> div <span class="token keyword">in</span> div_all<span class="token punctuation">:</span>        names <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="hd"]/a//span/text()'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 获取电影名字相关信息</span>        name <span class="token operator">=</span> processing<span class="token punctuation">(</span>names<span class="token punctuation">)</span>                                    <span class="token comment" spellcheck="true"># 处理电影名称信息</span>        infos <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="bd"]/p/text()'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 获取导演、主演等信息</span>        info <span class="token operator">=</span> processing<span class="token punctuation">(</span>infos<span class="token punctuation">)</span>                                   <span class="token comment" spellcheck="true"># 处理导演、主演等信息</span>        score <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="bd"]/div/span[2]/text()'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 获取电影评分</span>        evaluation <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="bd"]/div/span[4]/text()'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取评价人数</span>        <span class="token comment" spellcheck="true"># 获取电影总结文字</span>        summary <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[@class="bd"]/p[@class="quote"]/span/text()'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电影名称：'</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'导演与演员：'</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电影评分：'</span><span class="token punctuation">,</span>score<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'评价人数：'</span><span class="token punctuation">,</span>evaluation<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电影总结：'</span><span class="token punctuation">,</span>summary<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------分隔线--------'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建程序入口，然后创建步长为25的for循环，并在循环中替换每次请求的URL地址，再调用get_movie_info()方法获取电影信息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 每页25为间隔，实现循环，共10页</span>        <span class="token comment" spellcheck="true"># 通过format替换切换页码的url地址</span>        url <span class="token operator">=</span> <span class="token string">'https://movie.douban.com/top250?start={page}&amp;filter='</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>page<span class="token operator">=</span>i<span class="token punctuation">)</span>        get_movie_info<span class="token punctuation">(</span>url<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># 调用爬虫方法,获取电影信息</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 等待1至3秒随机时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210918150230772.png" alt="image-20210918150230772"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫中应用的正则表达式</title>
      <link href="/pa-chong-zhong-ying-yong-de-zheng-ze-biao-da-shi.html"/>
      <url>/pa-chong-zhong-ying-yong-de-zheng-ze-biao-da-shi.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在不借助第三方模块的前提下，正则表达式是一个非常强大的工具</p><h2 id="使用search-方法匹配字符串"><a href="#使用search-方法匹配字符串" class="headerlink" title="使用search()方法匹配字符串"></a>使用search()方法匹配字符串</h2><p>re模块中的search()方法用于在整个字符串中搜索第一个匹配的值，如果在第一个匹配位置匹配成功，则返回Match对象，否则返回None，其语法格式如下：</p><pre><code>re.search(pattern,string,[flags])</code></pre><p><strong>参数说明：</strong></p><ul><li>pattern：表示模式字符串，由要匹配的正则表达式转换而来</li><li>string：表示要匹配的字符串</li><li>flags：可选参数，表示修饰符，用于控制匹配方式，如是否区分大小写等</li></ul><h3 id="获取第一个指定字符开头的字符串"><a href="#获取第一个指定字符开头的字符串" class="headerlink" title="获取第一个指定字符开头的字符串"></a>获取第一个指定字符开头的字符串</h3><p>以搜索第一个“mr_”开头的字符串为例，不区分字母大小写。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> <span class="token string">'mr_\w+'</span>                       <span class="token comment" spellcheck="true"># 模式字符串</span>string <span class="token operator">=</span> <span class="token string">'MR_SHOP mr_shop'</span>              <span class="token comment" spellcheck="true"># 要匹配的字符串</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>string<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 搜索字符串，不区分大小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># 输出匹配结果</span>string <span class="token operator">=</span> <span class="token string">'项目名称MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>string<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 搜索字符串，不区分大小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                              <span class="token comment" spellcheck="true"># 输出匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917144143783.png" alt="image-20210917144143783"></p><blockquote><p>从上图可以看出，search()方法不仅仅可以在字符串的起始位置搜索，其他位置存在符合的匹配时也可以</p></blockquote><h3 id="可选匹配"><a href="#可选匹配" class="headerlink" title="可选匹配"></a>可选匹配</h3><p>在匹配字符串时，有时会遇到部分内容可有可无的情况，对于这样的情况可以使用“？”来解决，“？”可以理解为可选符号，通过该符号即可实现可选匹配字符串中的内容</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span><span class="token comment" spellcheck="true"># 表达式，(\d?)+表示多个数字可有可无，\s空格可有可无，([\u4e00-\u9fa5]?)+多个汉字可有可无</span>pattern <span class="token operator">=</span> <span class="token string">'(\d?)+mrsoft\s?([\u4e00-\u9fa5]?)+'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'01mrsoft'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串,mrsoft前有01数字，匹配成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'mrsoft'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串，mrsoft匹配成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'mrsoft '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串，mrsoft后面有一个空格，匹配成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'mrsoft 第一'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串，mrsoft后面有空格和汉字，匹配成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'rsoft 第一'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串，rsoft后面有空格和汉字，但不满足完整的mrsoft，匹配失败</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917144632597.png" alt="image-20210917144632597"></p><h3 id="匹配字符串边界"><a href="#匹配字符串边界" class="headerlink" title="匹配字符串边界"></a>匹配字符串边界</h3><p>如果字符串在开始处、结尾处，或者是字符串的分界符为空格、标点符号以及换行，可以使用“\b”匹配字符串的边界</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span>pattern <span class="token operator">=</span> r<span class="token string">'\bmr\b'</span>               <span class="token comment" spellcheck="true"># 表达式，mr两侧均有边界</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'mrsoft'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串,mr右侧不是边界是soft，匹配失败</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'mr soft'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串，mr左侧为边界右侧为空格，匹配成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">' mrsoft '</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串，mr左侧为空格右侧为soft空格，匹配失败</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'mr.soft'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串，mr左侧为边界右侧为“.”，匹配成功</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917144952383.png" alt="image-20210917144952383"></p><blockquote><p><code>表达式中的r表示“\b”不进行转义，如果将表达式中的r去掉将无法进行字符串边界匹配</code></p></blockquote><h2 id="使用findall-方法匹配字符串"><a href="#使用findall-方法匹配字符串" class="headerlink" title="使用findall()方法匹配字符串"></a>使用findall()方法匹配字符串</h2><p>re模块的findall()方法用于在整个字符串中搜索<code>所有</code>符合正则表达式的字符串，并以<code>列表</code>的形式返回。如果匹配成功，则返回包含匹配结构的列表，否则返回空列表，其语法格式如下：</p><pre><code>re.findall(pattern,string,[flags])</code></pre><p><strong>参数说明：</strong></p><ul><li>pattern：表示模式字符串，由要匹配的正则表达式转换而来</li><li>string：表示要匹配的字符串</li><li>flags：可选参数，表示修饰符，用于控制匹配方式，如是否区分大小写等</li></ul><h3 id="匹配所有指定字符开头的字符串"><a href="#匹配所有指定字符开头的字符串" class="headerlink" title="匹配所有指定字符开头的字符串"></a>匹配所有指定字符开头的字符串</h3><p>以搜索所有以“mr_”开头的字符串为例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> <span class="token string">'mr_\w+'</span>                        <span class="token comment" spellcheck="true"># 模式字符串</span>string <span class="token operator">=</span> <span class="token string">'MR_SHOP mr_shop'</span>                <span class="token comment" spellcheck="true"># 要匹配的字符串</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>string<span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 搜索字符串，不区分大小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 输出匹配结果</span>string <span class="token operator">=</span> <span class="token string">'项目名称MR_SHOP mr_shop'</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>string<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 搜索字符串，区分大小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 输出匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917145744566.png" alt="image-20210917145744566"></p><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>如果需要匹配一段包含不同类型数据的字符串，需要挨个字符进行匹配，如果使用这种传统的匹配方式那将非常复杂。<code>“·*”</code>则是一种万能匹配的方式，其中<code>&quot;.&quot;</code>可以匹配除换行符以外的任意字符，而<code>&quot;*&quot;</code>表示匹配前面字符0次或者无限次，当他们组合在一起的时候就变成了万能的匹配方式。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span>pattern <span class="token operator">=</span> <span class="token string">'https://.*/'</span>               <span class="token comment" spellcheck="true"># 表达式，“.*”获取www.hao123.com</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'https://www.hao123.com/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917164021828.png" alt="image-20210917164021828"></p><p>匹配成功后将打印字符串的所有内容，如果只需要单独获取<code>&quot;.*&quot;</code>所匹配的中间内容时，可以使用<code>&quot;(.*)&quot;</code>的方式匹配</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span>pattern <span class="token operator">=</span> <span class="token string">'https://(.*)/'</span>               <span class="token comment" spellcheck="true"># 表达式，“.*”获取www.hao123.com</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'https://www.hao123.com/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917164222630.png" alt="image-20210917164222630"></p><h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p>在某些情况下，贪婪匹配并不会匹配我们所需要的结果。以获取网络地址（<a href="https://www.hao123.com/）中的“123”数字为例" target="_blank" rel="noopener">https://www.hao123.com/）中的“123”数字为例</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span>pattern <span class="token operator">=</span> <span class="token string">'https://.*(\d+).com/'</span>               <span class="token comment" spellcheck="true"># 表达式，“.*”获取www.hao123.com</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'https://www.hao123.com/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917165038760.png" alt="image-20210917165038760"></p><p>从以上的运行结果可以看出，<code>&quot;(\d+)&quot;</code>并没有匹配我们所需要的结果123，而是匹配了一个数字3而已。这是因为在贪婪匹配下，<code>&quot;.*&quot;</code>会尽量匹配更多的字符，而<code>&quot;\d+&quot;</code>表示至少匹配一个数字并没有指定数字的多少，所以<code>&quot;.*&quot;</code>将”<a href="http://www.hao12“全部匹配了，只把数字3留给了`&quot;\d+&quot;`进行匹配，因此也就有了数字3的结果。" target="_blank" rel="noopener">www.hao12“全部匹配了，只把数字3留给了`&quot;\d+&quot;`进行匹配，因此也就有了数字3的结果。</a></p><p>如果需要解决上述问题，其实可以使用非贪婪匹配<code>&quot;.*?&quot;</code>，这样的匹配方式可以尽量匹配更少的字符，但不会影响我们需要匹配的数据</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span>pattern <span class="token operator">=</span> <span class="token string">'https://.*?(\d+).com/'</span>               <span class="token comment" spellcheck="true"># 表达式，“.*”获取www.hao123.com</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'https://www.hao123.com/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917174820400.png" alt="image-20210917174820400"></p><p>非贪婪匹配虽然有一定的优势，但是如果需要匹配的结果在字符串的尾部时，<code>&quot;.*?&quot;</code>就很可能匹配不到任何内容，因为他会尽量匹配更少的字符。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span>pattern <span class="token operator">=</span> <span class="token string">'https://(.*?)'</span>               <span class="token comment" spellcheck="true"># 表达式，“.*?”获取www.hao123.com/</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'https://www.hao123.com/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span>pattern <span class="token operator">=</span> <span class="token string">'https://(.*)'</span>               <span class="token comment" spellcheck="true"># 表达式，“.*”获取www.hao123.com/</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'https://www.hao123.com/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917175002334.png" alt="image-20210917175002334"></p><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h3><p>sub()方法用于实现将某个字符串中所有匹配正则表达式的部分替换成其他字符串，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> repl<span class="token punctuation">,</span> string<span class="token punctuation">,</span> count<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>pattern：表示模式字符串，由要匹配的正则表达式转换而来</li><li>repl：表示替换的字符串</li><li>string：表示要被查找替换的原始字符串</li><li>count：可选参数，表示模式匹配后替换的最大次数，默认值为0，表示替换所有的匹配</li><li>flags：可选参数，表示修饰符，用于控制匹配方式，例如是否区分字母大小写</li></ul><p><strong>使用sub()方法替换字符串</strong></p><p>例如，隐藏中奖信息中的手机号码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> r<span class="token string">'1[34578]\d{9}'</span>                       <span class="token comment" spellcheck="true"># 定义要替换的模式字符串</span>string <span class="token operator">=</span> <span class="token string">'中奖号码为：84978981 联系电话为：13611111111'</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'1XXXXXXXXXX'</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 替换字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917221449153.png" alt="image-20210917221449153"></p><p>sub()方法除了有替换字符串的功能以外，<code>还可以使用该方法实现删除字符串中我们所不需要的数据</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span>string <span class="token operator">=</span> <span class="token string">'hk400 jhkj6h7k5 jhkjhk1j0k66'</span>     <span class="token comment" spellcheck="true"># 需要匹配的字符串</span>pattern <span class="token operator">=</span> <span class="token string">'[a-z]'</span>                           <span class="token comment" spellcheck="true"># 表达式</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span>string<span class="token punctuation">,</span>flags<span class="token operator">=</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串,将所有字母替换为空，并区分大小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917221617585.png" alt="image-20210917221617585"></p><p>在re模块中还提供了<code>subn()</code>方法，该方法也能实现替换字符串的功能，此外，<code>还可以返回替换的数量</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span><span class="token comment" spellcheck="true"># 需要匹配的字符串</span>string <span class="token operator">=</span> <span class="token string">'John,I like you to meet Mr. Wang，Mr. Wang, this is our Sales Manager John. John, this is Mr. Wang.'</span>pattern <span class="token operator">=</span> <span class="token string">'Wang'</span>      <span class="token comment" spellcheck="true"># 表达式</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>subn<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span><span class="token string">'Li'</span><span class="token punctuation">,</span>string<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串,将所有Wang替换为Li，并统计替换次数</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 打印匹配结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true"># 打印匹配次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917221748437.png" alt="image-20210917221748437"></p><p>从以上的运行结果中可以看出，替换后所返回的数据为一个元组，第一个元素为替换后的字符串，而第二个元素为替换的次数，这里可以直接使用索引获取替换的次数。</p><h3 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h3><p>split()方法用于实现根据正则表达式分割字符串，并以列表的形式返回。其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token punctuation">[</span>maxsplit<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>pattern：表示模式字符串，由要匹配的正则表达式转换而来</li><li>string：表示要被查找替换的原始字符串</li><li>maxsplit：可选参数，表示最大的拆分次数</li><li>flags：可选参数，表示修饰符，用于控制匹配方式，例如是否区分字母大小写</li></ul><p><strong>使用split()方法分割字符串</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> r<span class="token string">'[?|&amp;]'</span>                  <span class="token comment" spellcheck="true"># 定义分割符</span>url <span class="token operator">=</span> <span class="token string">'http://www.mingrisoft.com/login.jsp?username="mr"&amp;pwd="mrsoft"'</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>url<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 分割字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917222306513.png" alt="image-20210917222306513"></p><p>如果需要分割的字符串非常大，并且不希望使用模式字符串一直分割下去，此时可以指定split()方法中的maxsplit参数来指定最大的分割次数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re                        <span class="token comment" spellcheck="true"># 导入re模块</span><span class="token comment" spellcheck="true"># 需要匹配的字符串</span>string <span class="token operator">=</span> <span class="token string">'预定|K7577|CCT|THL|CCT|LYL|14:47|16:51|02:04|Y|'</span>pattern <span class="token operator">=</span> <span class="token string">'\|'</span>      <span class="token comment" spellcheck="true"># 表达式</span>match <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>string<span class="token punctuation">,</span>maxsplit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 匹配字符串,通过第一次出现的|进行分割</span><span class="token keyword">print</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 打印匹配结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917222455629.png" alt="image-20210917222455629"></p><h2 id="案例：爬取编程e学网视频"><a href="#案例：爬取编程e学网视频" class="headerlink" title="案例：爬取编程e学网视频"></a>案例：爬取编程e学网视频</h2><p>本节将使用requests模块与正则表达式，爬取编程e学网的某个视频。在爬取前首先设计爬取思路：</p><ul><li>首先需要找到视频页面</li><li>然后分析视频的URL地址</li><li>最后根据爬取匹配到的地址实现视频的下载工作</li></ul><h3 id="查找视频页面"><a href="#查找视频页面" class="headerlink" title="查找视频页面"></a>查找视频页面</h3><ul><li>浏览器打开“编程e学网”（<a href="http://site2.rjkflm.com:666/）地址，点击“精彩课程”下的“第一颗" target="_blank" rel="noopener">http://site2.rjkflm.com:666/）地址，点击“精彩课程”下的“第一颗</a> 初识Java”</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917223140866.png" alt="image-20210917223140866"></p><ul><li>点击“第1节”查看对应课程视频</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917223225075.png" alt="image-20210917223225075"></p><ul><li>视频页面如下</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917223306336.png" alt="image-20210917223306336"></p><blockquote><p>此处需保留当前页面网络地址，即<a href="http://site2.rjkflm.com:666/index/index/view/id/1.html，用于爬虫程序的请求地址" target="_blank" rel="noopener">http://site2.rjkflm.com:666/index/index/view/id/1.html，用于爬虫程序的请求地址</a></p></blockquote><h3 id="分析视频地址"><a href="#分析视频地址" class="headerlink" title="分析视频地址"></a>分析视频地址</h3><ul><li>进入开发者工具并找到视频窗口的HTML代码</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917223519289.png" alt="image-20210917223519289"></p><ul><li>由于HTML代码中链接不完整，所以需要将网站首地址与视频地址进行拼接，然后在浏览器中打开拼接后的完整地址，测试是否可以正常观看视频</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917223812304.png" alt="image-20210917223812304"></p><blockquote><p>测试拼接后的视频地址为：<a href="http://site2.rjkflm.com:666/public/uploads/video/file_5c35895748585.mp4" target="_blank" rel="noopener">http://site2.rjkflm.com:666/public/uploads/video/file_5c35895748585.mp4</a></p></blockquote><h3 id="实现视频下载"><a href="#实现视频下载" class="headerlink" title="实现视频下载"></a>实现视频下载</h3><ul><li>首先需要定义视频播放的URL与请求头信息</li><li>然后使用requests.get()方法发送网络请求</li><li>接着返回的HTML代码中，通过正则表达式匹配视频地址的数据并将其视频地址拼接完整</li><li>最后再次对拼接后的视频地址发送网络请求</li><li>再通过open()函数将返回的视频二进制数据写成视频文件</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests          <span class="token comment" spellcheck="true"># 导入requests模块</span><span class="token keyword">import</span> re                <span class="token comment" spellcheck="true"># 导入re模块</span><span class="token comment" spellcheck="true"># 定义视频播放页面的url</span>url <span class="token operator">=</span> <span class="token string">'http://site2.rjkflm.com:666/index/index/view/id/1.html'</span><span class="token comment" spellcheck="true"># 定义请求头信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36'</span><span class="token punctuation">}</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断请求成功后</span>    <span class="token comment" spellcheck="true"># 通过正则表达式匹配视频地址</span>    video_url <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;source src="(.*?)" type="video/mp4">'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    video_url<span class="token operator">=</span><span class="token string">'http://site2.rjkflm.com:666/'</span><span class="token operator">+</span>video_url    <span class="token comment" spellcheck="true"># 将视频地址拼接完整</span>    video_response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>video_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送下载视频的网络请求</span>    <span class="token keyword">if</span> video_response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果请求成功</span>        data <span class="token operator">=</span> video_response<span class="token punctuation">.</span>content      <span class="token comment" spellcheck="true"># 获取返回的视频二进制数据</span>        file <span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'java视频.mp4'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建open对象</span>        file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 写入数据</span>        file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917224226760.png" alt="image-20210917224226760"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210917224232448.png" alt="image-20210917224232448"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级网络请求模块</title>
      <link href="/gao-ji-wang-luo-qing-qiu-mo-kuai.html"/>
      <url>/gao-ji-wang-luo-qing-qiu-mo-kuai.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本章将介绍requests模块的两大扩展，Requests-Cache（爬虫缓存）与Requests-HTML模块。通过该章节可以了解爬虫缓存的作用、requests模块的不足以及扩展后的强大功能。</p><h2 id="Requests-Cache的安装与测试"><a href="#Requests-Cache的安装与测试" class="headerlink" title="Requests-Cache的安装与测试"></a>Requests-Cache的安装与测试</h2><p>Requests-Cache模块是requests模块的一个扩展功能，<code>用于为requests模块提供给持久化缓存支持</code>，如果requests模块向一个URL发送重复请求时，Requests-Cache模块将自动判断当前的网络请求是否产生了缓存，如果已经产生了缓存，就会从缓存中读取数据作为响应内容，如果没有缓存就会向服务器发送网络请求获取服务器所返回的响应内容。<code>使用Requests-Cache模块可以减少网络资源避免重复请求次数，这样可以变相地规避一些反爬机制</code>。</p><p>安装Requests-Cache的命令：</p><pre><code>pip install requests-cache</code></pre><p>安装完成后可通过下述命令获取Requests-Cache模块版本，以检测是否安装成功。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests_cache    <span class="token comment" spellcheck="true"># 导入requests_cache模块</span>version <span class="token operator">=</span> requests_cache<span class="token punctuation">.</span>__version__  <span class="token comment" spellcheck="true"># 获取模块当前版本</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'模块版本号：'</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印模块当前版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916100444059.png" alt="image-20210916100444059"></p><h2 id="缓存的应用"><a href="#缓存的应用" class="headerlink" title="缓存的应用"></a>缓存的应用</h2><p>在使用Requests-Cache模块实现请求缓存时，只需要调用install_cache()函数即可，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">install_cache<span class="token punctuation">(</span>cache_name<span class="token operator">=</span><span class="token string">'cache'</span><span class="token punctuation">,</span>backend<span class="token operator">=</span>None<span class="token punctuation">,</span>expire_fater<span class="token operator">=</span>None<span class="token punctuation">,</span>allowable_codes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>allowable_methods<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>session_factory<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'requests_cache.core.CachedSession'</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">**</span>backend_options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>cache_name：表示缓存文件的名称，默认为cache</li><li>backend：表示设置缓存的存储机制，默认为None，表示默认使用sqlite进行存储</li><li>expire_fater：表示设置缓存的有效时间，默认为None，表示永久有效</li><li>allowable_codes：表示设置状态码，默认为200</li><li>allowable_methods：表示设置请求方式，默认为GET，表示只有GET请求才可以生成缓存</li><li>session_factory：表示设置缓存执行的对象，需要实现CachedSession类</li><li>**backend_options：如果缓存的存储方式为sqlite、mongo、redus数据库，该参数表示设置数据库的连接方式</li></ul><p>在使用install_cache()函数实现请求缓存时，一般情况下是不需要单独设置任何参数的，只需要使用默认参数即可。</p><p><strong>判断是否存在缓存</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests_cache    <span class="token comment" spellcheck="true"># 导入requests_cache模块</span><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span>requests_cache<span class="token punctuation">.</span>install_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置缓存</span>requests_cache<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 清理缓存</span>url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span>  <span class="token comment" spellcheck="true"># 定义测试地址</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 第一次发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是否存在缓存：'</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>from_cache<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False表示不存在缓存</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 第二次发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是否存在缓存：'</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>from_cache<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True表示存在缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916101759291.png" alt="image-20210916101759291"></p><p>在发送网络请求爬取网页数据时，如果频繁地发送网络请求，后台服务器则会视为爬虫程序，此时将采取反扒措施，因此多次请求中一定要有时间间隔，设置延时是一个不错的选择。<code>但如果在第一次请求后已经生成了缓存，那么第二次请求也就无需设置延时，对于此类情况Requests-Cache模块可以使用自定义钩子函数的方式，合理地判断是否需要设置延时操作</code>。代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests_cache    <span class="token comment" spellcheck="true"># 导入requests_cache模块</span><span class="token keyword">import</span> time  <span class="token comment" spellcheck="true"># 导入时间模块</span>requests_cache<span class="token punctuation">.</span>install_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置缓存</span>requests_cache<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 清理缓存</span><span class="token comment" spellcheck="true"># 定义钩子函数</span><span class="token keyword">def</span> <span class="token function">make_throttle_hook</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hook</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印请求结果</span>        <span class="token comment" spellcheck="true"># 判断没有缓存时就添加延时</span>        <span class="token keyword">if</span> <span class="token operator">not</span> getattr<span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">'from_cache'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'等待'</span><span class="token punctuation">,</span>timeout<span class="token punctuation">,</span><span class="token string">'秒！'</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 等待指定时间</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是否存在请求缓存！'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>from_cache<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 存在缓存输出True</span>        <span class="token keyword">return</span> response    <span class="token keyword">return</span> hook<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    requests_cache<span class="token punctuation">.</span>install_cache<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建缓存</span>    requests_cache<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 清理缓存</span>    s <span class="token operator">=</span> requests_cache<span class="token punctuation">.</span>CachedSession<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建缓存会话</span>    s<span class="token punctuation">.</span>hooks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'response'</span><span class="token punctuation">:</span> make_throttle_hook<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 配置钩子函数</span>    s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模拟第一次发送网络请求</span>    s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模拟第二次发送网络请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916103245144.png" alt="image-20210916103245144"></p><p>从上面结果可见，通过配置钩子函数可以实现：在第一次请求时，因为没有请求缓存所以执行了2秒等待延时；当第二次请求时则没有执行2秒延时，并输出是否存在请求缓存为True</p><blockquote><p>Requests-Cache模块支持4中不同的存储机制，分别为memory、sqlite、mongoDB以及redis，具体说明如下：</p><ul><li>memory：以字典的形式将缓存存储在内存当中，程序执行完成后内存将被销毁</li><li>sqlite：将缓存存储在sqlite数据库当中</li><li>mongoDB：将缓存存储在mongoDB数据库当中</li><li>redis：将缓存存储在redis数据库当中</li></ul></blockquote><p>使用Requests-Cache模块指定缓存不同的存储机制时，只需要为install_cache()函数中backend参数赋值即可，设置方式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests_cache    <span class="token comment" spellcheck="true"># 导入requests_cache模块</span><span class="token comment" spellcheck="true"># 设置缓存为内存的存储机制</span>requests_cache<span class="token punctuation">.</span>install_cache<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'memory'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置缓存为sqlite数据库的存储机制</span>requests_cache<span class="token punctuation">.</span>install_cache<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'sqlite'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置缓存为mongoDB数据库的存储机制</span>requests_cache<span class="token punctuation">.</span>install_cache<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'mongo'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置缓存为redis数据库的存储机制</span>requests_cache<span class="token punctuation">.</span>install_cache<span class="token punctuation">(</span>backend<span class="token operator">=</span><span class="token string">'redis'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在设置存储机制为mongoDB与redis数据库时，需要先提前安装对应的操作模块与数据库</p><pre><code>pip install pymongopip install redis</code></pre><h2 id="强大的Requests-HTML模块"><a href="#强大的Requests-HTML模块" class="headerlink" title="强大的Requests-HTML模块"></a>强大的Requests-HTML模块</h2><p>Requests-HTML模块不仅包含了requests模块中的所有功能，还增加了对JavaScript的支持、数据提取以及模拟真实浏览器等功能。</p><p>Requests-HTML安装命令：</p><pre><code>pip install requests-html</code></pre><h3 id="使用Requests-HTML模块实现网络请求"><a href="#使用Requests-HTML模块实现网络请求" class="headerlink" title="使用Requests-HTML模块实现网络请求"></a>使用Requests-HTML模块实现网络请求</h3><h4 id="get-请求"><a href="#get-请求" class="headerlink" title="get()请求"></a>get()请求</h4><p>安装Requests-HTML模块后，首先需要导入Requests-HTML模块中的HTMLSession类，接着需要创建HTML会话对象，通过会话实例进行网络请求的发送。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> requests_html <span class="token keyword">import</span> HTMLSession  <span class="token comment" spellcheck="true"># 导入HTMLSession类</span>session <span class="token operator">=</span> HTMLSession<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建HTML会话对象</span>url <span class="token operator">=</span> <span class="token string">'http://news.youth.cn/'</span>  <span class="token comment" spellcheck="true"># 定义请求地址</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>html<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印网络请求的URL地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916105516746.png" alt="image-20210916105516746"></p><h4 id="post-请求"><a href="#post-请求" class="headerlink" title="post()请求"></a>post()请求</h4><p>使用Requests-HTML模块实现post请求与requests的实现方式类似，都需要单独设置表单参数data，不过它也是需要通过会话实例进行网络请求的发送</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> requests_html <span class="token keyword">import</span> HTMLSession  <span class="token comment" spellcheck="true"># 导入HTMLSession类</span>session <span class="token operator">=</span> HTMLSession<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建HTML会话对象</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user'</span><span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">:</span><span class="token number">123456</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 模拟表单登录的数据</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送POST网络请求</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否请求成功</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以文本形式打印返回结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916110002514.png" alt="image-20210916110002514"></p><h4 id="修改请求头信息"><a href="#修改请求头信息" class="headerlink" title="修改请求头信息"></a>修改请求头信息</h4><p>Requests-HTML模块是可以通过指定headers参数来对默认的浏览器请求头信息进行修改的，修改请求头的关键代码如下：</p><pre class="line-numbers language-python"><code class="language-python">ua <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>ua<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="生成随机请求头信息"><a href="#生成随机请求头信息" class="headerlink" title="生成随机请求头信息"></a>生成随机请求头信息</h4><p>Requests-HTML模块中添加了UserAgent类，使用该类可以实现随机生成请求头信息</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> requests_html <span class="token keyword">import</span> HTMLSession<span class="token punctuation">,</span>UserAgent  <span class="token comment" spellcheck="true"># 导入HTMLSession UserAgent类</span>session <span class="token operator">=</span> HTMLSession<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建HTML会话对象</span>ua <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>randomr <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span>ua<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否请求成功</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以文本形式打印返回结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据的提取"><a href="#数据的提取" class="headerlink" title="数据的提取"></a>数据的提取</h3><p>以往使用requests模块实现爬虫程序时，还需要为其配置一个解析HTML代码的搭档。Requests-HTML模块不仅支持CSS选择器还支持XPath的节点提取方式</p><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><p>CSS选择器中需要使用HTML的find()方法，该方法中包含5个参数，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">find<span class="token punctuation">(</span>selector<span class="token punctuation">:</span>str<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">,</span>containing<span class="token punctuation">:</span>_Containing<span class="token operator">=</span>None<span class="token punctuation">,</span>clean<span class="token punctuation">:</span>bool<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>first<span class="token punctuation">:</span>bool<span class="token operator">=</span>Fales<span class="token punctuation">,</span>_encoding<span class="token punctuation">:</span>str<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>selector：使用CSS选择器定位网页元素</li><li>containing：要通过指定文本获取网页元素</li><li>clean：是否清除HTML中的<script>和<style>标签，默认为Fasle表示不清除</li><li>first：是否只返回网页中第一个元素，默认为Fasle表示全部返回</li><li>_encoding：表示编码格式</li></ul><h4 id="XPath选择器"><a href="#XPath选择器" class="headerlink" title="XPath选择器"></a>XPath选择器</h4><p>XPath选择器同样需要使用HTML进行调用，该方法中包含4个参数，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">xpath<span class="token punctuation">(</span>selector<span class="token punctuation">:</span>str<span class="token punctuation">,</span>clean<span class="token punctuation">:</span>bool<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>first<span class="token punctuation">:</span>bool<span class="token operator">=</span>Fales<span class="token punctuation">,</span>_encoding<span class="token punctuation">:</span>str<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>selector：使用XPath选择器定位网页元素</li><li>clean：是否清除HTML中的<script>和<style>标签，默认为Fasle表示不清除</li><li>first：是否只返回网页中第一个元素，默认为Fasle表示全部返回</li><li>_encoding：表示编码格式</li></ul><h4 id="爬取即时新闻"><a href="#爬取即时新闻" class="headerlink" title="爬取即时新闻"></a>爬取即时新闻</h4><p>以爬取“中国青年网”即时新闻为例，数据提取步骤如下：</p><ul><li>在浏览器打开网站进入开发者工具，点击elements选项查看html标签</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916113137302.png" alt="image-20210916113137302"></p><ul><li>如上图所示，新闻标题在<li>标签中，而<a>标签中的href属性值为当前新闻详情的部分URL地址，而<li>标签中<font>标签内是当前新闻所发布的时间，将鼠标移至href属性所对应的URL地址时，会自动显示完整的详情页地址</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916113427492.png" alt="image-20210916113427492"></p><ul><li>定位到上述信息后，首先创建HTML会话与获取随机请求对象，然后对“即时新闻”首页发送网络请求</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> requests_html <span class="token keyword">import</span> HTMLSession<span class="token punctuation">,</span>UserAgent    <span class="token comment" spellcheck="true"># 导入HTMLSession类</span>session <span class="token operator">=</span> HTMLSession<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 创建HTML会话对象</span>ua <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random          <span class="token comment" spellcheck="true"># 创建随机请求头</span><span class="token comment" spellcheck="true"># 发送网路请求</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://news.youth.cn/jsxw/index.htm'</span><span class="token punctuation">,</span>                headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> ua<span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'gb2312'</span>              <span class="token comment" spellcheck="true"># 编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>网络请求完成后，需要通过请求状态码判断请求是否为200，如果是200则表示请求成功，然后根据数据定位的标签分别获取“新闻标题”“新闻详情url地址”以及新闻的发布时间</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 判断请求是否成功</span>    <span class="token comment" spellcheck="true"># 获取所有class=tj3_1中的li标签</span>    li_all <span class="token operator">=</span> r<span class="token punctuation">.</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//ul[@class="tj3_1"]/li'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_all<span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 循环遍历每个li标签</span>        news_title <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 提取新闻标题内容</span>        <span class="token comment" spellcheck="true"># 获取新闻详情对应的地址</span>        news_href <span class="token operator">=</span> <span class="token string">'http://news.youth.cn/jsxw'</span><span class="token operator">+</span>\                    li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a[href]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>        news_time <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'font'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 获取新闻发布的时间</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻标题为：'</span><span class="token punctuation">,</span>news_title<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印新闻标题</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻url地址为：'</span><span class="token punctuation">,</span>news_href<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印新闻url地址</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻发布时间为：'</span><span class="token punctuation">,</span>news_time<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印新闻发布时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916143450808.png" alt="image-20210916143450808"></p><h4 id="find-方法中containing参数"><a href="#find-方法中containing参数" class="headerlink" title="find()方法中containing参数"></a>find()方法中containing参数</h4><p>如果需要获取<li>标签中指定的新闻内容时，可以使用find()方法中的containing参数，以获取关于“新冠疫情”县官新闻内容为例。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> li <span class="token keyword">in</span> r<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span>containing<span class="token operator">=</span><span class="token string">'新冠疫情'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 循环遍历每个li标签</span>    news_title <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 提取新闻标题内容</span>    <span class="token comment" spellcheck="true"># 获取新闻详情对应的地址</span>    news_href <span class="token operator">=</span> <span class="token string">'http://news.youth.cn/jsxw'</span><span class="token operator">+</span>\                    li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a[href]'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>    news_time <span class="token operator">=</span> li<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'font'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 获取新闻发布的时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻标题为：'</span><span class="token punctuation">,</span>news_title<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印新闻标题</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻url地址为：'</span><span class="token punctuation">,</span>news_href<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印新闻url地址</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻发布时间为：'</span><span class="token punctuation">,</span>news_time<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印新闻发布时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916143343400.png" alt="image-20210916143343400"></p><h4 id="search-方法与search-all-方法"><a href="#search-方法与search-all-方法" class="headerlink" title="search()方法与search_all()方法"></a>search()方法与search_all()方法</h4><p>除了使用find()与xpath()这两种方法来提取数据以外，还可以<code>使用search()方法与search_all()方法，通过关键字提取相应的数据信息。</code>其中</p><ul><li>search()方法表示查找符合条件的第一个元素</li><li>search_all()方法则表示查找符合条件的所有元素</li></ul><p><strong>使用search()方法获取信息</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> li <span class="token keyword">in</span> r<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">,</span>containing<span class="token operator">=</span><span class="token string">'新冠疫情'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 循环遍历每个li标签</span>    a <span class="token operator">=</span> li<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;a href="{}">{}&lt;/a>'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取&lt;li>标签中&lt;a>标签内的新闻地址与新闻标题</span>    news_title <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 提取新闻标题内容</span>    <span class="token comment" spellcheck="true"># 获取新闻详情对应的地址</span>    news_href <span class="token operator">=</span> <span class="token string">'http://news.youth.cn/jsxw'</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    news_time <span class="token operator">=</span> li<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;font>{}&lt;/font>'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取新闻发布的时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻标题为：'</span><span class="token punctuation">,</span>news_title<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印新闻标题</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻url地址为：'</span><span class="token punctuation">,</span>news_href<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印新闻url地址</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻发布时间为：'</span><span class="token punctuation">,</span>news_time<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印新闻发布时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用search_all()方法获取信息</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> re  <span class="token comment" spellcheck="true"># 导入正则表达式模块</span><span class="token comment" spellcheck="true"># 获取class=tj3_1的标签</span>class_tj3_1 <span class="token operator">=</span> r<span class="token punctuation">.</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./ul[@class="tj3_1"]'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用search_all()方法获取所有class=tj3_1中的&lt;li>标签</span>li_all <span class="token operator">=</span> class_tj3_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>search_all<span class="token punctuation">(</span><span class="token string">'&lt;li>{}&lt;/li>'</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> li_all<span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 循环遍历每个li标签</span>    <span class="token keyword">if</span> <span class="token string">'新冠疫情'</span> <span class="token keyword">in</span> li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断&lt;li>标签内容中是否存在关键字“新冠疫情”</span>        <span class="token comment" spellcheck="true"># 通过正则表达式获取&lt;a>标签中的新闻信息</span>        a <span class="token operator">=</span> r<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;font>(.*?)&lt;/font>&lt;a href="(.*?)">(.*?)&lt;/a>'</span><span class="token punctuation">,</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        news_title <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 提取新闻标题内容</span>        <span class="token comment" spellcheck="true"># 获取新闻详情对应的地址</span>        news_href <span class="token operator">=</span> <span class="token string">'http://news.youth.cn/jsxw'</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        news_time <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 获取新闻发布的时间</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻标题为：'</span><span class="token punctuation">,</span>news_title<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印新闻标题</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻url地址为：'</span><span class="token punctuation">,</span>news_href<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印新闻url地址</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新闻发布时间为：'</span><span class="token punctuation">,</span>news_time<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印新闻发布时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用search()和search_all()方法获取数据时，方法中的一个“{ }”表示获取一个内容</p></blockquote><h3 id="获取动态加载的数据"><a href="#获取动态加载的数据" class="headerlink" title="获取动态加载的数据"></a>获取动态加载的数据</h3><p>在爬取网页数据时，经常会遇到直接对网页地址发送请求，可返回的HTML代码中并没有所需要的数据的情况。遇到这种情况，多数是因为网页数据使用了Ajax请求并有JavaScript渲染到网页当中的。</p><p>Requests-HTML模块提供了reder()方法，第一次调用该方法将会自动下载Chromium浏览器，然后通过该浏览器直接加载JavaScript渲染后的信息，使用render()方法爬取豆瓣2020年电影数据的步骤如下：</p><ul><li>创建HTML会话与随机请求头对象，然后发送网络请求，在请求成功的情况下调用render()方法获取网页中JavaScript渲染后的信息。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> requests_html <span class="token keyword">import</span> HTMLSession<span class="token punctuation">,</span>UserAgent    <span class="token comment" spellcheck="true"># 导入HTMLSession类</span>session <span class="token operator">=</span> HTMLSession<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 创建HTML会话对象</span>ua <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>random          <span class="token comment" spellcheck="true"># 创建随机请求头</span><span class="token comment" spellcheck="true"># 发送网路请求</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://movie.douban.com/tag/#/?sort=U&amp;range=0,10'</span>                <span class="token string">'&amp;tags=%E7%94%B5%E5%BD%B1,2020'</span><span class="token punctuation">,</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> ua<span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'gb2312'</span>              <span class="token comment" spellcheck="true"># 编码</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>         <span class="token comment" spellcheck="true"># 判断请求是否成功</span>    r<span class="token punctuation">.</span>html<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 调用render()方法，没有Chromium浏览器就自动下载</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>运行上述代码，由于第一次调用render()方法，所以会自动下载Chromiun浏览器</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916142158369.png" alt="image-20210916142158369"></p><ul><li><p>打开浏览器开发者工具，在Elements选项中确认电影信息所在HTML标签的位置</p></li><li><p>编写获取电影信息的代码，首先获取当前页面中所有电影信息的<a>标签，然后在<a>标签中逐个获取电影名称、电影评分、详情页URL地址以及电影图片地址。</p></li></ul><pre class="line-numbers language-python"><code class="language-python">    class_wp <span class="token operator">=</span> r<span class="token punctuation">.</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div[@class="list-wp"]/a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取当前页面中所有电影信息的a标签</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> class_wp<span class="token punctuation">:</span>        title <span class="token operator">=</span> a<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p span'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取电影名称</span>        rate <span class="token operator">=</span> a<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p span'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text  <span class="token comment" spellcheck="true"># 获取电影评分</span>        details_url <span class="token operator">=</span> a<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取详情页url地址</span>        img_url <span class="token operator">=</span> a<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取图片url地址</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电影名称为：'</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印电影名称</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电影评分为：'</span><span class="token punctuation">,</span> rate<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印电影评分</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'详情页地址为：'</span><span class="token punctuation">,</span> details_url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印电影详情页url地址</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'图片地址为：'</span><span class="token punctuation">,</span> img_url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印电影图片地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210916143530819.png" alt="image-20210916143530819"></p></script></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求模块requests</title>
      <link href="/qing-qiu-mo-kuai-requests.html"/>
      <url>/qing-qiu-mo-kuai-requests.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>requests模块为第三方模块，需要通过下述命令安装</p><pre><code>pip install requests</code></pre><p>requests功能特性如下</p><table><thead><tr><th>功能特性</th><th>功能特性</th><th align="left">功能特性</th></tr></thead><tbody><tr><td>Keep-Alive &amp; 连接池</td><td>Unicode响应体</td><td align="left">自动解压</td></tr><tr><td>国际化域名和URL</td><td>HTTP(S)代理支持</td><td align="left">支持.netre</td></tr><tr><td>带持久Cookie的会话</td><td>文件分块上传</td><td align="left">分块请求</td></tr><tr><td>浏览器式的SSL认证</td><td>流下载</td><td align="left">优雅的key/value Cookie</td></tr><tr><td>自动内容解码</td><td>连接超时</td><td align="left">基本/摘要式的身份认证</td></tr></tbody></table><h2 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>最常用的HTTP请求方式为GET和POST，在使用requests模块实现GET请求时可以使用两种方式来实现，一种是带参数，另一种是不带参数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests    <span class="token comment" spellcheck="true"># 导入网络请求模块requests</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'响应状态码为：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求的网络地址为：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 打印请求url</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'头部信息为：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 打印头部信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cookie信息为：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 打印cookie信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915193552898.png" alt="image-20210915193552898"></p><h3 id="对响应结果进行UTF-8编码"><a href="#对响应结果进行UTF-8编码" class="headerlink" title="对响应结果进行UTF-8编码"></a>对响应结果进行UTF-8编码</h3><p>当响应状态码为200时，说明本次网络请求已经成功，此时可以获取请求地址所对应的网页源码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests    <span class="token comment" spellcheck="true"># 导入网络请求模块requests</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span>    <span class="token comment" spellcheck="true"># 对响应结果进行utf-8编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 以文本形式打印网页源码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915193811677.png" alt="image-20210915193811677"></p><blockquote><p>注：在没有对响应内容进行UTF-8编码时，网页源码中的中文信息可能会出现乱码</p></blockquote><h3 id="爬取二进制数据"><a href="#爬取二进制数据" class="headerlink" title="爬取二进制数据"></a>爬取二进制数据</h3><p>使用requests模块中的get()函数不仅可以获取网页的源码信息，还可以获取二进制文件。但是<code>在获取二进制文件时，需要使用Response.content属性获取bytes类型的数据，然后将数据保存在本地文件中。</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests    <span class="token comment" spellcheck="true"># 导入网络请求模块requests</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/img/bd_logo1.png?where=super'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 打印二进制数据</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'百度logo.png'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 通过open函数将二进制数据写入本地文件</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 写入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915194158734.png" alt="image-20210915194158734"></p><h3 id="GET（带参）请求"><a href="#GET（带参）请求" class="headerlink" title="GET（带参）请求"></a>GET（带参）请求</h3><h4 id="实现请求地址带参"><a href="#实现请求地址带参" class="headerlink" title="实现请求地址带参"></a>实现请求地址带参</h4><p>如果需要为GET请求指定参数时，可以直接将参数添加在请求地址URL后面，然后用问号（？）进行分隔，如果一个URL地址中有多个参数，参数之间用“&amp;”进行连接。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests    <span class="token comment" spellcheck="true"># 导入网络请求模块requests</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get?name=Jack&amp;age=30'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 打印转换后的响应数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915194753648.png" alt="image-20210915194753648"></p><h4 id="配置params参数"><a href="#配置params参数" class="headerlink" title="配置params参数"></a>配置params参数</h4><p>requests模块提供了参数传递方法，允许使用params关键字以一个字符串字典来提供这些参数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests    <span class="token comment" spellcheck="true"># 导入网络请求模块requests</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Michael'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token string">'36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">,</span>params <span class="token operator">=</span> data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true"># 打印转换后的响应数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915195039029.png" alt="image-20210915195039029"></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>POST请求方式也叫作提交表单，表单中的数据内容就是对应的请求参数。使用requests模块实现POST请求时需要设置请求参数data</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests    <span class="token comment" spellcheck="true"># 导入网络请求模块requests</span><span class="token keyword">import</span> json        <span class="token comment" spellcheck="true"># 导入json模块</span><span class="token comment" spellcheck="true"># 字典类型的表单参数</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'能力是有限的，而努力是无限的。'</span><span class="token punctuation">,</span>        <span class="token string">'2'</span><span class="token punctuation">:</span><span class="token string">'星光不问赶路人，时光不负有心人。'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>response_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 将响应数据转换为字典类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>response_dict<span class="token punctuation">)</span>                             <span class="token comment" spellcheck="true"># 打印转换后的响应数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915195309783.png" alt="image-20210915195309783"></p><blockquote><p>POST请求中，data参数的数据的格式可以是列表、元组或者是JSON。</p><p><code>requests模块中GET与POST请求的参数分别是params和data，所以不要将两个参数填写错误。</code></p></blockquote><h2 id="复杂的网络请求"><a href="#复杂的网络请求" class="headerlink" title="复杂的网络请求"></a>复杂的网络请求</h2><p>requests模块对复杂的请求进行了简化，只需要<code>在发送请求时设置对应参数即可实现复杂的网络请求。</code></p><h3 id="添加请求头headers"><a href="#添加请求头headers" class="headerlink" title="添加请求头headers"></a>添加请求头headers</h3><p>有时在请求网页内容时，会发现无论通过GET、POST以及其他请求方式，都会出现403错误。这种现象多数为服务器拒绝了您的访问。此时可以通过添加headers来模拟浏览器的头部信息来进行访问，解决以上反爬设置的问题。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests    <span class="token comment" spellcheck="true"># 导入网络请求模块requests</span>url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/'</span>     <span class="token comment" spellcheck="true"># 创建需要爬取网页的地址</span><span class="token comment" spellcheck="true"># 创建头部信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0'</span><span class="token punctuation">}</span>response  <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>                       <span class="token comment" spellcheck="true"># 打印响应状态码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915195936608.png" alt="image-20210915195936608"></p><h3 id="验证Cookies"><a href="#验证Cookies" class="headerlink" title="验证Cookies"></a>验证Cookies</h3><p>Cookie登录就像很多网页中的自动登录功能一样，可以让用户第二次登录时不需要验证账号密码。在使用requests模块实现Cookie登录时：</p><ul><li>首先需要在浏览器的开发者工具页面找到可以实现登录的Cookies信息</li><li>然后将Cookies信息处理并添加至RequestsCookieJar的对象中</li><li>最后将RequestsCookieJar对象作为网络请求的Cookies参数发送网络请求即可</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree  <span class="token comment" spellcheck="true"># 导入lxml模块</span>cookies <span class="token operator">=</span> <span class="token string">'此处填写登录后网页中的cookie信息'</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.douban.com'</span><span class="token punctuation">,</span>           <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.hao123.com/'</span><span class="token punctuation">,</span>           <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span>                         <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span>                         <span class="token string">'Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 创建RequestsCookieJar对象，用于设置cookies信息</span>cookies_jar <span class="token operator">=</span> requests<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>RequestsCookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookies<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token punctuation">,</span> value <span class="token operator">=</span> cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    cookies_jar<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将cookies保存RequestsCookieJar当中</span><span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.douban.com/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies_jar<span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 请求成功时</span>    html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析html代码</span>    <span class="token comment" spellcheck="true"># 获取用户名</span>    name <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="db-global-nav"]/div/div[1]/ul/li[2]/a/span[1]/text()'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="会话请求"><a href="#会话请求" class="headerlink" title="会话请求"></a>会话请求</h3><p>requests模块中提供了Session对象，通过该对象可以实现在同一会话内发送多次网络请求的功能，这相当于在浏览器中打开了一个新的选项卡，此时再获取登录后台页面中的数据时，可以发送两次请求，第一次发送登录请求，而第二次请求就可以在不设置Cookies的情况下获取登录后的页面数据。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests        <span class="token comment" spellcheck="true"># 导入requests模块</span>s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建会话对象</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 创建用户名、密码的表单数据</span><span class="token comment" spellcheck="true"># 发送登录请求</span>response <span class="token operator">=</span>s<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://site2.rjkflm.com:666/index/index/chklogin.html'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>response2<span class="token operator">=</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://site2.rjkflm.com:666'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 发送登录后页面请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录信息：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 打印登录信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录后页面信息如下:\n'</span><span class="token punctuation">,</span>response2<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印登录后的页面信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915214741976.png" alt="image-20210915214741976"></p><h3 id="验证请求"><a href="#验证请求" class="headerlink" title="验证请求"></a>验证请求</h3><p>针对网页弹出的验证页面，requests模块自带了验证功能，只需要在请求方法中填写auth参数，该参数的值是一个带有验证参数（用户名与密码）的HTTPBasicAuth对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests          <span class="token comment" spellcheck="true"># 导入requests模块</span><span class="token keyword">from</span> requests<span class="token punctuation">.</span>auth <span class="token keyword">import</span> HTTPBasicAuth  <span class="token comment" spellcheck="true"># 导入HTTPBasicAuth类</span><span class="token comment" spellcheck="true"># 定义请求地址</span>url <span class="token operator">=</span> <span class="token string">'http://sck.rjkflm.com:666/spider/auth/'</span>ah <span class="token operator">=</span> HTTPBasicAuth<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">,</span><span class="token string">'admin'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 创建HTTPBasicAuth对象，参数为用户名与密码</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>auth<span class="token operator">=</span>ah<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果请求成功</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 打印验证后的HTML代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915215032191.png" alt="image-20210915215032191"></p><h3 id="网络超时与异常"><a href="#网络超时与异常" class="headerlink" title="网络超时与异常"></a>网络超时与异常</h3><p>在访问一个页面时，若网页长时间没有响应，系统就会判断该网络超时</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests     <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token comment" spellcheck="true"># 循环发送请求50次</span><span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 捕获异常</span>        <span class="token comment" spellcheck="true"># 设置超时为0.5秒</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>                                        <span class="token comment" spellcheck="true"># 打印状态码</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                                                 <span class="token comment" spellcheck="true"># 捕获异常</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'异常'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>                                                <span class="token comment" spellcheck="true"># 打印异常信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915215404094.png" alt="image-20210915215404094"></p><hr><p>针对网络异常信息，requests模块同样提供了三种常见的网络异常类捕获异常</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token comment" spellcheck="true"># 导入requests.exceptions模块中的三种异常类</span><span class="token keyword">from</span> requests<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ReadTimeout<span class="token punctuation">,</span>HTTPError<span class="token punctuation">,</span>RequestException<span class="token comment" spellcheck="true"># 循环发送请求50次</span><span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 捕获异常</span>        <span class="token comment" spellcheck="true"># 设置超时为0.1秒</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>                                        <span class="token comment" spellcheck="true"># 打印状态码</span>    <span class="token keyword">except</span> ReadTimeout<span class="token punctuation">:</span>                                                     <span class="token comment" spellcheck="true"># 超时异常</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> HTTPError<span class="token punctuation">:</span>                                                       <span class="token comment" spellcheck="true"># HTTP异常</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'httperror'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>                                               <span class="token comment" spellcheck="true"># 请求异常</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'reqerror'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>使用requests模块实现向服务器上传文件，只需要指定post()函数中的files参数即可，files参数可以指定一个BufferedReader对象，该对象可以使用内置open()函数返回。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests                   <span class="token comment" spellcheck="true"># 导入网络请求模块</span>bd <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'百度logo.png'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 读取指定文件</span>file <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span>bd<span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true"># 定义需要上传的图片文件</span><span class="token comment" spellcheck="true"># 发送上传文件的网络请求</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span>files <span class="token operator">=</span> file<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 打印响应结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915215752827.png" alt="image-20210915215752827"></p><h2 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h2><h3 id="代理的应用"><a href="#代理的应用" class="headerlink" title="代理的应用"></a>代理的应用</h3><p>设置代理时，首先需要找到代理地址，如117.88.176.38，对应端口号为3000，完整格式为117.88.176.38:3000</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests      <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token comment" spellcheck="true"># 头部信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span>                         <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span>                         <span class="token string">'Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span>proxy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'http://117.88.176.38:3000'</span><span class="token punctuation">,</span>         <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'https://117.88.176.38:3000'</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 设置代理ip与对应的端口号</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 对需要爬取的网页发送请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://202020.ip138.com'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span> headers<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxy<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印响应状态码</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'错误异常信息为：'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印异常信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915220153653.png" alt="image-20210915220153653"></p><blockquote><p>由于示例中代理IP是免费的，有时间限制，超出时间限制则地址失效。地址失效时则会有上述报错</p></blockquote><h3 id="获取免费的代理IP"><a href="#获取免费的代理IP" class="headerlink" title="获取免费的代理IP"></a>获取免费的代理IP</h3><p>在获取免费的代理IP之前，需要先找到提供免费代理IP的网页，然后通过爬虫技术将大量的代理IP提取并保存至文件中。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree  <span class="token comment" spellcheck="true"># 导入HTML解析模块</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd  <span class="token comment" spellcheck="true"># 导入pandas模块</span>ip_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 创建保存ip地址的列表</span><span class="token keyword">def</span> <span class="token function">get_ip</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 发送网络请求</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>  <span class="token comment" spellcheck="true"># 设置编码方式</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断请求是否成功</span>        html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析HTML</span>        <span class="token comment" spellcheck="true"># 获取所有带有IP的li标签</span>        li_all <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li[@class="f-list col-lg-12 col-md-12 col-sm-12 col-xs-12"]'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> li_all<span class="token punctuation">:</span>                  <span class="token comment" spellcheck="true"># 遍历每行内容</span>            ip <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'span[@class="f-address"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取ip</span>            port <span class="token operator">=</span> i<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'span[@class="f-port"]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取端口</span>            ip_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ip<span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>port<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 将ip与端口组合并添加至列表当中</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'代理ip为：'</span><span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token string">'对应端口为：'</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 头部信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span>                         <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span>                         <span class="token string">'Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    ip_table <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建临时表格数据</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 请求地址</span>        url <span class="token operator">=</span> <span class="token string">'https://www.dieniao.com/FreeProxy/{page}.html'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>page<span class="token operator">=</span>i<span class="token punctuation">)</span>        get_ip<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token punctuation">)</span>    ip_table<span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span> <span class="token operator">=</span> ip_list  <span class="token comment" spellcheck="true"># 将提取的ip保存至excel文件中的ip列</span>    <span class="token comment" spellcheck="true"># 生成xlsx文件</span>    ip_table<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'ip.xlsx'</span><span class="token punctuation">,</span> sheet_name<span class="token operator">=</span><span class="token string">'data'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915220706714.png" alt="image-20210915220706714"></p><h3 id="检测代理IP是否有效"><a href="#检测代理IP是否有效" class="headerlink" title="检测代理IP是否有效"></a>检测代理IP是否有效</h3><p>提供免费代理的网页有很多，但经过测试发现并不是所有的免费代理IP都是有效的，甚至不是匿名IP（即获取远程访问用户的IP地址是代理服务器的IP地址，不是用户本地真实的IP地址）。所以要使用我们爬取下来的免费代理IP，就需要对这个IP进行检测。</p><p>实现检测免费代理IP是否可用时，首先需要读取保存免费代理IP的文件，然后对代理IP进行遍历并使用免费的代理IP发送网络请求。二请求地址可以使用查询IP位置的网页。如果网页请求成功说明免费的代理IP可以使用，并且还会返回当前免费代理IP的匿名地址</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests  <span class="token comment" spellcheck="true"># 导入网络请求模块</span><span class="token keyword">import</span> pandas    <span class="token comment" spellcheck="true"># 导入pandas模块</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree  <span class="token comment" spellcheck="true"># 导入HTML解析模块</span>ip_table <span class="token operator">=</span> pandas<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'ip.xlsx'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取代理IP文件内容</span>ip <span class="token operator">=</span> ip_table<span class="token punctuation">[</span><span class="token string">'ip'</span><span class="token punctuation">]</span>                      <span class="token comment" spellcheck="true"># 获取代理ip列信息</span><span class="token comment" spellcheck="true"># 头部信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '</span>                         <span class="token string">'AppleWebKit/537.36 (KHTML, like Gecko) '</span>                         <span class="token string">'Chrome/72.0.3626.121 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 循环遍历代理IP并通过代理发送网络请求</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ip<span class="token punctuation">:</span>    proxies <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'http'</span><span class="token punctuation">:</span> <span class="token string">'http://{ip}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>               <span class="token string">'https'</span><span class="token punctuation">:</span> <span class="token string">'https://{ip}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://202020.ip138.com/'</span><span class="token punctuation">,</span>                                headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 判断请求是否成功,请求成功说明代理IP可用</span>            response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span>     <span class="token comment" spellcheck="true"># 进行编码</span>            html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 解析HTML</span>            info <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/p[1]//text()'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 输出当前ip匿名信息</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># pass</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'错误异常信息为：'</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印异常信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求模块Urllib3</title>
      <link href="/qing-qiu-mo-kuai-urllib3.html"/>
      <url>/qing-qiu-mo-kuai-urllib3.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>urllib3是一个第三方模块，提供了很多python标准库里没有的特性：</p><ul><li>线性安全</li><li>连接池</li><li>客户端SSL/TLS验证</li><li>使用multipart编码上传文件</li><li>Helpers用于重拾请求并处理HTTP重定向</li><li>支持gzip和deflate编码</li><li>支持HTTP和SOCKS代理</li><li>100%的测试覆盖率</li></ul><p>安装命令：</p><pre><code>pip install urllib3</code></pre><h2 id="发送网络请求"><a href="#发送网络请求" class="headerlink" title="发送网络请求"></a>发送网络请求</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>使用urllib3模块发送网络请求时，首先需要创建PoolManager对象，通过该对象调用request()方法来实现网络请求的发送。request()方法的语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">request<span class="token punctuation">(</span>method<span class="token punctuation">,</span>url<span class="token punctuation">,</span>fields<span class="token operator">=</span>None<span class="token punctuation">,</span>headers<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token operator">**</span> urlopen_kw<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>method：必选参数，用于指定请求方式，如GET、POST、PUT等</li><li>url：必选参数，用于设置需要请求的URL地址</li><li>fields：可选参数，用于设置请求参数</li><li>headers：可选参数，用于设置请求头</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>url <span class="token operator">=</span> <span class="token string">"http://httpbin.org/get"</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送GET请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 打印请求状态码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915113815498.png" alt="image-20210915113815498"></p><hr><p><strong>使用PoolManager对象向多个服务器发送请求</strong></p><p>一个PoolManager对象就是一个连接池管理对象，通过该对象可以实现向多个服务器发送请求。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>jingdong_url <span class="token operator">=</span> <span class="token string">'https://www.jd.com/'</span>     <span class="token comment" spellcheck="true"># 京东url地址</span>python_url <span class="token operator">=</span> <span class="token string">'https://www.python.org/'</span>   <span class="token comment" spellcheck="true"># Python url地址</span>baidu_url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/'</span>     <span class="token comment" spellcheck="true"># 百度url地址</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r1 <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>jingdong_url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 向京东地址发送GET请求</span>r2 <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>python_url<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 向python地址发送GET请求</span>r3 <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>baidu_url<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 向百度地址发送GET请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'京东请求状态码：'</span><span class="token punctuation">,</span>r1<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'python请求状态码：'</span><span class="token punctuation">,</span>r2<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'百度请求状态码：'</span><span class="token punctuation">,</span>r3<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915114006623.png" alt="image-20210915114006623"></p><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>POST请求需要在request()方法中将method参数设置为“POST”，然后将fields参数设置为字典类型的表单参数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>url <span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/post'</span>    <span class="token comment" spellcheck="true"># post请求测试地址</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">:</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 定义字典类型的请求参数</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>fields<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送POST请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'返回结果：'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915154658808.png" alt="image-20210915154658808"></p><p>返回JSON数据中的form对应数据为表单数据，只是country所对应的并不是“中国”而是一段Unicode编码，对于这种情况，可以将请求结果的编码方式设置为“unicode_escape”</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'返回结果：'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'unicode_escape'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915160003534.png" alt="image-20210915160003534"></p><h3 id="重试请求"><a href="#重试请求" class="headerlink" title="重试请求"></a>重试请求</h3><p>urllib3模块可以自动重试请求，这种相同的机制还可以处理重定向。在<code>默认</code>情况下request()方法的请求重试次数为<code>3次</code>，可以通过设置retries参数进行修改</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>url <span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/get'</span>    <span class="token comment" spellcheck="true"># get请求测试地址</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 发送GET请求,默认重试请求</span>r1 <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>retries<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 发送GET请求,设置5次重试请求</span>r2 <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>retries<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 发送GET请求,关闭重试请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'默认重试请求次数：'</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>retries<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'设置重试请求次数：'</span><span class="token punctuation">,</span>r1<span class="token punctuation">.</span>retries<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'关闭重试请求次数：'</span><span class="token punctuation">,</span>r2<span class="token punctuation">.</span>retries<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915161132014.png" alt="image-20210915161132014"></p><h3 id="处理响应内容"><a href="#处理响应内容" class="headerlink" title="处理响应内容"></a>处理响应内容</h3><h4 id="获取响应头"><a href="#获取响应头" class="headerlink" title="获取响应头"></a>获取响应头</h4><p>发送网络请求后，将返回一个HTTPResponse对象，通过该对象中的info()方法即可获取HTTP响应头信息，该信息为字典（dict）类型的数据，需要通过遍历才可以看到每条响应头信息</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>url <span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/get'</span>    <span class="token comment" spellcheck="true"># get请求测试地址</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 发送GET请求,默认重试请求</span>response_header <span class="token operator">=</span> r<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 获取响应头</span><span class="token keyword">for</span> key <span class="token keyword">in</span> response_header<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 循环遍历打印响应头信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span>response_header<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915161418633.png" alt="image-20210915161418633"></p><h4 id="JSON信息"><a href="#JSON信息" class="headerlink" title="JSON信息"></a>JSON信息</h4><p>对于服务器返回的JSON信息，我们可以将JSON数据转换为字典（dict）类型数据，接着使用指定的键值获取相应数据即可</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span><span class="token keyword">import</span> json       <span class="token comment" spellcheck="true"># 导入json模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>url <span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/post'</span>    <span class="token comment" spellcheck="true"># post请求测试地址</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">:</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 定义字典类型的请求参数</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>fields<span class="token operator">=</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送POST请求</span>j <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'unicode_escape'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将响应数据转换为字典类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据类型：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取form对应的数据：'</span><span class="token punctuation">,</span>j<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'获取country对应的数据：'</span><span class="token punctuation">,</span>j<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'country'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915162724502.png" alt="image-20210915162724502"></p><h4 id="二进制数据"><a href="#二进制数据" class="headerlink" title="二进制数据"></a>二进制数据</h4><p>如果响应数据为二进制数据，也可以进行处理。例如，响应数据为图片的二进制数据时，则可以使用open()函数将二进制数据转化为图片</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>url <span class="token operator">=</span> <span class="token string">'http://sck.rjkflm.com:666/spider/file/python.png'</span>  <span class="token comment" spellcheck="true"># 图片请求地址</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 打印二进制数据</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'python.png'</span><span class="token punctuation">,</span><span class="token string">'wb+'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 创建open对象</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">)</span>                          <span class="token comment" spellcheck="true"># 写入数据</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true"># 关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915162915558.png" alt="image-20210915162915558"></p><h2 id="复杂请求的发送"><a href="#复杂请求的发送" class="headerlink" title="复杂请求的发送"></a>复杂请求的发送</h2><h3 id="设置请求头"><a href="#设置请求头" class="headerlink" title="设置请求头"></a>设置请求头</h3><p>使用request()方法设置请求头信息时，只需要为headers参数指定一个有效的字典（dict）类型的请求头信息即可。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>url <span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/get'</span>    <span class="token comment" spellcheck="true"># get请求测试地址</span><span class="token comment" spellcheck="true"># 定义火狐浏览器请求头信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0'</span><span class="token punctuation">}</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送GET请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印返回内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915163405440.png" alt="image-20210915163405440"></p><h3 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h3><p>在没有特殊要求的情况下，可以将设置超时的参数与时间填写在request()方法或者是PoolManager()对象中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 关闭ssl警告</span>baidu_url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/'</span>    <span class="token comment" spellcheck="true"># 百度超时请求测试地址</span>python_url <span class="token operator">=</span> <span class="token string">'https://www.python.org/'</span>  <span class="token comment" spellcheck="true"># Python超时请求测试地址</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>                   <span class="token comment" spellcheck="true"># 创建连接池管理对象</span><span class="token keyword">try</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span>baidu_url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发送GET请求，并设置超时时间为0.01秒</span><span class="token keyword">except</span>  Exception <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'百度超时：'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span>http2 <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建连接池管理对象,并设置超时时间为0.1秒</span><span class="token keyword">try</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> http2<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> python_url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送GET请求</span><span class="token keyword">except</span>  Exception <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python超时：'</span><span class="token punctuation">,</span>error<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915163605724.png" alt="image-20210915163605724"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915163657545.png" alt="image-20210915163657545"></p><p>如果需要设置更加精确的超时，可以使用Timeout实例对象，在该对象中可以单独设置连接超时与读取超时。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3              <span class="token comment" spellcheck="true"># 导入urllib3模块</span><span class="token keyword">from</span> urllib3 <span class="token keyword">import</span> Timeout <span class="token comment" spellcheck="true"># 导入Timeout类</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭ssl警告</span>timeout <span class="token operator">=</span> Timeout<span class="token punctuation">(</span>connect<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> read<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置连接超时0.5秒，读取超时0.1秒</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span>timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'https://www.python.org/'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者是</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3              <span class="token comment" spellcheck="true"># 导入urllib3模块</span><span class="token keyword">from</span> urllib3 <span class="token keyword">import</span> Timeout <span class="token comment" spellcheck="true"># 导入Timeout类</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭ssl警告</span>timeout <span class="token operator">=</span> Timeout<span class="token punctuation">(</span>connect<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> read<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置连接超时0.5秒，读取超时0.1秒</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建连接池管理对象</span>http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'https://www.python.org/'</span>，timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置代理IP"><a href="#设置代理IP" class="headerlink" title="设置代理IP"></a>设置代理IP</h3><p>在设置代理IP时需要创建ProxyManager对象，在该对象中最好填写两个参数：</p><ul><li>一个是proxy_url，表示需要使用的代理IP；</li><li>另一个参数是headers，用于模拟浏览器请求，避免被后台服务器发现</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span>url <span class="token operator">=</span> <span class="token string">"http://httpbin.org/ip"</span>            <span class="token comment" spellcheck="true"># 代理IP请求测试地址</span><span class="token comment" spellcheck="true"># 定义火狐浏览器请求头信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:77.0) Gecko/20100101 Firefox/77.0'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 创建代理管理对象</span>proxy <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>ProxyManager<span class="token punctuation">(</span><span class="token string">'http://120.27.110.143:80'</span><span class="token punctuation">,</span>headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>r <span class="token operator">=</span> proxy<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 打印返回结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>request()方法提供了两种比较常用的文件上传方式：</p><ul><li>第一种是通过fields参数以元组的形式分别指定文件名，文件内容以及文件类型。这种方式适合上传文本文件时使用。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span><span class="token keyword">import</span> json       <span class="token comment" spellcheck="true"># 导入json模块</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打开文本文件</span>  data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 读取文件</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建连接池管理对象</span><span class="token comment" spellcheck="true"># 发送网络请求</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span> <span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span>fields<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'filefield'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'example.txt'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>files <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'files'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 获取上传文件内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>                                         <span class="token comment" spellcheck="true"># 打印上传文本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915164620792.png" alt="image-20210915164620792"></p><ul><li>第二种是在request()方法中指定body参数，该参数所对应的值为图片的二进制数据，然后还需要使用headers参数为其指定文件类型。这种方式适合上传图片等二进制文件时使用。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib3    <span class="token comment" spellcheck="true"># 导入urllib3模块</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'python.jpg'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开图片文件</span>  data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 读取文件</span>http <span class="token operator">=</span> urllib3<span class="token punctuation">.</span>PoolManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建连接池管理对象</span><span class="token comment" spellcheck="true"># 发送请求</span>r <span class="token operator">=</span> http<span class="token punctuation">.</span>request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'http://httpbin.org/post'</span><span class="token punctuation">,</span>body <span class="token operator">=</span> data<span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'image/jpeg'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 打印返回结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210915164809414.png" alt="image-20210915164809414"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请求模块Urllib</title>
      <link href="/qing-qiu-mo-kuai-urllib.html"/>
      <url>/qing-qiu-mo-kuai-urllib.html</url>
      
        <content type="html"><![CDATA[<h2 id="Urllib简介"><a href="#Urllib简介" class="headerlink" title="Urllib简介"></a>Urllib简介</h2><p>Python3中Urllib包含多个功能子模块，具体内容如下：</p><ul><li>urllib.request：用于实现基本HTTP请求的模块</li><li>urllib.error：异常处理模块，如果在发送网络请求时出现了错误，可以捕获异常进行异常的有效处理</li><li>urllib.parse：用于解析URL的模块</li><li>urllib.robotparser：用于解析robots.txt文件，判断网站是否可以爬取信息</li></ul><h2 id="使用urlopen-方法发送请求"><a href="#使用urlopen-方法发送请求" class="headerlink" title="使用urlopen()方法发送请求"></a>使用urlopen()方法发送请求</h2><p>urllib.request模块提供了urlopen()方法，用于实现最基本的HTTP请求，然后接收服务端所返回的响应数据。urlopen()方法的语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>None<span class="token punctuation">,</span><span class="token punctuation">[</span>timeout<span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">,</span>cafile<span class="token operator">=</span>None<span class="token punctuation">,</span>capath<span class="token operator">=</span>None<span class="token punctuation">,</span>cadefault<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>context<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>url：需要访问网站的URL完整地址</li><li>data：该参数默认为None，通过该参数确认请求方式，如果是None，表示请求方式为GET，否则请求方式为POST，在发送POST请求时，参数data需要以字典形式的数据作为参数值，并且需要将字典类型的参数值转换为字节类型的数据才可以实现POST请求</li><li>timeout：以秒为单位，设置超时</li><li>cafile,capath：指定一组HTTPS请求受信任的CA证书，cafile指定包含CA证书的单个文件，capath指定证书文件的目录</li><li>cadefault：CA证书默认值</li><li>context：描述SSL选项的实例</li></ul><h3 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h3><p>使用urlopen()方法实现一个网络请求时，所返回的是一个”http.client.HTTPResponse”对象。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestresponse <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'响应数据类型为：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><blockquote><p>响应数据类型为：&lt;class ‘http.client.HTTPResponse’&gt;</p></blockquote><p><strong>HTTPResponse对象常用的方法与属性获取信息</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request    <span class="token comment" spellcheck="true"># 导入request子模块</span>url <span class="token operator">=</span> <span class="token string">'https://www.python.org/'</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'响应状态码为：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'响应头所有信息为：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'响应头指定信息为：'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'Accept-Ranges'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读取HTML代码并进行utf-8解码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Python官网HTML代码如下：\n'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914113417631.png" alt="image-20210914113417631"></p><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><p><strong>使用urlopen()方法发送POST请求</strong></p><p>urlopen()方法在默认的情况下发送的是GET请求，如果需要发送POST请求，可以为其设置data参数，该参数是bytes类型，所以需要使用bytes()方法将参数值进行数据类型的转换。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request    <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse      <span class="token comment" spellcheck="true"># 导入urllib.parse模块</span>url <span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/post'</span>    <span class="token comment" spellcheck="true"># post请求测试地址</span><span class="token comment" spellcheck="true"># 将表单数据转换为bytes类型，并设置编码方式为utf-8</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'hello'</span><span class="token punctuation">:</span><span class="token string">'python'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取HTML代码并进行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914114023925.png" alt="image-20210914114023925"></p><h3 id="设置网络超时"><a href="#设置网络超时" class="headerlink" title="设置网络超时"></a>设置网络超时</h3><p>urlopen()方法中的timeout参数用于设置请求超时。如果遇到了超时异常，爬虫程序将在此处停止。所以在实际开发中开发者可以将超时异常捕获，然后处理下面的爬虫任务。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request  <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error  <span class="token comment" spellcheck="true"># 导入urllib.error模块</span><span class="token keyword">import</span> socket  <span class="token comment" spellcheck="true"># 导入socket模块</span>url <span class="token operator">=</span> <span class="token string">'https://www.python.org/'</span>  <span class="token comment" spellcheck="true"># 请求地址</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 发送网络请求,设置超时时间为0.1秒</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取HTML代码并进行utf-8解码</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> error<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 处理异常</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>error<span class="token punctuation">.</span>reason<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断异常是否为超时异常</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前任务已超时，即将执行下一任务！'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914141703248.png" alt="image-20210914141703248"></p><h2 id="复杂的网络请求"><a href="#复杂的网络请求" class="headerlink" title="复杂的网络请求"></a>复杂的网络请求</h2><p><code>urlopen()方法可以发送一个最基本的网络请求，但这并不是一个完整的网络请求。</code>如果要构建一个完整的网络请求，还需要再请求中添加Headers、Cookies以及代理IP等内容。Request类则可以构建一个多功能的请求对象，其格式如下：</p><pre class="line-numbers language-python"><code class="language-python">urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>None<span class="token punctuation">,</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>origin_req_host<span class="token operator">=</span>None<span class="token punctuation">,</span>unverifiable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>method<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>url：需要访问网站的URL完整地址</li><li>data：该参数默认为None，通过该参数确认请求方式，如果是None，表示请求方式为GET，否则请求方式为POST，在发送POST请求时，参数data需要以字典形式的数据作为参数值，并且需要将字典类型的参数值转换为字节类型的数据才可以实现POST请求</li><li>headers：设置请求头部信息，该参数为字典类型。添加请求头部信息最常见的用法就是修改User-Agent来伪装成浏览器</li><li>origin_req_host：用于设置请求方的host名称或者是IP</li><li>unverifiable：用于设置页面是否需要验证，默认是False</li><li>method：用于设置请求方式，如GET、POST等，默认为GET请求</li></ul><h3 id="设置请求头"><a href="#设置请求头" class="headerlink" title="设置请求头"></a>设置请求头</h3><p>设置请求头之前，我们需要从浏览器找到一个有效的请求头信息。步骤如下：</p><ol><li>打开浏览器</li><li>F12进入开发者工具</li><li>选择Network选项</li><li>从请求列表中选择一个请求信息并在请求信息的Headers选项中找到请求头信息。</li></ol><p>如果需要设置请求头信息，首先通过Request类构造一个带有headers请求信息的Request对象，然后为urlopen()方法传入Request对象，在进行网络请求的发送。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request  <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true"># 导入urllib.parse模块</span>url <span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/post'</span>  <span class="token comment" spellcheck="true"># 请求地址</span><span class="token comment" spellcheck="true"># 定义请求头信息</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 将表单数据转换为bytes类型，并设置编码方式为utf-8</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'hello'</span><span class="token punctuation">:</span><span class="token string">'python'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Request对象</span>r <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取HTML代码并进行utf-8解码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914144137317.png" alt="image-20210914144137317"></p><h3 id="Cookies的获取与设置"><a href="#Cookies的获取与设置" class="headerlink" title="Cookies的获取与设置"></a>Cookies的获取与设置</h3><p><code>Cookies是服务器向客户端返回响应数据时留下的标记，当客户端再次访问服务器时将携带这个标记</code>。一般在实现登录一个页面时，<code>登录成功后，会在浏览器的Cookie中保留一些信息</code>，当浏览器再次访问时会携带Cookie中的信息，经过服务器核对后可以确认当前用户已经登录过，此时可以直接将登陆后数据返回。</p><p>在使用爬虫获取网页登录后的数据时，除了模拟登陆以外，还可以获取登录后的Cookie，然后利用这个Cookie再次发送请求，就可以以登录用户的身份获取到数据。</p><h4 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h4><p>首先<code>获取登录请求地址</code>然后<code>通过POST请求的方式将正确的账号密码发送到服务端验证</code></p><ul><li>打开地址（<a href="http://site2.rjkflm.com:666/），然后点击“登录”按钮进行登录" target="_blank" rel="noopener">http://site2.rjkflm.com:666/），然后点击“登录”按钮进行登录</a></li><li>按下F12进入开发者工具，点击Network按钮并选择“保留日志”选项</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914150331809.png" alt="image-20210914150331809"></p><ul><li>输入正确账号密码登录，接着可以在F12开发者工具下看到名为<strong>chklogin.html</strong>的网络请求信息</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914150454947.png" alt="image-20210914150454947"></p><ul><li>此外再此请求信息中可以找到表单数据，包含了账号密码信息</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914150709847.png" alt="image-20210914150709847"></p><ul><li>获取到请求地址和表单数据后，可通过urllib.request子模块中的POST请求方式实现模拟登录</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request    <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse      <span class="token comment" spellcheck="true"># 导入urllib.parse模块</span>url <span class="token operator">=</span> <span class="token string">'http://site2.rjkflm.com:666/index/index/chklogin.html'</span>  <span class="token comment" spellcheck="true"># 登录请求地址</span><span class="token comment" spellcheck="true"># 将表单数据转换为bytes类型，并设置编码方式为utf-8</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Request对象</span>r <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>r<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取HTML代码并进行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914145904609.png" alt="image-20210914145904609"></p><hr><h4 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h4><p><strong>实现在模拟登录过程中获取Cookie信息</strong></p><ul><li>在模拟登录过程中获取Cookie信息时，首先需要创建一个CookieJar对象</li><li>然后生成Cookie处理器</li><li>接着创建opener对象</li><li>再通过opener.open()方法发送登录请求</li><li>登陆成功后获取Cookie内容</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request  <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse  <span class="token comment" spellcheck="true"># 导入urllib.parse模块</span><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar  <span class="token comment" spellcheck="true"># 导入http.cookiejar子模块</span><span class="token keyword">import</span> json            <span class="token comment" spellcheck="true"># 导入json模块</span>url <span class="token operator">=</span> <span class="token string">'http://site2.rjkflm.com:666/index/index/chklogin.html'</span>  <span class="token comment" spellcheck="true"># 登录请求地址</span><span class="token comment" spellcheck="true"># 将表单数据转换为bytes类型，并设置编码方式为utf-8</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>cookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 创建CookieJar对象</span>cookie_processor <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 生成cookie处理器</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>cookie_processor<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建opener</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 发送登录请求</span>response <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token keyword">if</span> response<span class="token operator">==</span><span class="token string">'登录成功！'</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> cookie<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 循环遍历cookie内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>i<span class="token punctuation">.</span>value<span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true"># 打印登录成功的cookie信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914151133300.png" alt="image-20210914151133300"></p><hr><p><strong>将Cookie信息保存为LWP格式文件</strong></p><p>将Cookie保存为指定的文件格式，例如LWP格式后，我们登录请求时可以直接读取文件中的Cookie信息即可。如果要将Cookie保存为LWP格式文件，我们需要先创建一个LWPCookieJar对象，然后通过cookie.save()方法将Cookie信息保存成文件。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request  <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse  <span class="token comment" spellcheck="true"># 导入urllib.parse模块</span><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar  <span class="token comment" spellcheck="true"># 导入http.cookiejar子模块</span><span class="token keyword">import</span> json            <span class="token comment" spellcheck="true"># 导入json模块</span>url <span class="token operator">=</span> <span class="token string">'http://site2.rjkflm.com:666/index/index/chklogin.html'</span>  <span class="token comment" spellcheck="true"># 登录请求地址</span><span class="token comment" spellcheck="true"># 将表单数据转换为bytes类型，并设置编码方式为utf-8</span>data <span class="token operator">=</span> bytes<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'mrsoft'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>cookie_file <span class="token operator">=</span> <span class="token string">'cookie.txt'</span>  <span class="token comment" spellcheck="true"># 保存cookie文件</span>cookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span>cookie_file<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建LWPCookieJar对象</span><span class="token comment" spellcheck="true"># 生成cookie处理器</span>cookie_processor <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建opener对象</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>cookie_processor<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 发送网络请求</span>response <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span><span class="token keyword">if</span> response<span class="token operator">==</span><span class="token string">'登录成功！'</span><span class="token punctuation">:</span>    cookie<span class="token punctuation">.</span>save<span class="token punctuation">(</span>ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 保存Cookie文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914152017444.png" alt="image-20210914152017444"></p><hr><h4 id="使用Cookie"><a href="#使用Cookie" class="headerlink" title="使用Cookie"></a>使用Cookie</h4><p><strong>使用Cookie信息登录并获取页面信息</strong></p><p>我们可以通过cookie.load()方法来读取本地的Cookie文件，然后再次向登录后的页面发送请求。</p><p>从浏览器找到登录后的页面的请求地址，接下来使用cookie.txt文件中的Cookie信息发送请求即可获取到页面信息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request  <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar  <span class="token comment" spellcheck="true"># 导入http.cookiejar子模块</span><span class="token comment" spellcheck="true"># 登录后页面的请求地址</span>url <span class="token operator">=</span> <span class="token string">'http://site2.rjkflm.com:666/index/index/index.html'</span>cookie_file <span class="token operator">=</span> <span class="token string">'cookie.txt'</span>   <span class="token comment" spellcheck="true"># cookie文件</span>cookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建LWPCookieJar对象</span><span class="token comment" spellcheck="true"># 读取cookie文件内容</span>cookie<span class="token punctuation">.</span>load<span class="token punctuation">(</span>cookie_file<span class="token punctuation">,</span>ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成cookie处理器</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建opener对象</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印登录后页面的html代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914152738358.png" alt="image-20210914152738358"></p><h3 id="设置代理IP"><a href="#设置代理IP" class="headerlink" title="设置代理IP"></a>设置代理IP</h3><p>目前存在很多<code>反爬虫技术</code>，其中最为常见的就是通过客户端的IP判断当前请求是否为爬虫。因为如果在短时间内并且是同一个IP访问了后台服务器大量数据，此时服务器将该客户端视为爬虫。当服务器发现爬虫在访问数据时，就会对当前客户端所使用的IP进行临时或永久的禁用，这样使用已禁用的IP是无法获取到后台数据的。</p><p>解决这样的反爬虫技术就需要对网络请求设置代理IP，最好是每发送一次请求就设置一个新的代理IP，让后台服务器无法分辨是谁在获取大量数据。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request  <span class="token comment" spellcheck="true"># 导入urllib.request模块</span>url<span class="token operator">=</span> <span class="token string">'https://www.httpbin.org/get'</span>   <span class="token comment" spellcheck="true"># 网络请求地址</span><span class="token comment" spellcheck="true"># 创建代理IP</span>proxy_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'58.220.95.114:10053'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建opener对象</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>proxy_handler<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送网络请求</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印返回内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>Urllib模块中的urllib.error子模块包含了URLError和HTTPError两个比较重要的异常类。</p><p><strong>调用reason属性处理URLError异常</strong></p><p>在URLError类中提供了一个reason属性，可以通过这个属性了解出现异常的错误原因。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request    <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error      <span class="token comment" spellcheck="true"># 导入urllib.error模块</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 向不存在的网络地址发送请求</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://site2.rjkflm.com:666/123index.html'</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 捕获异常信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 打印异常原因</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914154211751.png" alt="image-20210914154211751"></p><hr><p><strong>HTTPError类捕获异常</strong></p><p>HTTPError类是URLError类的子类，主要用于处理HTTP请求所出现的异常，该类有以下三个属性：</p><ol><li>code：返回HTTP状态码</li><li>reason：返回错误原因</li><li>headers：返回请求头</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request    <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error      <span class="token comment" spellcheck="true"># 导入urllib.error模块</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 向不存在的网络地址发送请求</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://site2.rjkflm.com:666/123index.html'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 捕获异常信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'状态码为：'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># 打印状态码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'异常信息为：'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 打印异常原因</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求头信息如下：\n'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 打印请求头</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914154455475.png" alt="image-20210914154455475"></p><hr><p><strong>双重异常捕获</strong></p><p>由于HTTPError是URLError的子类，有时HTTPError类会有捕获不到的异常，所以可以先捕获HTTPError的异常，然后再去捕获父类URLError的异常，这样起到双保险作用。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request    <span class="token comment" spellcheck="true"># 导入urllib.request模块</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>error      <span class="token comment" spellcheck="true"># 导入urllib.error模块</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 向不存在的网络地址发送请求</span>    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'https://www.python.org/'</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> error<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># HTTPError捕获异常信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'状态码为：'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>code<span class="token punctuation">)</span>                      <span class="token comment" spellcheck="true"># 打印状态码</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'HTTPError异常信息为：'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>reason<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 打印异常原因</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求头信息如下：\n'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 打印请求头</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>URLError <span class="token keyword">as</span> error<span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># URLError捕获异常信息</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'URLError异常信息为：'</span><span class="token punctuation">,</span>error<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914154940261.png" alt="image-20210914154940261"></p><h2 id="解析链接"><a href="#解析链接" class="headerlink" title="解析链接"></a>解析链接</h2><p>Urllib模块中提供了parse子模块，主要用于解析URL，可以实现URL的<code>拆分</code>或者<code>组合</code>。它支持多种协议的URL处理，如：file、ftp、gopher、hdl、http、https、imap、mailto、mms、news、nntp、prospero、rsync、rtsp、rtspu、sftp、shttp、sip、sips、snews、svn、svn+ssh、telnet、wais、ws、wss。</p><h3 id="拆分URL"><a href="#拆分URL" class="headerlink" title="拆分URL"></a>拆分URL</h3><h4 id="urlparse-方法"><a href="#urlparse-方法" class="headerlink" title="urlparse()方法"></a>urlparse()方法</h4><p>parse子模块中提供了urlparse()方法，用于实现将URL分解成不同的部分，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>urlstring<span class="token punctuation">,</span>scheme <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>allow_fragments<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>urlstring：需要拆分的URL，该参数为必选参数</li><li>scheme：可选参数，表示需要设置的默认协议。如果需要拆分的URL中没有协议（如https、http等），可以通过该参数设置一个默认的协议，该参数的默认值为空字符串</li><li>allow_fragments：可选参数，如果该参数设置为Fasle，表示忽略fragment这部分内容，默认为True</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>parse_result <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span><span class="token string">'https://docs.python.org/3/library/urllib.parse.html'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>parse_result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>parse_result<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 打印拆分后的结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914160155292.png" alt="image-20210914160155292"></p><blockquote><p>注：从上述结果可以看出，调用urlparse()方法将返回一个ParseResult对象，此对象由六部分组成：</p><ul><li>scheme表示协议</li><li>netloc表示域名</li><li>path表示访问的路径</li><li>params表示参数</li><li>query表示查询条件</li><li>fragment表示片段标识符</li></ul></blockquote><p>除了直接返回ParseResult对象外，还可以直接返回对象中的每个属性值</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scheme的值为：'</span>，parse_result<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'netloc：'</span>，parse_result<span class="token punctuation">.</span>netloc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'path：'</span>，parse_result<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'params的值为：'</span>，parse_result<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'query的值为：'</span>，parse_result<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fragment的值为：'</span>，parse_result<span class="token punctuation">.</span>fragment<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="urlspilt-方法"><a href="#urlspilt-方法" class="headerlink" title="urlspilt()方法"></a>urlspilt()方法</h4><p>urlspilt()方法和urlparse()方法类似，都可以实现URL拆分。<code>但是urlspilt()方法不再单独拆分params这部分内容，而是将params合并到path中，所以返回的结果只有5部分内容，并且返回的数据类型为SplitResult</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span><span class="token comment" spellcheck="true"># 需要拆分的URL</span>url <span class="token operator">=</span> <span class="token string">'https://docs.python.org/3/library/urllib.parse.html'</span><span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 使用urlsplit()方法拆分URL</span><span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 使用urlparse()方法拆分URL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914161023230.png" alt="image-20210914161023230"></p><blockquote><p>urlspilt()方法拆分后可以通过索引进行值的获取</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span><span class="token comment" spellcheck="true"># 需要拆分的URL</span>url <span class="token operator">=</span> <span class="token string">'https://docs.python.org/3/library/urllib.parse.html'</span>urlsplit <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 使用urlsplit()方法拆分URL</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlsplit<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 属性获取拆分后协议值</span><span class="token keyword">print</span><span class="token punctuation">(</span>urlsplit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 索引获取拆分后协议值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组合URL"><a href="#组合URL" class="headerlink" title="组合URL"></a>组合URL</h3><h4 id="urlunparse-方法"><a href="#urlunparse-方法" class="headerlink" title="urlunparse()方法"></a>urlunparse()方法</h4><p>parse子模块提供了urlunparse()方法实现URL组合，其格式如下：</p><pre class="line-numbers language-python"><code class="language-python">urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlunparse<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>parts：表示用于组合URL的可迭代对象</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>list_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https'</span><span class="token punctuation">,</span><span class="token string">'docs.python.org'</span><span class="token punctuation">,</span><span class="token string">'/3/library/urllib.parse.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">]</span>tuple_url <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">,</span><span class="token string">'docs.python.org'</span><span class="token punctuation">,</span><span class="token string">'/3/library/urllib.parse.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>dict_url <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'scheme'</span><span class="token punctuation">:</span><span class="token string">'https'</span><span class="token punctuation">,</span><span class="token string">'netloc'</span><span class="token punctuation">:</span><span class="token string">'docs.python.org'</span><span class="token punctuation">,</span><span class="token string">'path'</span><span class="token punctuation">:</span><span class="token string">'/3/library/urllib.parse.html'</span><span class="token punctuation">,</span><span class="token string">'params'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'query'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'fragment'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'组合列表类型的URL：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlunparse<span class="token punctuation">(</span>list_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'组合元组类型的URL：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlunparse<span class="token punctuation">(</span>tuple_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'组合字典类型的URL：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlunparse<span class="token punctuation">(</span>dict_url<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914161848182.png" alt="image-20210914161848182"></p><blockquote><p>注意：使用urlunparse()方法组合URL时，需要注意可迭代参数的元素个数必须是<strong><code>6个</code></strong>，如果不足6个则会报错</p></blockquote><h4 id="urlunsplit-方法"><a href="#urlunsplit-方法" class="headerlink" title="urlunsplit()方法"></a>urlunsplit()方法</h4><p>urlunsplit()与urlunparse()一样，都是用于组合URL，其参数也是一个可迭代对象，<code>但是urlunsplit()方法参数中的元素必须是5个</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>list_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https'</span><span class="token punctuation">,</span><span class="token string">'docs.python.org'</span><span class="token punctuation">,</span><span class="token string">'/3/library/urllib.parse.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">]</span>tuple_url <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'https'</span><span class="token punctuation">,</span><span class="token string">'docs.python.org'</span><span class="token punctuation">,</span><span class="token string">'/3/library/urllib.parse.html'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>dict_url <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'scheme'</span><span class="token punctuation">:</span><span class="token string">'https'</span><span class="token punctuation">,</span><span class="token string">'netloc'</span><span class="token punctuation">:</span><span class="token string">'docs.python.org'</span><span class="token punctuation">,</span><span class="token string">'path'</span><span class="token punctuation">:</span><span class="token string">'/3/library/urllib.parse.html'</span><span class="token punctuation">,</span><span class="token string">'query'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'fragment'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'组合列表类型的URL：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlunsplit<span class="token punctuation">(</span>list_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'组合元组类型的URL：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlunsplit<span class="token punctuation">(</span>tuple_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'组合字典类型的URL：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlunsplit<span class="token punctuation">(</span>dict_url<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914162215186.png" alt="image-20210914162215186"></p><h3 id="连接URL"><a href="#连接URL" class="headerlink" title="连接URL"></a>连接URL</h3><p>parse子模块提供了urljoin()方法来实现URL的连接，其语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>base<span class="token punctuation">,</span>url<span class="token punctuation">,</span>allow_fragments<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li>base：表示基础链接</li><li>url：表示新的链接</li><li>allow_fragment：可选参数，如果该参数设置为Fasle，表示忽略fragment这部分内容，默认为True</li></ul><p>urljoin()方法在实现URL连接时，base参数只可以设置scheme、netloc以及path三部分内容，如果第二个参数（URL）是一个不完整的URL，那么第二个参数的值会添加至第一个参数（base）的后面，并自动添加斜杠（/）。如果第二个参数（URL）是一个不完整的URL，将直接返回第二个参数所对应的值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>base_url <span class="token operator">=</span> <span class="token string">'https://docs.python.org'</span>   <span class="token comment" spellcheck="true"># 定义基础链接</span><span class="token comment" spellcheck="true"># 第二参数不完整时</span><span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span><span class="token string">'3/library/urllib.parse.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二参数完整时，直接返回第二参数的链接</span><span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urljoin<span class="token punctuation">(</span>base_url<span class="token punctuation">,</span><span class="token string">'https://docs.python.org/3/library/urllib.parse.html#url-parsing'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914163221488.png" alt="image-20210914163221488"></p><h3 id="URL的编码与解码"><a href="#URL的编码与解码" class="headerlink" title="URL的编码与解码"></a>URL的编码与解码</h3><p>URL编码是GET请求中比较常见的，是将请求地址中的参数进行编码，尤其是对于中文参数。</p><p>parse子模块提供了<code>urlencode()方法和quote()方法用于实现URL编码</code>，而<code>unquote()方法可以实现加密后的URL解码</code></p><h4 id="urlencode-方法"><a href="#urlencode-方法" class="headerlink" title="urlencode()方法"></a>urlencode()方法</h4><p>urlencode()方法接收一个<code>字典类型的值</code>，所以要想将URL进行编码需要先将请求参数定义为字典类型，然后再调用urlencode()方法进行请求参数的编码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>base_url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get?'</span>    <span class="token comment" spellcheck="true"># 定义基础链接</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Jack'</span><span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">:</span><span class="token string">'中国'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 定义字典类型的请求参数</span>url <span class="token operator">=</span> base_url<span class="token operator">+</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>params<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 连接请求地址</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'编码后的请求地址为：'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914163813228.png" alt="image-20210914163813228"></p><blockquote><p>地址中的“%E4%B8%AD%E5%9B%BD&amp;”是对中文（中国）转码后的效果</p></blockquote><h4 id="quote-方法"><a href="#quote-方法" class="headerlink" title="quote()方法"></a>quote()方法</h4><p>quote()方法与urlencode()方法功能类似，但是<code>urlencode()方法只能接收字典类型的参数</code>，而<code>quote()方法则可以将一个字符串进行编码</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>base_url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get?country='</span>    <span class="token comment" spellcheck="true"># 定义基础链接</span>url <span class="token operator">=</span> base_url<span class="token operator">+</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">'中国'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 字符串编码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'编码后的请求地址为：'</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914164210664.png" alt="image-20210914164210664"></p><h4 id="unquote-方法"><a href="#unquote-方法" class="headerlink" title="unquote()方法"></a>unquote()方法</h4><p>unquote()方法可以将编码后的URL字符串逆向解码，无论是通过urlencode()方法还是quote()方法编码的URL字符串都可以使用unquote()方法进行解码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>u <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'country'</span><span class="token punctuation">:</span><span class="token string">'中国'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用urlencode编码</span>q<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">'country=中国'</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 使用quote编码</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'urlencode编码后结果为：'</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'quote编码后结果为：'</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对urlencode解码：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'对quote解码：'</span><span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914164350317.png" alt="image-20210914164350317"></p><h3 id="URL参数的转换"><a href="#URL参数的转换" class="headerlink" title="URL参数的转换"></a>URL参数的转换</h3><p><strong>使用parse_qs()方法将参数转换为字典类型</strong></p><p>请求地址的URL是一个字符串，如果将其中的参数转换为字典类型：</p><ul><li>可以先使用urlsplit()方法拆分URL</li><li>然后再调用query属性获取URL中的参数</li><li>最后使用parse_qs()方法将参数转换为字典类型的数据</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span><span class="token comment" spellcheck="true"># 定义一个请求地址</span>url <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get?name=Jack&amp;country=%E4%B8%AD%E5%9B%BD&amp;age=30'</span>q <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>query   <span class="token comment" spellcheck="true"># 获取需要的参数</span>q_dict <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>parse_qs<span class="token punctuation">(</span>q<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 将参数转换为字典类型的数据</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据类型为：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>q_dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换后的数据：'</span><span class="token punctuation">,</span>q_dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914164731554.png" alt="image-20210914164731554"></p><hr><p><strong>使用parse_qsl()方法将参数转换为列表</strong></p><p>除了parse_qs()方法外，parse_qsl()方法也可以将URL参数进行转换，不过parse_qsl()方法是将字符串参数转换为元组所组成的列表</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse    <span class="token comment" spellcheck="true">#导入urllib.parse模块</span>str_params <span class="token operator">=</span> <span class="token string">'name=Jack&amp;country=%E4%B8%AD%E5%9B%BD&amp;age=30'</span>  <span class="token comment" spellcheck="true"># 字符串参数</span>list_params <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>parse_qsl<span class="token punctuation">(</span>str_params<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将字符串参数转为元组所组成的列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据类型为：'</span><span class="token punctuation">,</span>type<span class="token punctuation">(</span>list_params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换后的数据：'</span><span class="token punctuation">,</span>list_params<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序执行结果：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914164914771.png" alt="image-20210914164914771"></p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言指针：从底层原理到花式技巧</title>
      <link href="/c-yu-yan-zhi-zhen-cong-di-ceng-yuan-li-dao-hua-shi-ji-qiao.html"/>
      <url>/c-yu-yan-zhi-zhen-cong-di-ceng-yuan-li-dao-hua-shi-ji-qiao.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>原文地址：<a href="https://mp.weixin.qq.com/s/dLAfXspzc7owkaoQllu1GA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dLAfXspzc7owkaoQllu1GA</a></p></blockquote><p>如果问C语言中最重要、威力最大的概念是什么，答案必将是<code>指针</code>！威力大，意味着使用<code>方便、高效</code>，同时也意味着<code>语法复杂、容易出错</code>。<strong>指针用的好，可以极大的提高代码执行效率、节约系统资源；如果用的不好，程序中将会充满陷阱、漏洞。</strong></p><p>这篇文章，我们就来聊聊指针。从最底层的<code>内存存储空间</code>开始，一直到应用层的各种指针使用技巧，循序渐进、抽丝剥茧，以最直白的语言进行讲解，让你一次看过瘾。</p><p>说明：为了方便讲解和理解，文中配图的内存空间的地址是随便写的，在实际计算机中是要遵循<code>地址对齐方式</code>的。</p><h2 id="变量与指针的本质"><a href="#变量与指针的本质" class="headerlink" title="变量与指针的本质"></a>变量与指针的本质</h2><h4 id="1-内存地址"><a href="#1-内存地址" class="headerlink" title="1. 内存地址"></a>1. 内存地址</h4><p>我们编写一个程序源文件之后，编译得到的二进制可执行文件存放在电脑的硬盘上，此时它是一个<code>静态的文件</code>，一般称之为<code>程序</code>。</p><p>当这个程序被启动的时候，<code>操作系统</code>将会做下面几件事情：</p><blockquote><ol><li>把程序的内容(代码段、数据段)从硬盘复制到内存中；</li><li>创建一个数据结构PCB(进程控制块)，来描述这个程序的各种信息(例如：使用的资源，打开的文件描述符…);</li><li>在代码段中定位到入口函数的地址，让CPU从这个地址开始执行。</li></ol></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210914165935506.png" alt="image-20210914165935506"></p><p>当程序开始被执行时，就变成一个<code>动态的状态</code>，一般称之为<code>进程</code>。</p><blockquote><p>内存分为：物理内存和虚拟内存。操作系统对物理内存进行管理、包装，我们开发者面对的是操作系统提供的虚拟内存。<br>这2个概念不妨碍文章的理解，因此就统一称之为内存。</p></blockquote><p>在我们的程序中，通过一个<code>变量名</code>来定义变量、使用变量。<strong>变量本身是一个确确实实存在的东西，变量名是一个抽象的概念，用来代表这个变量。</strong>就比如：我是一个实实在在的人，是客观存在与这个地球上的，道哥是我给自己起的一个名字，这个名字是任意取得，只要自己觉得好听就行，如果我愿意还可以起名叫：鸟哥、龙哥等等。</p><p>那么，我们定义一个变量之后，这个变量放在哪里呢？那就是<code>内存的数据区</code>。内存是一个很大的存储区域，被操作系统划分为一个一个的小空间，<code>操作系统通过地址来管理内存</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908215041251.png" alt="image-20210908215041251"></p><p>内存中的最小存储单位是<code>字节(8个bit)</code>，一个内存的完整空间就是由这一个一个的字节连续组成的。在上图中，每一个小格子代表一个字节，但是好像大家在书籍中没有这么来画内存模型的，更常见的是下面这样的画法：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908215327622.png" alt="image-20210908215327622"></p><p>也就是把<code>连续的4个字节的空间</code>画在一起，这样就便于表述和理解，特别是深入到代码对齐相关知识时更容易理解。(我认为根本原因应该是：大家都这么画，已经看顺眼了~~)</p><h4 id="2-32位与64位系统"><a href="#2-32位与64位系统" class="headerlink" title="2. 32位与64位系统"></a>2. 32位与64位系统</h4><p>我们平时所说的计算机是32位、64位，指的是计算机的CPU中寄存器的最大存储长度，如果寄存器中最大存储32bit的数据，就称之为32位系统。</p><p>在计算机中，<code>数据一般都是在硬盘、内存和寄存器之间进行来回存取</code>。CPU通过3种总线把各组成部分联系在一起：<code>地址总线、数据总线和控制总线</code>。<code>地址总线的宽度决定了CPU的寻址能力，也就是CPU能达到的最大地址范围。</code></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908215728701.png" alt="image-20210908215728701"></p><p>刚才说了，内存是通过地址来管理的，那么CPU想从内存中的某个地址空间上存取一个数据，那么CPU就需要在地址总线上输出这个存储单元的地址。假如地址总线的宽度是<code>8位</code>，能表示的最大地址空间就是<code>256个字节</code>，能找到内存中最大的存储单元是<code>255这个格子(从0开始)</code>。即使内存条的实际空间是2G字节，CPU也没法使用后面的内存地址空间。如果地址总线的宽度是<code>32位</code>，那么能表示的最大地址就是2的32次方，也就是<code>4G字节</code>的空间。</p><p><em>【注意】</em>：这里只是描述地址总线的概念，实际的计算机中地址计算方式要复杂的多，比如：虚拟内存中采用分段、分页、偏移量来定位实际的物理内存，在分页中还有大页、小页之分，感兴趣的同学可以自己查一下相关资料。</p><h4 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h4><p>我们在C程序中使用变量来“代表”一个数据，使用函数名来“代表”一个函数，变量名和函数名是程序员使用的助记符。变量和函数最终是要放到内存中才能被CPU使用的，而内存中所有的信息(代码和数据)都是以二进制的形式来存储的，计算机根据就不会从格式上来区分哪些是代码、哪些是数据。<code>CPU在访问内存的时候需要的是地址，而不是变量名、函数名。</code></p><p><strong>问题来了</strong>：在程序代码中使用变量名来指代变量，而变量在内存中是根据地址来存放的，这二者之间如何映射(关联)起来的？</p><p>答案是：<code>编译器！</code>编译器在编译文本格式的C程序文件时，会根据目标运行平台(就是编译出的二进制程序运行在哪里？是x86平台的电脑？还是ARM平台的开发板？)来安排程序中的各种地址，例如：加载到内存中的地址、代码段的入口地址等等，同时<code>编译器也会把程序中的所有变量名，转成该变量在内存中的存储地址。</code></p><p>变量有2个重要属性：<code>变量的类型和变量的值</code>。</p><p>示例：代码中定义了一个变量</p><pre><code>int a = 20;</code></pre><p>类型是int型，值是20。这个变量在内存中的存储模型为：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908220525821.png" alt="image-20210908220525821"></p><p>我们在代码中使用<code>变量名a</code>，在程序执行的时候就表示使用<code>0x11223344地址</code>所对应的那个存储单元中的数据。因此，可以理解为<code>变量名a就等价于这个地址0x11223344</code>。换句话说，如果我们可以提前知道编译器把变量a安排在地址0x11223344这个单元格中，我们就可以在程序中直接用这个地址值来操作这个变量。</p><p>在上图中，变量a的值为20，在内存中占据了4个格子的空间，也就是4个字节。为什么是4个字节呢？在<code>C标准中并没有规定每种数据类型的变量一定要占用几个字节</code>，这是与具体的机器、编译器有关。</p><p>比如：<code>32位</code>的编译器中：</p><blockquote><p>char: 1个字节；<br>short int: 2个字节；<br>int: 4个字节；<br>long: 4个字节。</p></blockquote><p>比如：<code>64位</code>的编译器中：</p><blockquote><p>char: 1个字节；<br>short int: 2个字节；<br>int: 4个字节；<br>long: 8个字节。</p></blockquote><p>为了方便描述，下面都以32位为例，也就是int型变量在内存中占据4个字节。</p><p>另外，0x11223344，0x11223345，0x11223346，0x11223347这连续的、从低地址到高地址的4个字节用来存储变量a的数值20。在图示中，使用十六进制来表示，十进制数值20转成16进制就是：0x00000014，所以从开始地址依次存放0x00、0x00、0x00、0x14这4个字节(存储顺序涉及到大小端的问题，不影响文本理解)。</p><p>根据这个图示，如果在程序中想知道变量a存储在内存中的什么位置，可以使用取地址操作符&amp;，如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&amp;a = 0x%x \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这句话将会打印出：<code>&amp;a = 0x11223344</code>。</p><p>考虑一下，在32位系统中：指针变量占用几个字节？</p><h4 id="4-指针变量"><a href="#4-指针变量" class="headerlink" title="4. 指针变量"></a>4. 指针变量</h4><p>指针变量可以分2个层次来理解：</p><blockquote><ol><li>指针变量首先是一个变量，所以它拥有变量的所有属性：类型和值。它的类型就是指针，它的值是其他变量的地址。 既然是一个变量，那么在内存中就需要为这个变量分配一个存储空间。在这个存储空间中，存放着其他变量的地址。</li><li>指针变量所指向的数据类型，这是在定义指针变量的时候就确定的。例如：int *p; 意味着指针指向的是一个int型的数据。</li></ol></blockquote><p>首先回答一下刚才那个问题，在32位系统中，一个指针变量在内存中占据4个字节的空间。因为CPU对内存空间寻址时，使用的是32位地址空间(4个字节)，也就是用4个字节就能存储一个内存单元的地址。而<code>指针变量中的值存储的就是地址</code>，所以需要4个字节的空间来存储一个指针变量的值。</p><p>示例：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value = %d \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在内存中的存储模型如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WC13ibsIvG3Z1bQiaSzo5N6GgZ7jYQ7V5of9yCicBycENSdkKUMzpyE4XR1KXu5y9kAq9icFHsj5rW2ysQUPkiaWuiag/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>对于指针变量pa来说，首先它是一个变量，因此在内存中需要有一个空间来存储这个变量，这个空间的地址就是0x11223348；</p><p>其次，这个<code>内存空间中存储的内容是变量a的地址，而a的地址为0x11223344，所以指针变量pa的地址空间中，就存储了0x11223344这个值。</code></p><p>这里对两个操作符&amp;和*进行说明：</p><blockquote><p>&amp;：取地址操作符，用来获取一个变量的地址。上面代码中&amp;a就是用来获取变量a在内存中的存储地址，也就是0x11223344。</p><p>*：这个操作符用在2个场景中：定义一个指针的时候，获取一个指针所指向的变量值的时候。</p><blockquote><ol><li>int *pa; 这个语句中的*表示定义的变量pa是一个指针，前面的int表示pa这个指针指向的是一个int类型的变量。不过此时我们没有给pa进行赋值，也就是说此刻pa对应的存储单元中的4个字节里的值是没有初始化的，可能是0x00000000，也可能是其他任意的数字，不确定；</li><li>printf语句中的*表示获取pa指向的那个int类型变量的值，学名叫解引用，我们只要记住是获取指向的变量的值就可以了。</li></ol></blockquote></blockquote><h4 id="5-操作指针变量"><a href="#5-操作指针变量" class="headerlink" title="5. 操作指针变量"></a>5. 操作指针变量</h4><p>对指针变量的操作包括3个方面：</p><blockquote><ol><li>操作指针变量自身的值；</li><li>获取指针变量所指向的数据;</li><li>以什么样数据类型来使用/解释指针变量所指向的内容。</li></ol></blockquote><h6 id="5-1-指针变量自身的值"><a href="#5-1-指针变量自身的值" class="headerlink" title="5.1 指针变量自身的值"></a>5.1 指针变量自身的值</h6><p><code>int a = 20;</code>这个语句是定义变量a，在随后的代码中，只要写下a就表示要操作变量a中存储的值，操作有两种：读和写。</p><blockquote><p><code>printf(&quot;a = %d \n&quot;, a);</code> 这个语句就是要读取变量a中的值，当然是20；<br><code>a = 100;</code>这个语句就是要把一个数值100写入到变量a中。</p></blockquote><p>同样的道理，<code>int *pa;</code>语句是用来定义指针变量pa，在随后的代码中，只要写下pa就表示要操作变量pa中的值：</p><blockquote><p><code>printf(&quot;pa = %d \n&quot;, pa);</code> 这个语句就是要读取指针变量pa中的值，当然是0x11223344；<br><code>pa = &amp;a;</code>这个语句就是要把新的值写入到指针变量pa中。再次强调一下，指针变量中存储的是地址，如果我们可以提前知道变量a的地址是 0x11223344，那么我们也可以这样来赋值:pa = 0x11223344;</p></blockquote><p>思考一下，<strong>如果执行这个语句<code>printf(&quot;&amp;pa =0x%x \n&quot;, &amp;pa);</code>，打印结果会是什么？</strong></p><p>上面已经说过，操作符&amp;是用来取地址的，那么&amp;pa就表示获取指针变量pa的地址，上面的内存模型中显示指针变量pa是存储在0x11223348这个地址中的，因此打印结果就是：<code>&amp;pa = 0x11223348</code>。</p><h6 id="5-2-获取指针变量所指向的数据"><a href="#5-2-获取指针变量所指向的数据" class="headerlink" title="5.2 获取指针变量所指向的数据"></a>5.2 获取指针变量所指向的数据</h6><p><code>指针变量所指向的数据类型是在定义的时候就明确的，也就是说指针pa指向的数据类型就是int型</code>，因此在执行<code>printf(&quot;value = %d \n&quot;, *pa);</code>语句时，首先知道pa是一个指针，其中存储了一个地址(0x11223344)，然后<code>通过操作符*来获取这个地址(0x11223344)对应的那个存储空间中的值</code>；又因为在定义pa时，已经指定了它指向的值是一个int型，所以我们就知道了地址0x11223344中存储的就是一个int类型的数据。</p><h6 id="5-3-以什么样的数据类型来使用-解释指针变量所指向的内容"><a href="#5-3-以什么样的数据类型来使用-解释指针变量所指向的内容" class="headerlink" title="5.3 以什么样的数据类型来使用/解释指针变量所指向的内容"></a>5.3 以什么样的数据类型来使用/解释指针变量所指向的内容</h6><p>如下代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">30000</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value = %d \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据以上的描述，我们知道printf的打印结果会是<code>value = 30000</code>，十进制的30000转成十六进制是0x00007530，内存模型如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908223112028.png" alt="image-20210908223112028"></p><p>现在我们做这样一个测试：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token number">0x11223344</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"value = %d \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>指针变量pc在定义的时候指明：它指向的数据类型是char型，pc变量中存储的地址是0x11223344。</code>当使用*pc获取指向的数据时，将会按照char型格式来读取0x11223344地址处的数据，因此将会打印<code>value = 0</code>(在计算机中，ASCII码是用等价的数字来存储的)。</p><p>这个例子中说明了一个重要的概念：在内存中一切都是数字，如何来操作(解释)一个内存地址中的数据，完全是由我们的代码来告诉编译器的。刚才这个例子中，虽然0x11223344这个地址开始的4个字节的空间中，存储的是整型变量a的值，但是<code>我们让pc指针按照char型数据来使用/解释这个地址处的内容，这是完全合法的</code>。</p><p>以上内容，就是指针最根本的心法了。把这个心法整明白了，剩下的就是多见识、多练习的问题了。</p><h2 id="指针的几个相关概念"><a href="#指针的几个相关概念" class="headerlink" title="指针的几个相关概念"></a>指针的几个相关概念</h2><h4 id="1-const属性"><a href="#1-const属性" class="headerlink" title="1. const属性"></a>1. const属性</h4><p>const标识符用来表示一个对象的<code>不可变</code>的性质，例如定义：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在后面的代码中就不能改变变量b的值了，b中的值永远是20。同样的，如果用const来修饰一个指针变量：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>内存模型如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908223733060.png" alt="image-20210908223733060"></p><p>这里的const用来修饰指针变量pa，根据const的性质可以得出结论：<code>pa在定义为变量a的地址之后，就固定了，不能再被改变了</code>，也就是说指针变量pa中就只能存储变量a的地址0x11223344。如果在后面的代码中写<code>pa = &amp;b;</code>，编译时就会报错，因为p是不可改变的，不能再被设置为变量b的地址。</p><p>但是，指针变量pa所指向的那个变量a的值是可以改变的，即：<code>*pa = 21;</code>这个语句是合法的，因为指针p的值没有改变(仍然是变量c的地址0x11223344)，改变的是变量c中存储的值。</p><p>与下面的代码区分一下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>pa <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的const没有放在p的旁边，而是放在了类型int的旁边，这就说明const符号不是用来修饰pa的，而是用来修饰pa所指向的那个变量的。所以，如果我们写<code>p = &amp;b;</code>把变量b的地址赋值给指针p，就是合法的，因为p的值可以被改变。</p><p>但是这个语句<code>*pa = 21</code>就是<code>非法</code>了，因为定义语句中的const就限制了通过指针pa获取的数据，不能被改变，只能被用来读取。这个性质常常被用在函数参数上，例如下面的代码，用来计算一块数据的CRC校验，这个函数只需要读取原始数据，不需要(也不可以)改变原始数据，因此就需要在形参指针上使用const修饰符：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">short</span> <span class="token keyword">int</span> <span class="token function">getDataCRC</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pData<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">short</span> <span class="token keyword">int</span> crc <span class="token operator">=</span> <span class="token number">0x0000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算CRC</span>    <span class="token keyword">return</span> crc<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-void型指针"><a href="#2-void型指针" class="headerlink" title="2. void型指针"></a>2. void型指针</h4><p>关键字void并不是一个真正的数据类型，它体现的是一种抽象，指明不是任何一种类型，一般有2种使用场景：</p><blockquote><ol><li>函数的返回值和形参;</li><li>定义指针时不明确规定所指数据的类型，也就意味着可以指向任意类型。</li></ol></blockquote><p>指针变量也是一种变量，变量之间可以相互赋值，那么指针变量之间也可以相互赋值，例如：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>变量a赋值给变量b，指针p1赋值给指针p2，注意到它们的类型必须是相同的：a和b都是int型，p1和p2都是指向int型，所以可以相互赋值。那么如果数据类型不同呢？必须进行强制类型转换。例如：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>内存模型如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908225853120.png" alt="image-20210908225853120"></p><p>p1指针指向的是<code>int型</code>数据，现在想把它的值(0x11223344)赋值给p2，但是由于在定义p2指针时规定它指向的数据类型是<code>char型</code>，因此需要把指针p1进行<code>强制类型转换</code>，也就是把地址0x11223344处的数据按照char型数据来看待，然后才可以赋值给p2指针。</p><p>如果我们使用<code>void *p2</code>来定义p2指针，那么在赋值时就不需要进行强制类型转换了，例如：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>指针p2是void*型，意味着可以把<code>任意类型</code>的指针赋值给p2，但是不能反过来操作，也就是不能把void*型指针直接赋值给其他确定类型的指针，而必须要<code>强制转换成被赋值指针所指向的数据类型</code>，如下代码，必须把p2指针强制转换成int*型之后，再赋值给p3指针：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看一个系统函数：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第一个参数类型是<code>void*</code>，这正体现了系统对内存操作的真正意义：它并不关心用户传来的指针具体指向什么数据类型，只是把数据挨个存储到这个地址对应的空间中。</p><p>第二个参数同样如此，此外还添加了<code>const修饰符</code>，这样就说明了memcpy函数只会从src指针处<code>读取数据，而不会修改数据</code>。</p><h4 id="3-空指针和野指针"><a href="#3-空指针和野指针" class="headerlink" title="3. 空指针和野指针"></a>3. 空指针和野指针</h4><p>一个指针必须指向一个<code>有意义的地址</code>之后，才可以对指针进行操作。<code>如果指针中存储的地址值是一个随机值，或者是一个已经失效的值，此时操作指针就非常危险了，一般把这样的指针称作野指针</code>，C代码中很多指针相关的bug就来源于此。</p><h6 id="3-1-空指针：不指向任何东西的指针"><a href="#3-1-空指针：不指向任何东西的指针" class="headerlink" title="3.1 空指针：不指向任何东西的指针"></a>3.1 空指针：不指向任何东西的指针</h6><p>在<code>定义一个指针变量</code>之后，如果<code>没有赋值</code>，那么这个指针变量中存储的就是一个<code>随机值</code>，有可能指向内存中的任何一个地址空间，此时<code>万万不可以对这个指针进行写操作</code>，因为它有可能指向内存中的代码段区域、也可能指向内存中操作系统所在的区域。</p><p><code>一般会将一个指针变量赋值为NULL来表示一个空指针</code>，而<strong>C语言中，NULL实质是 ((void*)0) ， 在C++中，NULL实质是0。</strong>在标准库头文件stdlib.h中，有如下定义：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span>     <span class="token macro property">#<span class="token directive keyword">define</span> NULL    0</span><span class="token macro property">#<span class="token directive keyword">else</span>    </span>     <span class="token macro property">#<span class="token directive keyword">define</span> NULL    ((void *)0)</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-2-野指针：地址已经失效的指针"><a href="#3-2-野指针：地址已经失效的指针" class="headerlink" title="3.2 野指针：地址已经失效的指针"></a>3.2 野指针：地址已经失效的指针</h6><p>我们都知道，<code>函数中的局部变量存储在栈区，通过malloc申请的内存空间位于堆区</code>，如下代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>内存模型为：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908230540712.png" alt="image-20210908230540712"></p><p>在堆区申请了4个字节的空间，然后强制类型转换为int*型之后，赋值给指针变量p，然后通过*p设置这个地址中的值为14，这是合法的。如果在释放了p指针指向的空间之后，再使用*p来操作这段地址，那就是非常危险了，因为这个地址空间可能已经被操作系统分配给其他代码使用，如果对这个地址里的数据强行操作，程序立刻崩溃的话，将会是我们最大的幸运！</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在free之后就不可以再操作p指针中的数据了。</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最好加上这一句。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指向不同数据类型的指针"><a href="#指向不同数据类型的指针" class="headerlink" title="指向不同数据类型的指针"></a>指向不同数据类型的指针</h2><h4 id="1-数值型指针"><a href="#1-数值型指针" class="headerlink" title="1. 数值型指针"></a>1. 数值型指针</h4><p>通过上面的介绍，指向数值型变量的指针已经很明白了，需要注意的就是<code>指针所指向的数据类型</code>。</p><h4 id="2-字符串指针"><a href="#2-字符串指针" class="headerlink" title="2. 字符串指针"></a>2. 字符串指针</h4><p>字符串在内存中的表示有2种：</p><blockquote><ol><li>用一个数组来表示，例如：char name1[8] = “zhangsan”;</li><li>用一个char *指针来表示，例如：char *name2 = “zhangsan”;</li></ol></blockquote><p>name1在内存中占据<code>8个字节</code>，其中存储了<code>8个字符</code>的ASCII码值；name2在内存中占据<code>9个字节</code>，因为除了存储8个字符的ASCII码值，在最后一个字符’n’的后面还<code>额外存储了一个&#39;\0&#39;</code>，用来标识字符串结束。</p><p>对于字符串来说，使用指针来操作是非常方便的，例如：变量字符串name2:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>name2 <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> name2<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在while的判断条件中，检查p指针指向的字符是否为结束符’\0’。在循环体重，打印出当前指向的字符之后，对指针比那里进行<code>自增操作</code>，因为指针p所指向的数据类型是char，<code>每个char在内存中占据一个字节</code>，因此指针p在自增1之后，就指向下一个存储空间。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908231020329.png" alt="image-20210908231020329"></p><p>也可以把循环体中的2条语句写成1条语句：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假如一个指针指向的数据类型为int型，那么执行<code>p = p + 1;</code>之后，指针p中存储的地址值将会<code>增加4</code>，<code>因为一个int型数据在内存中占据4个字节的空间</code>，如下所示：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908231041160.png" alt="image-20210908231041160"></p><p>思考一个问题：void*型指针能够递增吗？如下测试代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1: p = 0x%x \n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>p <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2: p = 0x%x \n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span><span class="token punctuation">:</span> p <span class="token operator">=</span> <span class="token number">0x733748c0</span> <span class="token number">2</span><span class="token punctuation">:</span> p <span class="token operator">=</span> <span class="token number">0x733748c1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明<code>void*型指针在自增时，是按照一个字节的跨度来计算的</code>。</p><h4 id="3-指针数组与数组指针"><a href="#3-指针数组与数组指针" class="headerlink" title="3. 指针数组与数组指针"></a>3. 指针数组与数组指针</h4><p>这2个说法经常会混淆，至少我是如此，先看下这2条语句：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 指针数组</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数组指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="3-1-指针数组"><a href="#3-1-指针数组" class="headerlink" title="3.1 指针数组"></a>3.1 指针数组</h6><p>第1条语句中：中括号[]的优先级高，因此与p1先结合，表示一个数组，<code>这个数组中有3个元素，这3个元素都是指针，它们指向的是int型数据</code>。可以这样来理解：如果有这个定义<code>char p[3]</code>，很容易理解这是一个有3个char型元素的数组，那么把char换成int*，意味着数组里的元素类型是int*型(指向int型数据的指针)。内存模型如下(注意：<code>三个指针指向的地址并不一定是连续的</code>)：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908231336103.png" alt="image-20210908231336103"></p><p>如果向指针数组中的元素赋值，需要逐个把变量的地址赋值给指针元素：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>p1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="3-2-数组指针"><a href="#3-2-数组指针" class="headerlink" title="3.2 数组指针"></a>3.2 数组指针</h6><p>第2条语句中：小括号让p2与*结合，表示p2是一个指针，这个指针指向了一个数组，数组中有3个元素，每一个元素的类型是int型。可以这样来理解：如果有这个定义<code>int p[3]</code>，很容易理解这是一个有3个char型元素的数组，那么把数组名p换成是*p2，也就是p2是一个指针，指向了这个数组。内存模型如下(注意：<code>指针指向的地址是一个数组，其中的3个元素是连续放在内存中的</code>)：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/WC13ibsIvG3Z1bQiaSzo5N6GgZ7jYQ7V5oPEJOLicTRKWQltWELvHXa3yGF11wwHNic6D7Flv5CSJibUSxl4KNZy7Xw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>在前面我们说到取地址操作符&amp;，用来获得一个变量的地址。凡事都有<code>特殊情况</code>，对于获取地址来说，下面几种情况<code>不需要使用&amp;操作符</code>：</p><blockquote><ol><li>字符串字面量作为右值时，就代表这个字符串在内存中的首地址；</li><li>数组名就代表这个数组的地址，也等于这个数组的第一个元素的地址;</li><li>函数名就代表这个函数的地址。</li></ol></blockquote><p>因此，对于一下代码，三个printf语句的打印结果是相同的：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x \n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%x \n"</span><span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思考一下，如果对这里的p2指针执行<code>p2 = p2 + 1;</code>操作，p2中的值将会增加多少？</p><p>答案是<code>12个字节</code>。因为p2指向的是一个数组，<code>这个数组中包含3个元素，每个元素占据4个字节，那么这个数组在内存中一共占据12个字节，因此p2在加1之后，就跳过12个字节</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908231805196.png" alt="image-20210908231805196"></p><h4 id="4-二维数组和指针"><a href="#4-二维数组和指针" class="headerlink" title="4. 二维数组和指针"></a>4. 二维数组和指针</h4><p><code>一维数组</code>在内存中是<code>连续分布</code>的多个内存单元组成的，而<code>二维数组</code>在内存中也是<code>连续分布</code>的多个内存单元组成的，从内存角度来看，一维数组和二维数组没有本质差别。</p><p>和一维数组类似，二维数组的<code>数组名</code>表示二维数组的第一维数组中<code>首元素的首地址</code>，用代码来说明：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 二维数组</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p0<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// p0是一个指针，指向一个数组</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// p1是一个指针，指向一个数组</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// p2是一个指针，指向一个数组</span>p0 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p1 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p2 <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0: %d %d %d \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p0 <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p0 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p0 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1: %d %d %d \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p1 <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2: %d %d %d \n"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p2 <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>p2 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果是：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们拿第一个printf语句来分析：p0是一个指针，指向一个数组，数组中包含3个元素，每个元素在内存中占据4个字节。现在我们想获取这个数组中的数据，如果直接对p0执行加1操作，那么p0将会跨过12个字节(就等于p1中的值了)，因此需要使用解引用操作符*，把p0转为指向int型的指针，然后再执行加1操作，就可以得到数组中的int型数据了。</p><h4 id="5-结构体指针"><a href="#5-结构体指针" class="headerlink" title="5. 结构体指针"></a>5. 结构体指针</h4><p>C语言中的基本数据类型是预定义的，结构体是用户定义的，在指针的使用上可以进行类比，唯一有区别的就是在<code>结构体指针</code>中，需要使用<code>-&gt;</code>箭头操作符来获取结构体中的成员变量，例如：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Student<span class="token punctuation">;</span>Student s<span class="token punctuation">;</span>s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">strcpy</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Student <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"age = %d, name = %s \n"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>age<span class="token punctuation">,</span> p<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来似乎没有什么技术含量，如果是结构体数组呢？例如：</p><pre class="line-numbers language-c"><code class="language-c">Student s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Student <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size of Student = %d \n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1: 0x%x, 0x%x \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2: 0x%x \n"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果是：</p><pre class="line-numbers language-c"><code class="language-c">size of Student <span class="token operator">=</span> <span class="token number">12</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">0x4c02ac00</span><span class="token punctuation">,</span> <span class="token number">0x4c02ac00</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">0x4c02ac0c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在执行<code>p++</code>操作后，p需要跨过的空间是<code>一个结构体变量在内存中占据的大小(12个字节)</code>，所以此时p就指向了数组中第2个元素的首地址，内存模型如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908232233392.png" alt="image-20210908232233392"></p><h4 id="6-函数指针"><a href="#6-函数指针" class="headerlink" title="6. 函数指针"></a>6. 函数指针</h4><p>每一个函数在经过编译之后，都变成<code>一个包含多条指令的集合</code>，在程序被加载到内存之后，这个指令集合被放在代码区，我们在程序中使用函数名就代表了这个<code>指令集合的开始地址</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908232354427.png" alt="image-20210908232354427"></p><p><code>函数指针，本质上仍然是一个指针，只不过这个指针变量中存储的是一个函数的地址。</code>函数最重要特性是什么？可以被调用！因此，当定义了一个函数指针并把一个函数地址赋值给这个指针时，就可以通过这个<code>函数指针来调用函数</code>。</p><p>如下示例代码：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> add<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token function">p</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前文已经说过，<code>函数的名字就代表函数的地址，所以函数名add就代表了这个加法函数在内存中的地址</code>。<code>int (*p)(int, int);</code>这条语句就是用来定义一个函数指针，它指向一个函数，这个函数必须符合下面这2点(学名叫：函数签名)：</p><blockquote><ol><li>有2个int型的参数;</li><li>有一个int型的返回值。</li></ol></blockquote><p>代码中的add函数正好满足这个要求，因此，可以把add赋值给函数指针p，此时p就指向了内存中这个函数存储的地址，后面就可以用函数指针p来调用这个函数了。</p><p>在示例代码中，函数指针p是直接定义的，那如果想定义2个函数指针，难道需要像下面这样定义吗？</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的参数比较简单，如果函数很复杂，这样的定义方式岂不是要烦死？可以用<code>typedef关键字</code>来定义一个函数指针类型：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>pFunc<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后用这样的方式<code>pFunc p1, p2;</code>来定义多个函数指针就方便多了。注意：只能把与<code>函数指针类型</code>具有<code>相同签名的函数</code>赋值给p1和p2，也就是<code>参数的个数、类型要相同，返回值也要相同</code>。</p><p>注意：这里有几个小细节稍微了解一下：</p><blockquote><ol><li>在赋值函数指针时，使用p = &a;也是可以的；</li><li>使用函数指针调用时，使用(*p)(a, b);也是可以的。</li></ol></blockquote><p>这里没有什么特殊的原理需要讲解，最终都是编译器帮我们处理了这里的细节，直接记住即可。</p><p>函数指针整明白之后，再和数组结合在一起：函数指针数组。示例代码如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> add<span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sub<span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> mul<span class="token punctuation">;</span>    p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> divide<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d - %d = %d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d * %d = %d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d / %d = %d \n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条语句不太好理解:<code>int (*p[4])(int, int);</code>，先分析中间部分，标识符p与中括号[]结合(优先级高)，所以p是一个数组，数组中有4个元素；然后剩下的内容表示一个函数指针，那么就说明数组中的元素类型是函数指针，也就是其他函数的地址，内存模型如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210908232706157.png" alt="image-20210908232706157"></p><p>如果还是难以理解，那就回到指针的本质概念上：指针就是一个地址！这个地址中存储的内容是什么根本不重要，重要的是你告诉计算机这个内容是什么。如果你告诉它：这个地址里存放的内容是一个函数，那么计算机就去调用这个函数。那么你是如何告诉计算机的呢，就是在定义指针变量的时候，仅此而已！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我已经把自己知道的所有指针相关的概念、语法、使用场景都作了讲解，就像一个小酒馆的掌柜，把自己的美酒佳肴都呈现给你，但愿你已经酒足饭饱！</p><p>如果以上的内容太多，一时无法消化，那么下面的这两句话就作为饭后甜点为您奉上，在以后的编程中，如果遇到指针相关的困惑，就想一想这两句话，也许能让你茅塞顿开。</p><blockquote><ol><li>指针就是地址，地址就是指针。</li><li>指针就是指向内存中的一块空间，至于如何来解释/操作这块空间，由这个指针的类型来决定。</li></ol></blockquote><p>另外还有一点嘱咐，那就是学习任何一门编程语言，一定要弄清楚内存模型，内存模型，内存模型！</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EfficientNetV2</title>
      <link href="/efficientnetv2.html"/>
      <url>/efficientnetv2.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考传送门：<a href="https://blog.csdn.net/qq_37541097/article/details/116933569" target="_blank" rel="noopener">https://blog.csdn.net/qq_37541097/article/details/116933569</a></p><p>原论文名称：EfficientNetV2: Smaller Models and Faster Training<br>论文下载地址：<a href="https://arxiv.org/abs/2104.00298" target="_blank" rel="noopener">https://arxiv.org/abs/2104.00298</a><br>原论文提供代码：<a href="https://github.com/google/automl/tree/master/efficientnetv2" target="_blank" rel="noopener">https://github.com/google/automl/tree/master/efficientnetv2</a></p><p>在之前的文章中有详细讲解过EfficientNetV1，地址，今天接着讲下EfficientNetV2，这篇文章是在今年（2021）4月份发布的，但源码是这两天才放出来的，因为很多网络细节必须通过源码才能看清，所以简单阅读下源码后就来总结下这篇文章。首先放张论文中给出的EfficientNetV2的性能参数。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210518140911234.png" alt="EfficientNetv2"></p><p>通过上图很明显能够看出EfficientNetV2网络不仅Accuracy达到了当前的SOTA（State-Of-The-Art）水平，而且训练速度更快参数数量更少（比当前火热的Vision Transformer还要强）。EfficientNetV2-XL (21k)在ImageNet ILSVRC2012的Top-1上达到87.3%。在EfficientNetV1中作者关注的是准确率，参数数量以及FLOPs（理论计算量小不代表推理速度快），在EfficientNetV2中作者进一步关注模型的训练速度。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210518152459394.png" alt="EfficientNet acc"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210518165312723.png" alt="vs"></p><h2 id="EfficientNetV1中存在的问题"><a href="#EfficientNetV1中存在的问题" class="headerlink" title="EfficientNetV1中存在的问题"></a>EfficientNetV1中存在的问题</h2><p>作者系统性的研究了EfficientNet的训练过程，并总结出了三个问题：</p><ul><li><strong>训练图像的尺寸很大时，训练速度非常慢。</strong> 这确实是个槽点，在之前使用EfficientNet时发现当使用到B3（img_size=300）- B7（img_size=600）时基本训练不动，而且非常吃显存。通过下表可以看到，在Tesla V100上当训练的图像尺寸为380x380时，batch_size=24还能跑起来，当训练的图像尺寸为512x512时，batch_size=24时就报OOM（显存不够）了。针对这个问题一个比较好想到的办法就是降低训练图像的尺寸，之前也有一些文章这么干过。降低训练图像的尺寸不仅能够加快训练速度，还能使用更大的batch_size.</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210517153023154.png" alt="size"></p><ul><li><strong>在网络浅层中使用Depthwise convolutions速度会很慢。</strong> 虽然<code>Depthwise convolutions</code>结构相比普通卷积拥有更少的参数以及更小的FLOPs，但通常无法充分利用现有的一些加速器（虽然理论上计算量很小，但实际使用起来并没有想象中那么快）。在近些年的研究中，有人提出了<code>Fused-MBConv</code>结构去更好的利用移动端或服务端的加速器。<code>Fused-MBConv</code>结构也非常简单，即将原来的MBConv结构（之前在将EfficientNetv1时有详细讲过）主分支中的<code>expansion conv1x1</code>和<code>depthwise conv3x3</code>替换成一个<code>普通的conv3x3</code>，如图2所示。作者也在EfficientNet-B4上做了一些测试，发现将浅层MBConv结构替换成<code>Fused-MBConv</code>结构能够明显提升训练速度，如表3所示，将stage2,3,4都替换成<code>Fused-MBConv</code>结构后，在Tesla V100上从每秒训练155张图片提升到216张。但如果将所有stage都替换成<code>Fused-MBConv</code>结构会明显增加参数数量以及FLOPs，训练速度也会降低。所以作者使用NAS技术去搜索<code>MBConv</code>和<code>Fused-MBConv</code>的最佳组合。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210517161009976.png" alt="Fused-MBConv"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210517164201158.png" alt="fuesd stage1-3"></p><ul><li><strong>同等的放大每个stage是次优的。</strong> 在EfficientNetV1中，每个stage的深度和宽度都是同等放大的。但每个stage对网络的训练速度以及参数数量的贡献并不相同，所以直接使用同等缩放的策略并不合理。在这篇文章中，作者采用了非均匀的缩放策略来缩放模型。</li></ul><h2 id="EfficientNetV2中做出的贡献"><a href="#EfficientNetV2中做出的贡献" class="headerlink" title="EfficientNetV2中做出的贡献"></a>EfficientNetV2中做出的贡献</h2><p>在之前的一些研究中，大家主要关注的是准确率以及参数数量(注意，参数数量少并不代表推理速度更快)。但在近些年的研究中，大家开始关注网络的训练速度以及推理速度(可能是准确率刷不动了)。但他们提升训练速度通常是以增加参数数量作为代价的。而这篇文章是同时关注训练速度以及参数数量的。<br><code>However, their training speed often comes with the cost of more paramters. This paper aims to significantly imporve both training and parameter efficiency than prior art.</code></p><p><strong>这篇文章做出的三个贡献：</strong></p><ul><li>引入新的网络(EfficientNetV2)，该网络在训练速度以及参数数量上都优于先前的一些网络。</li><li>提出了改进的渐进学习方法，该方法会根据训练图像的尺寸动态调节正则方法(例如<code>dropout</code>、<code>data augmentation</code>和<code>mixup</code>)。通过实验展示了该方法不仅能够提升训练速度，同时还能提升准确率。</li><li>通过实验与先前的一些网络相比，训练速度提升11倍，参数数量减少为$\frac{1}{6.8} $​​​ 。</li></ul><h2 id="NAS-搜索"><a href="#NAS-搜索" class="headerlink" title="NAS 搜索"></a>NAS 搜索</h2><p>这里采用的是<code>trainning-aware NAS framework</code>，搜索工作主要还是基于之前的Mnasnet以及EfficientNet. 但是这次的优化目标联合了<code>accuracy</code>、<code>parameter efficiency</code>以及<code>trainning efficiency</code>三个维度。这里是以EfficientNet作为backbone，设计空间包含：</p><ul><li>convolutional operation type : {<code>MBConv</code>, <code>Fused-MBConv</code>}</li><li>number of layer</li><li>kernel size : {<code>3x3</code>, <code>5x5</code>}</li><li>expansion ratio (<code>MBConv</code>中第一个<code>expand conv1x1</code>或者<code>Fused-MBConv</code>中第一个<code>expand conv3x3</code>): {<code>1</code>,<code>4</code>,<code>6</code>}</li></ul><p>另外，作者通过以下方法来减小搜索空间的范围：</p><ul><li>移除不需要的搜索选项，例如pooling skip操作（因为在EfficientNet中并没有使用到）</li><li>重用EfficientNet中搜索的channel sizes（需进一步补充）</li></ul><p>接着在搜索空间中随机采样了1000个模型，并针对每个模型训练10个epochs（使用较小的图像尺度）。搜索奖励结合了模型准确率A，标准训练一个step所需时间S以及模型参数大小P，奖励函数可写成：<br>$$<br>A\cdot{S^w}\cdot{P^v}<br>$$</p><p>其中，$w=-0.07$，$v=-0.05$.</p><h2 id="EfficientNetV2网络框架"><a href="#EfficientNetV2网络框架" class="headerlink" title="EfficientNetV2网络框架"></a>EfficientNetV2网络框架</h2><p>表4展示了作者使用NAS搜索得到的EfficientNetV2-S模型框架（<code>注意，在源码中Stage6的输出Channels是等于256并不是表格中的272，Stage7的输出Channels是1280并不是表格中的1792</code>）。相比与EfficientNetV1，主要有以下不同：</p><ul><li>第一个不同点在于EfficientNetV2中除了使用到<code>MBConv</code>模块外，还使用了<code>Fused-MBConv</code>模块（主要是在网络浅层中使用）。</li><li>第二个不同点是EfficientNetV2会使用较小的<code>expansion ratio</code>（<code>MBConv</code>中第一个<code>expand conv1x1</code>或者<code>Fused-MBConv</code>中第一个<code>expand conv3x3</code>）比如<code>4</code>，在EfficientNetV1中基本都是6. 这样的好处是能够减少内存访问开销。</li><li>第三个不同点是EfficientNetV2中更偏向使用更小(<code>3x3</code>)的kernel_size，在EfficientNetV1中使用了很多5x5的kernel_size。通过下表可以看到使用的kernel_size全是<code>3x3</code>的，由于<code>3x3</code>的感受野是要比5x5小的，所以需要堆叠更多的层结构以增加感受野。</li><li>最后一个不同点是移除了EfficientNetV1中最后一个步距为1的stage（就是EfficientNetV1中的stage8，不了解的可以看下EfficientNetV1网络详解），可能是因为它的参数数量过多并且内存访问开销过大（由于网络是通过NAS搜索出来的，所有这里也是作者的猜测）。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210517182754449.png" alt="EfficientNetv2-s"></p><p>通过上表可以看到EfficientNetV2-S分为Stage0到Stage7（EfficientNetV1中是Stage1到Stage9）。Operator表示在当前Stage中使用的模块：</p><ul><li><code>Conv3x3</code>就是普通的<code>3x3</code>卷积 + 激活函数（SiLU）+ BN</li><li><code>Fused-MBConv</code>模块上面再讲<strong>EfficientNetV1存在问题</strong>章节有讲到过，模块名称后跟的<code>1</code>，<code>4</code>表示<code>expansion ratio</code>，<code>k3x3</code>表示kenel_size为<code>3x3</code>，下面是我自己重绘的结构图，<strong>注意</strong>当<code>expansion ratio</code>等于1时是没有expand conv的，还有这里是没有使用到SE结构的（原论文图中有SE）。<strong>注意</strong>当stride=1且输入输出Channels相等时才有shortcut连接。还需要<strong>注意</strong>的是，当有shortcut连接时才有Dropout层，而且这里的Dropout层是Stochastic Depth，即会随机丢掉整个block的主分支（只剩捷径分支，相当于直接跳过了这个block）也可以理解为减少了网络的深度。具体可参考<code>Deep Networks with Stochastic Depth</code>这篇文章。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210519181235595.jpg" alt="Fused-MBConv"></p><ul><li><code>MBConv</code>模块和EfficientNetV1中是一样的，其中模块名称后跟的<code>4</code>，<code>6</code>表示<code>expansion ratio</code>，<code>SE0.25</code>表示使用了SE模块，0.25表示SE模块中第一个全连接层的节点个数是输入该<code>MBConv</code>模块特征矩阵<code>channels</code>的$ \frac{1}{4} $​详情可查看我之前的文章，下面是重绘的<code>MBConv</code>模块结构图。注意当stride=1且输入输出Channels相等时才有shortcut连接。同样这里的Dropout层是<code>Stochastic Depth</code>。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210519181702390.jpg" alt="MBConv"></p><p>Stride就是步距，注意每个Stage中会重复堆叠Operator模块多次，只有第一个Opertator模块的步距是按照表格中Stride来设置的，其他的默认都是1。 #Channels表示该Stage输出的特征矩阵的Channels，#Layers表示该Stage重复堆叠Operator的次数。</p><h3 id="EfficientNetV2-S的详细参数"><a href="#EfficientNetV2-S的详细参数" class="headerlink" title="EfficientNetV2-S的详细参数"></a>EfficientNetV2-S的详细参数</h3><p>首先在官方的源码中有个baseline config注意这个不是V2-S的配置，在efficientnetv2 -&gt; effnetv2_configs.py文件中 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#################### EfficientNet V2 configs ####################</span>v2_base_block <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true"># The baseline config for v2 models.</span>    <span class="token string">'r1_k3_s1_e1_i32_o16_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r2_k3_s2_e4_i16_o32_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r2_k3_s2_e4_i32_o48_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r3_k3_s2_e4_i48_o96_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r5_k3_s1_e6_i96_o112_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r8_k3_s2_e6_i112_o192_se0.25'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EfficientNetV2-S的配置是在baseline的基础上采用了width倍率因子1.4， depth倍率因子1.8得到的（这两个倍率因子是EfficientNetV1-B4中采用的）。</p><pre class="line-numbers language-python"><code class="language-python">v2_s_block <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true"># about base * (width1.4, depth1.8)</span>    <span class="token string">'r2_k3_s1_e1_i24_o24_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r4_k3_s2_e4_i24_o48_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r4_k3_s2_e4_i48_o64_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r6_k3_s2_e4_i64_o128_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r9_k3_s1_e6_i128_o160_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r15_k3_s2_e6_i160_o256_se0.25'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便理解，还是对照着表4来看（<strong>注意，在源码中Stage6的输出Channels是等于256并不是表格中的272，Stage7的输出Channels是1280并不是表格中的1792</strong>）。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210907165531044.png" alt="EfficientNetv2-s"></p><p>上面给出的配置是针对带有<code>Fused-MBConv</code>或者<code>MBConv</code>模块的Stage，例如在EfficientNetV2-S中就是Stage1到Stage6. 每一行配置对应一个Stage中的信息。其中：</p><ul><li><code>r</code>代表当前Stage中Operator重复堆叠的次数</li><li><code>k</code>代表kernel_size</li><li><code>s</code>代表步距stride</li><li><code>e</code>代表expansion ratio</li><li><code>i</code>代表input channels</li><li><code>o</code>代表output channels</li><li><code>c</code>代表conv_type，1代表<code>Fused-MBConv</code>，0代表<code>MBConv</code>（默认为<code>MBConv</code>）</li><li><code>se</code>代表使用SE模块，以及se_ratio</li></ul><p>比如<code>r2_k3_s1_e1_i24_o24_c1</code>代表，Operator重复堆叠2次，kernel_size等于3，stride等于1，expansion等于1，input_channels等于24，output_channels等于24，conv_type为<code>Fused-MBConv</code>。</p><p>源码中关于解析配置的方法如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_decode_block_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block_string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Gets a block through a string notation of arguments."""</span>    <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>block_string<span class="token punctuation">,</span> str<span class="token punctuation">)</span>    ops <span class="token operator">=</span> block_string<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span>    options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> op <span class="token keyword">in</span> ops<span class="token punctuation">:</span>      splits <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>r<span class="token string">'(\d.*)'</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span>      <span class="token keyword">if</span> len<span class="token punctuation">(</span>splits<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>        key<span class="token punctuation">,</span> value <span class="token operator">=</span> splits<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        options<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> hparams<span class="token punctuation">.</span>Config<span class="token punctuation">(</span>        kernel_size<span class="token operator">=</span>int<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'k'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        num_repeat<span class="token operator">=</span>int<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        input_filters<span class="token operator">=</span>int<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'i'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        output_filters<span class="token operator">=</span>int<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        expand_ratio<span class="token operator">=</span>int<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        se_ratio<span class="token operator">=</span>float<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'se'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">'se'</span> <span class="token keyword">in</span> options <span class="token keyword">else</span> None<span class="token punctuation">,</span>        strides<span class="token operator">=</span>int<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'s'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        conv_type<span class="token operator">=</span>int<span class="token punctuation">(</span>options<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">'c'</span> <span class="token keyword">in</span> options <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过配置文件可知Stage0的卷积核个数是24（<code>i24</code>）</p><h3 id="EfficientNetV2-M的详细参数"><a href="#EfficientNetV2-M的详细参数" class="headerlink" title="EfficientNetV2-M的详细参数"></a>EfficientNetV2-M的详细参数</h3><p>EfficientNetV2-M的配置是在baseline的基础上采用了width倍率因子1.6， depth倍率因子2.2得到的（这两个倍率因子是EfficientNetV1-B5中采用的）。</p><pre class="line-numbers language-python"><code class="language-python">v2_m_block <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true"># about base * (width1.6, depth2.2)</span>    <span class="token string">'r3_k3_s1_e1_i24_o24_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r5_k3_s2_e4_i24_o48_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r5_k3_s2_e4_i48_o80_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r7_k3_s2_e4_i80_o160_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r14_k3_s1_e6_i160_o176_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r18_k3_s2_e6_i176_o304_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r5_k3_s1_e6_i304_o512_se0.25'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过配置文件可知Stage0的卷积核个数是24（<code>i24</code>）</p><h3 id="EfficientNetV2-L的详细参数"><a href="#EfficientNetV2-L的详细参数" class="headerlink" title="EfficientNetV2-L的详细参数"></a>EfficientNetV2-L的详细参数</h3><p>EfficientNetV2-L的配置是在baseline的基础上采用了width倍率因子2.0， depth倍率因子3.1得到的（这两个倍率因子是EfficientNetV1-B7中采用的）。</p><pre class="line-numbers language-python"><code class="language-python">v2_l_block <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true"># about base * (width2.0, depth3.1)</span>    <span class="token string">'r4_k3_s1_e1_i32_o32_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r7_k3_s2_e4_i32_o64_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r7_k3_s2_e4_i64_o96_c1'</span><span class="token punctuation">,</span>    <span class="token string">'r10_k3_s2_e4_i96_o192_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r19_k3_s1_e6_i192_o224_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r25_k3_s2_e6_i224_o384_se0.25'</span><span class="token punctuation">,</span>    <span class="token string">'r7_k3_s1_e6_i384_o640_se0.25'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过配置文件可知Stage0的卷积核个数是32（<code>i32</code>）</p><h3 id="EfficientNetV2其他训练参数"><a href="#EfficientNetV2其他训练参数" class="headerlink" title="EfficientNetV2其他训练参数"></a>EfficientNetV2其他训练参数</h3><p>下面是源码中给出的配置信息，我们这里只简单看下<code>efficientnetv2-s</code>，<code>efficientnetv2-m</code>和<code>efficientnetv2-l</code>三个参数，其中的<code>v2_s_block</code>，<code>v2_m_block</code>以及<code>v2_l_block</code>就是上面刚刚讲到过的网络配置参数，剩下就关注下<code>train_size</code>, <code>eval_size</code>, <code>dropout</code>,<code>randaug, mixup</code>, <code>aug</code>即可。比如<code>efficientnetv2-s</code>的<code>train_size=300</code>（注意实际训练中train_size是会变化的，后面讲Progressive Learning中会细讲），<code>eval_size=684</code>，<code>dropout=0.2</code>，<code>randaug=10</code>，<code>mixup=0</code>，<code>aug=&#39;randaug&#39;.</code></p><pre class="line-numbers language-python"><code class="language-python">efficientnetv2_params <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># (block, width, depth, train_size, eval_size, dropout, randaug, mixup, aug)</span>    <span class="token string">'efficientnetv2-s'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 83.9% @ 22M</span>        <span class="token punctuation">(</span>v2_s_block<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'randaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'efficientnetv2-m'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 85.2% @ 54M</span>        <span class="token punctuation">(</span>v2_m_block<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token string">'randaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'efficientnetv2-l'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 85.7% @ 120M</span>        <span class="token punctuation">(</span>v2_l_block<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'randaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'efficientnetv2-xl'</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>v2_xl_block<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token string">'randaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># For fair comparison to EfficientNetV1, using the same scaling and autoaug.</span>    <span class="token string">'efficientnetv2-b0'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 78.7% @ 7M params</span>        <span class="token punctuation">(</span>v2_base_block<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'effnetv1_autoaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'efficientnetv2-b1'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 79.8% @ 8M params</span>        <span class="token punctuation">(</span>v2_base_block<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'effnetv1_autoaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'efficientnetv2-b2'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 80.5% @ 10M params</span>        <span class="token punctuation">(</span>v2_base_block<span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">260</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'effnetv1_autoaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'efficientnetv2-b3'</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 82.1% @ 14M params</span>        <span class="token punctuation">(</span>v2_base_block<span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'effnetv1_autoaug'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="EfficientNetV2与其他模型训练时间对比"><a href="#EfficientNetV2与其他模型训练时间对比" class="headerlink" title="EfficientNetV2与其他模型训练时间对比"></a>EfficientNetV2与其他模型训练时间对比</h3><p>下图展示一系列模型在固定训练图像尺寸（注意，这里还没有使用渐进的学习策略）时训练每个step的时间以及最终的Accuracy曲线。通过下面曲线可以看到EfficientNetV2的训练速度更快，并且能够达到当前SOTA。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210518165740410.png" alt="training stap time"></p><h2 id="Progressive-Learning渐进学习策略"><a href="#Progressive-Learning渐进学习策略" class="headerlink" title="Progressive Learning渐进学习策略"></a>Progressive Learning渐进学习策略</h2><p>前面提到过，训练图像的尺寸对训练模型的效率有很大的影响。所以在之前的一些工作中很多人尝试使用动态的图像尺寸（比如一开始用很小的图像尺寸，后面再增大）来加速网络的训练，但通常会导致Accuracy降低。为什么会出现这种情况呢？作者提出了一个猜想：Accuracy的降低是不平衡的正则化<code>unbalanced regularization</code>导致的。在训练不同尺寸的图像时，应该使用动态的正则方法（之前都是使用固定的正则方法）。<br>为了验证这个猜想，作者接着做了一些实验。在前面提到的搜索空间中采样并训练模型，训练过程中尝试使用不同的图像尺寸以及不同强度的数据增强<code>data augmentations</code>。当训练的图片尺寸较小时，使用较弱的数据增强<code>augmentation</code>能够达到更好的结果；当训练的图像尺寸较大时，使用更强的数据增强能够达到更好的接果。如下表所示，当<code>Size=128</code>，<code>RandAug magnitude=5</code>时效果最好；当<code>Size=300</code>，<code>RandAug magnitude=15</code>时效果最好：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210519135442655.png" alt="randaug"></p><p>基于以上实验，作者就提出了渐进式训练策略<code>Progressive Learning</code>。如下图所示，在训练早期使用较小的训练尺寸以及较弱的正则方法weak regularization，这样网络能够快速的学习到一些简单的表达能力。接着逐渐提升图像尺寸，同时增强正则方法<code>adding stronger regularization</code>。这里所说的<code>regularization</code>包括dropout rate，RandAugment magnitude以及mixup ratio。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210519141206509.png" alt="progressive learning"></p><p>接着作者将渐进式学习策略抽象成了一个公式来设置不同训练阶段使用的训练尺寸以及正则化强度。假设整个训练过程有N步，目标训练尺寸（最终训练尺度）是$S_e$ ，正则化列表（最终正则强度）$\phi_e=\left{\phi_e^k\right}$ϕ其中k代表k种正则方法（刚刚说了，有Dropout、RandAugment以及Mixup三种）。初始化训练尺寸$S_0$ ，初始化正则化强度为$\phi_0=\left{\phi_0^k\right}$​。接着将整个训练过程划分成M个阶段，对于第i个阶段（1 ≤ i ≤ M ）模型的训练尺寸为$S_i$ ，正则化强度为$\phi_i=\left{\phi_i^k\right}$​。对于不同阶段直接使用线性插值的方法递增。具体流程如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210519150441273.png" alt="algorithm"></p><p>下表给出了EfficientNetV2（S，M，L）三个模型的渐进学习策略参数：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210519150807151.png" alt="training setting"></p><p>通过以上策略作者在表7中列出了一大堆模型的训练对比，由于表格太大了这里就不展示了，想看的自己翻下原文。通过对比可以看出使用渐进式学习策略确实能够有效提升训练速度。为了进一步验证渐进式学习策略的有效性，作者还在Resnet以及EfficientNetV1上进行了测试，如下表所示，使用了渐进式学习策略后确实能够有效提升训练速度并且能够小幅提升Accuracy。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210519153901354.png" alt="resnet and EfficientNetv1"></p><p>讲到这，文章的大致内容就讲完了，更多详细细节建议大家仔细去阅读原论文。</p><h2 id="模型构建代码"><a href="#模型构建代码" class="headerlink" title="模型构建代码"></a>模型构建代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict<span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> Optional<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> Tensor<span class="token keyword">def</span> <span class="token function">drop_path</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> drop_prob<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> training<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).    "Deep Networks with Stochastic Depth", https://arxiv.org/pdf/1603.09382.pdf    This function is taken from the rwightman.    It can be seen here:    https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/layers/drop.py#L140    """</span>    <span class="token keyword">if</span> drop_prob <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token operator">or</span> <span class="token operator">not</span> training<span class="token punctuation">:</span>        <span class="token keyword">return</span> x    keep_prob <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> drop_prob    shape <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>ndim <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># work with diff dim tensors, not just 2D ConvNets</span>    random_tensor <span class="token operator">=</span> keep_prob <span class="token operator">+</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>shape<span class="token punctuation">,</span> dtype<span class="token operator">=</span>x<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>x<span class="token punctuation">.</span>device<span class="token punctuation">)</span>    random_tensor<span class="token punctuation">.</span>floor_<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># binarize</span>    output <span class="token operator">=</span> x<span class="token punctuation">.</span>div<span class="token punctuation">(</span>keep_prob<span class="token punctuation">)</span> <span class="token operator">*</span> random_tensor    <span class="token keyword">return</span> output<span class="token keyword">class</span> <span class="token class-name">DropPath</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).    "Deep Networks with Stochastic Depth", https://arxiv.org/pdf/1603.09382.pdf    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> drop_prob<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>DropPath<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>drop_prob <span class="token operator">=</span> drop_prob    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> drop_path<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>drop_prob<span class="token punctuation">,</span> self<span class="token punctuation">.</span>training<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义卷积模块</span><span class="token keyword">class</span> <span class="token class-name">ConvBNAct</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 in_planes<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 out_planes<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 kernel_size<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>                 stride<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>                 groups<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>                 norm_layer<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span>                 activation_layer<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ConvBNAct<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        padding <span class="token operator">=</span> <span class="token punctuation">(</span>kernel_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> norm_layer <span class="token keyword">is</span> None<span class="token punctuation">:</span>            norm_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d        <span class="token keyword">if</span> activation_layer <span class="token keyword">is</span> None<span class="token punctuation">:</span>            activation_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>SiLU  <span class="token comment" spellcheck="true"># alias Swish  (torch>=1.7)</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>in_planes<span class="token punctuation">,</span>                              out_channels<span class="token operator">=</span>out_planes<span class="token punctuation">,</span>                              kernel_size<span class="token operator">=</span>kernel_size<span class="token punctuation">,</span>                              stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                              padding<span class="token operator">=</span>padding<span class="token punctuation">,</span>                              groups<span class="token operator">=</span>groups<span class="token punctuation">,</span>                              bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn <span class="token operator">=</span> norm_layer<span class="token punctuation">(</span>out_planes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>act <span class="token operator">=</span> activation_layer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>bn<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>act<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 定义SE模块</span><span class="token keyword">class</span> <span class="token class-name">SqueezeExcite</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 input_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># block input channel</span>                 expand_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># block expand channel</span>                 se_ratio<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SqueezeExcite<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        squeeze_c <span class="token operator">=</span> int<span class="token punctuation">(</span>input_c <span class="token operator">*</span> se_ratio<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv_reduce <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>expand_c<span class="token punctuation">,</span> squeeze_c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>act1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SiLU<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># alias Swish</span>        self<span class="token punctuation">.</span>conv_expand <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>squeeze_c<span class="token punctuation">,</span> expand_c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>act2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        scale <span class="token operator">=</span> x<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keepdim<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对输入数据x在其2，3维度上求均值，也就是高和宽</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_reduce<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>act1<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>conv_expand<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>act2<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        <span class="token keyword">return</span> scale <span class="token operator">*</span> x<span class="token comment" spellcheck="true"># 定义MBConv模块</span><span class="token keyword">class</span> <span class="token class-name">MBConv</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 kernel_size<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 input_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 out_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 expand_ratio<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 stride<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 se_ratio<span class="token punctuation">:</span> float<span class="token punctuation">,</span>                 drop_rate<span class="token punctuation">:</span> float<span class="token punctuation">,</span>                 norm_layer<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MBConv<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> stride <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"illegal stride value."</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断是否满足使用捷径分支的要求</span>        self<span class="token punctuation">.</span>has_shortcut <span class="token operator">=</span> <span class="token punctuation">(</span>stride <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> input_c <span class="token operator">==</span> out_c<span class="token punctuation">)</span>        activation_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>SiLU  <span class="token comment" spellcheck="true"># alias Swish</span>        expanded_c <span class="token operator">=</span> input_c <span class="token operator">*</span> expand_ratio        <span class="token comment" spellcheck="true"># 在EfficientNetV2中，MBConv中不存在expansion=1的情况所以conv_pw肯定存在</span>        <span class="token keyword">assert</span> expand_ratio <span class="token operator">!=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># Point-wise expansion</span>        self<span class="token punctuation">.</span>expand_conv <span class="token operator">=</span> ConvBNAct<span class="token punctuation">(</span>input_c<span class="token punctuation">,</span>                                     expanded_c<span class="token punctuation">,</span>                                     kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                     norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                     activation_layer<span class="token operator">=</span>activation_layer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Depth-wise convolution</span>        self<span class="token punctuation">.</span>dwconv <span class="token operator">=</span> ConvBNAct<span class="token punctuation">(</span>expanded_c<span class="token punctuation">,</span>                                expanded_c<span class="token punctuation">,</span>                                kernel_size<span class="token operator">=</span>kernel_size<span class="token punctuation">,</span>                                stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                                groups<span class="token operator">=</span>expanded_c<span class="token punctuation">,</span>                                norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                activation_layer<span class="token operator">=</span>activation_layer<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>se <span class="token operator">=</span> SqueezeExcite<span class="token punctuation">(</span>input_c<span class="token punctuation">,</span> expanded_c<span class="token punctuation">,</span> se_ratio<span class="token punctuation">)</span> <span class="token keyword">if</span> se_ratio <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Point-wise linear projection</span>        self<span class="token punctuation">.</span>project_conv <span class="token operator">=</span> ConvBNAct<span class="token punctuation">(</span>expanded_c<span class="token punctuation">,</span>                                      out_planes<span class="token operator">=</span>out_c<span class="token punctuation">,</span>                                      kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                      norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                      activation_layer<span class="token operator">=</span>nn<span class="token punctuation">.</span>Identity<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意这里没有激活函数，所有传入Identity</span>        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> out_c        <span class="token comment" spellcheck="true"># 只有在使用shortcut连接时才使用dropout层</span>        self<span class="token punctuation">.</span>drop_rate <span class="token operator">=</span> drop_rate        <span class="token keyword">if</span> self<span class="token punctuation">.</span>has_shortcut <span class="token operator">and</span> drop_rate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> DropPath<span class="token punctuation">(</span>drop_rate<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>expand_conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>dwconv<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>se<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>project_conv<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>has_shortcut<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>drop_rate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                result <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>result<span class="token punctuation">)</span>            result <span class="token operator">+=</span> x        <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 定义 Fused-MBConv模块</span><span class="token keyword">class</span> <span class="token class-name">FusedMBConv</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 kernel_size<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 input_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 out_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 expand_ratio<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 stride<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 se_ratio<span class="token punctuation">:</span> float<span class="token punctuation">,</span>                 drop_rate<span class="token punctuation">:</span> float<span class="token punctuation">,</span>                 norm_layer<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>FusedMBConv<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> stride <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">assert</span> se_ratio <span class="token operator">==</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>has_shortcut <span class="token operator">=</span> stride <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> input_c <span class="token operator">==</span> out_c        self<span class="token punctuation">.</span>drop_rate <span class="token operator">=</span> drop_rate        <span class="token comment" spellcheck="true"># 判断expand_ratio是否为1，当expand_ratio == 1时的模型存在差异</span>        self<span class="token punctuation">.</span>has_expansion <span class="token operator">=</span> expand_ratio <span class="token operator">!=</span> <span class="token number">1</span>        activation_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>SiLU  <span class="token comment" spellcheck="true"># alias Swish</span>        expanded_c <span class="token operator">=</span> input_c <span class="token operator">*</span> expand_ratio        <span class="token comment" spellcheck="true"># 只有当expand ratio不等于1时才有expand conv</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>has_expansion<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Expansion convolution</span>            self<span class="token punctuation">.</span>expand_conv <span class="token operator">=</span> ConvBNAct<span class="token punctuation">(</span>input_c<span class="token punctuation">,</span>                                         expanded_c<span class="token punctuation">,</span>                                         kernel_size<span class="token operator">=</span>kernel_size<span class="token punctuation">,</span>                                         stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                                         norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                         activation_layer<span class="token operator">=</span>activation_layer<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>project_conv <span class="token operator">=</span> ConvBNAct<span class="token punctuation">(</span>expanded_c<span class="token punctuation">,</span>                                          out_c<span class="token punctuation">,</span>                                          kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                          norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                          activation_layer<span class="token operator">=</span>nn<span class="token punctuation">.</span>Identity<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意没有激活函数</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 当只有project_conv时的情况</span>            self<span class="token punctuation">.</span>project_conv <span class="token operator">=</span> ConvBNAct<span class="token punctuation">(</span>input_c<span class="token punctuation">,</span>                                          out_c<span class="token punctuation">,</span>                                          kernel_size<span class="token operator">=</span>kernel_size<span class="token punctuation">,</span>                                          stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                                          norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                          activation_layer<span class="token operator">=</span>activation_layer<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 注意有激活函数</span>        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> out_c        <span class="token comment" spellcheck="true"># 只有在使用shortcut连接时才使用dropout层</span>        self<span class="token punctuation">.</span>drop_rate <span class="token operator">=</span> drop_rate        <span class="token keyword">if</span> self<span class="token punctuation">.</span>has_shortcut <span class="token operator">and</span> drop_rate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> DropPath<span class="token punctuation">(</span>drop_rate<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>has_expansion<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># expand_ratio ！= 1的情况</span>            result <span class="token operator">=</span> self<span class="token punctuation">.</span>expand_conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            result <span class="token operator">=</span> self<span class="token punctuation">.</span>project_conv<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># expand_ratio == 1的情况</span>            result <span class="token operator">=</span> self<span class="token punctuation">.</span>project_conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>has_shortcut<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>drop_rate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                result <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>result<span class="token punctuation">)</span>            result <span class="token operator">+=</span> x        <span class="token keyword">return</span> result<span class="token comment" spellcheck="true"># 定义EfficientNetV2网络</span><span class="token keyword">class</span> <span class="token class-name">EfficientNetV2</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 model_cnf<span class="token punctuation">:</span> list<span class="token punctuation">,</span>                 num_classes<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>                 num_features<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1280</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 原论文中此参数是1792</span>                 dropout_rate<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span>                 drop_connect_rate<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>EfficientNetV2<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> cnf <span class="token keyword">in</span> model_cnf<span class="token punctuation">:</span>            <span class="token keyword">assert</span> len<span class="token punctuation">(</span>cnf<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span>        norm_layer <span class="token operator">=</span> partial<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>        stem_filter_num <span class="token operator">=</span> model_cnf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>stem <span class="token operator">=</span> ConvBNAct<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>                              stem_filter_num<span class="token punctuation">,</span>                              kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                              stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                              norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 激活函数默认是SiLU</span>        total_blocks <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> model_cnf<span class="token punctuation">]</span><span class="token punctuation">)</span>        block_id <span class="token operator">=</span> <span class="token number">0</span>        blocks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> cnf <span class="token keyword">in</span> model_cnf<span class="token punctuation">:</span>            repeats <span class="token operator">=</span> cnf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            op <span class="token operator">=</span> FusedMBConv <span class="token keyword">if</span> cnf<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> MBConv            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>repeats<span class="token punctuation">)</span><span class="token punctuation">:</span>                blocks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>op<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span>cnf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                 input_c<span class="token operator">=</span>cnf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> cnf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 第一个block的input channel为上层的output channel</span>                                 out_c<span class="token operator">=</span>cnf<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                 expand_ratio<span class="token operator">=</span>cnf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                 stride<span class="token operator">=</span>cnf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 第一个block的步距为cnf[2]，其余的为1</span>                                 se_ratio<span class="token operator">=</span>cnf<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                 drop_rate<span class="token operator">=</span>drop_connect_rate <span class="token operator">*</span> block_id <span class="token operator">/</span> total_blocks<span class="token punctuation">,</span>                                 norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">)</span><span class="token punctuation">)</span>                block_id <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>blocks <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>blocks<span class="token punctuation">)</span>        head_input_c <span class="token operator">=</span> model_cnf<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>        head <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 有序字典</span>        head<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"project_conv"</span><span class="token punctuation">:</span> ConvBNAct<span class="token punctuation">(</span>head_input_c<span class="token punctuation">,</span>                                               num_features<span class="token punctuation">,</span>                                               kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                               norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 激活函数默认是SiLU</span>        head<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"avgpool"</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 平均池化下采样层</span>        head<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"flatten"</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 展平操作</span>        <span class="token keyword">if</span> dropout_rate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            head<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"dropout"</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>dropout_rate<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        head<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"classifier"</span><span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>num_features<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全连接层进行特征分类</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># initial weights</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"fan_out"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>ones_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>stem<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>blocks<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">efficientnetv2_s</span><span class="token punctuation">(</span>num_classes<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    EfficientNetV2    https://arxiv.org/abs/2104.00298    """</span>    <span class="token comment" spellcheck="true"># train_size: 300, eval_size: 384</span>    <span class="token comment" spellcheck="true"># repeat, kernel, stride, expansion, in_c, out_c, operator, se_ratio</span>    model_config <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    model <span class="token operator">=</span> EfficientNetV2<span class="token punctuation">(</span>model_cnf<span class="token operator">=</span>model_config<span class="token punctuation">,</span>                           num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span>                           dropout_rate<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">efficientnetv2_m</span><span class="token punctuation">(</span>num_classes<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    EfficientNetV2    https://arxiv.org/abs/2104.00298    """</span>    <span class="token comment" spellcheck="true"># train_size: 384, eval_size: 480</span>    <span class="token comment" spellcheck="true"># repeat, kernel, stride, expansion, in_c, out_c, operator, se_ratio</span>    model_config <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">304</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">304</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    model <span class="token operator">=</span> EfficientNetV2<span class="token punctuation">(</span>model_cnf<span class="token operator">=</span>model_config<span class="token punctuation">,</span>                           num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span>                           dropout_rate<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">efficientnetv2_l</span><span class="token punctuation">(</span>num_classes<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    EfficientNetV2    https://arxiv.org/abs/2104.00298    """</span>    <span class="token comment" spellcheck="true"># train_size: 384, eval_size: 480</span>    <span class="token comment" spellcheck="true"># repeat, kernel, stride, expansion, in_c, out_c, operator, se_ratio</span>    model_config <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    model <span class="token operator">=</span> EfficientNetV2<span class="token punctuation">(</span>model_cnf<span class="token operator">=</span>model_config<span class="token punctuation">,</span>                           num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span>                           dropout_rate<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> EfficientNetV2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EfficientNet</title>
      <link href="/efficientnet.html"/>
      <url>/efficientnet.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考传送门：<a href="https://blog.csdn.net/qq_37541097/article/details/114434046" target="_blank" rel="noopener">https://blog.csdn.net/qq_37541097/article/details/114434046</a></p><p>原论文名称：EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks<br>论文下载地址：<a href="https://arxiv.org/abs/1905.11946" target="_blank" rel="noopener">https://arxiv.org/abs/1905.11946</a><br>原论文提供代码：<a href="https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet" target="_blank" rel="noopener">https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet</a></p><p>在之前的一些手工设计网络中(AlexNet，VGG，ResNet等等)经常有人问，为什么输入图像分辨率要固定为224，为什么卷积的个数要设置为这个值，为什么网络的深度设为这么深？这些问题你要问设计作者的话，估计回复就四个字——工程经验。而这篇论文主要是用NAS（Neural Architecture Search）技术来搜索网络的图像输入分辨率 r ，网络的深度depth以及channel的宽度width三个参数的合理化配置。在之前的一些论文中，基本都是通过改变上述3个参数中的一个来提升网络的性能，而这篇论文就是同时来探索这三个参数的影响。在论文中提到，本文提出的<code>EfficientNet-B7</code>在<code>Imagenet top-1</code>上达到了当年最高准确率<code>84.3%</code>，与之前准确率最高的<code>GPipe</code>相比，参数数量（Params）仅为其<code>1/8.4</code>，推理速度提升了<code>6.1</code>倍（看上去又快又轻量，但个人实际使用起来发现很吃显存）。下图是EfficientNet与其他网络的对比（<code>注意，参数数量少并不意味推理速度就快</code>）。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210306112722568.png" alt="acc"></p><h2 id="论文思想"><a href="#论文思想" class="headerlink" title="论文思想"></a>论文思想</h2><p>在之前的一些论文中，有的会通过增加网络的<code>width</code>即增加卷积核的个数（增加特征矩阵的<code>channels</code>）来提升网络的性能如图(b)所示，有的会通过增加网络的深度即使用更多的层结构来提升网络的性能如图(c)所示，有的会通过增加输入网络的分辨率来提升网络的性能如图(d)所示。而在本篇论文中会同时增加网络的<code>width</code>、网络的深度以及输入网络的分辨率来提升网络的性能如图(e)所示：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210306162502756.png" alt="modelscaling"></p><ul><li>根据以往的经验，增加网络的深度<code>depth</code>能够得到更加丰富、复杂的特征并且能够很好的应用到其它任务中。但网络的深度过深会面临梯度消失，训练困难的问题。<br><code>The intuition is that deeper ConvNet can capture richer and more complex features, and generalize well on new tasks. However, deeper networks are also more difficult to train due to the vanishing gradient problem</code></li><li>增加网络的<code>width</code>能够获得更高细粒度的特征并且也更容易训练，但对于<code>width</code>很大而深度较浅的网络往往很难学习到更深层次的特征。<br><code>wider networks tend to be able to capture more fine-grained features and are easier to train. However, extremely wide but shallow networks tend to have difficulties in capturing higher level features.</code></li><li>增加输入网络的图像分辨率能够潜在得获得更高细粒度的特征模板，但对于非常高的输入分辨率，准确率的增益也会减小。并且大分辨率图像会增加计算量。<br><code>With higher resolution input images, ConvNets can potentially capture more fine-grained patterns. but the accuracy gain diminishes for very high resolutions.</code></li></ul><p>下图展示了在基准<code>EfficientNetB-0</code>上分别增加<code>width</code>、<code>depth</code>以及<code>esolution</code>后得到的统计结果。通过下图可以看出大概在Accuracy达到80%时就趋于饱和了。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210306172202609.png" alt="scalingup"></p><p>接着作者又做了一个实验，采用不同的d , r 组合，然后不断改变网络的<code>width</code>就得到了如下图所示的4条曲线，通过分析可以发现在相同的FLOPs下，同时增加 d 和 r 的效果最好。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210306173102929.png" alt="figure4"></p><p>为了方便后续理解，我们先看下论文中通过 <code>NAS（Neural Architecture Search）</code> 技术搜索得到的EfficientNetB0的结构，如下图所示，整个网络框架由一系列<code>Stage</code>组成，$ \hat{F_i} $表示对应Stage的运算操作，$ \hat{L_i} $ 表示在该<code>Stage</code>中$ \hat{F_i} $重复的次数：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210306135337653.png" alt="EfficientNetb0"></p><p>作者在论文中对整个网络的运算进行抽象：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210907103255588.png" alt="image-20210907103255588"></p><p>其中：</p><ul><li>$\bigodot{i=1…8} $​​表示连乘运算</li><li>$ \hat{F_i}$​​表示一个运算操作（如上图中的<code>Operator</code>），那么$F_i^{L_i}$​表示在Stagei中$F_i$运算被重复执行$L_i$次</li><li>X​表示输入Stagei的特殊矩阵（input tensor）</li><li>$\langle H_i,W_i,C_i \rangle$表示X的高度，宽度以及Channels（<code>shape</code>）​</li></ul><p>为了探究d , r , w 这三个因子对最终准确率的影响，则将d , r , w 加入到公式中，我们可以得到抽象化后的优化问题（在指定资源限制下），其中s.t.代表限制条件：<br><code>Our target is to maximize the model accuracy for any given resource constraints, which can be formulated as an optimization problem:</code></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210907104338005.png" alt="image-20210907104338005"></p><p>其中：</p><ul><li>d用来缩放深度$\widehat{L}_i $​</li><li>r用来缩放分辨率即影响$\widehat{H}_i $​ 和$ \widehat{W}_i $​</li><li>w就是用来缩放特征矩阵的channel即$\widehat{C}_i $​</li><li><code>target_memory</code>为<code>memory</code>限制</li><li><code>target_flops</code>为FLOPs限制</li></ul><p>接着作者又提出了一个混合缩放方法 (<code>compound scaling method</code>) 在这个方法中使用了一个混合因子$ \phi$​​去统一的缩放<code>width，depth，resolution</code>参数，具体的计算公式如下，其中s.t.代表限制条件：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210907104708786.png" alt="image-20210907104708786"></p><p>注意：</p><ul><li>FLOPs（理论计算量）与<code>depth</code>的关系是：当<code>depth</code>翻倍，FLOPs也翻倍</li><li>FLOPs与width的关系是：当width翻倍（即channal翻倍），FLOPs会翻4倍，因为卷积层的FLOPs约等于$ feature_w \times feature_h \times feature_c \times kernel_w \times kernel_h \times kernel_{number}$​​（假设输入输出特征矩阵的高宽不变），当<code>width</code>翻倍，输入特征矩阵的channels（$feature_c$​​）和输出特征矩阵的channels或卷积核的个数（$kernel_{number}$​​​）都会翻倍，所以FLOPs会翻4倍</li><li>FLOPs与resolution的关系是：当resolution翻倍，FLOPs也会翻4倍，和上面类似因为特征矩阵的宽度$feature_w$和特征矩阵的高度$feature_h$ 都会翻倍。</li></ul><p>所以总的FLOPs倍率可以用近似用$ (\alpha \cdot \beta^{2} \cdot \gamma^{2})^{\phi}$​来表示，当限制$ \alpha \cdot \beta^{2} \cdot \gamma^{2} \approx 2$​​时，对于任意一个$\phi$​​而言FLOPs相当增加了$2^{\phi}$​ 倍。接下来作者在基准网络EfficientNetB-0（在后面的<code>网络详细结构</code>章节会详细讲）上使用<code>NAS</code>来搜索$\alpha, \beta, \gamma$这三个参数。</p><ul><li>（step1）首先固定$\phi=1$​，并基于上面给出的公式(2)和(3)进行搜索，作者发现对于EfficientNetB-0最佳参数为$ \alpha=1.2, \beta=1.1, \gamma=1.15$</li><li>（step2）接着固定$ \alpha=1.2, \beta=1.1, \gamma=1.15$，在EfficientNetB-0的基础上使用不同的$\phi$分别得到EfficientNetB-1至EfficientNetB-7（在后面的<code>EfficientNet(B0-B7)参数</code>章节有给出详细参数）</li></ul><p>需要注意的是，对于不同的基准网络搜索出的$\alpha, \beta, \gamma$也不定相同。还需要注意的是，在原论文中，作者也说了，如果直接在大模型上去搜索$\alpha, \beta, \gamma$​​可能获得更好的结果，但是在较大的模型中搜索成本太大，所以这篇文章就在比较小的EfficientNetB-0模型上进行搜索的。<br><code>Notably, it is possible to achieve even better performance by searching for α, β, γ directly around a large model, but the search cost becomes prohibitively more expensive on larger models. Our method solves this issue by only doing search once on the small baseline network (step 1), and then use the same scaling coefficients for all other models (step 2).</code></p><h2 id="网络详细结构"><a href="#网络详细结构" class="headerlink" title="网络详细结构"></a>网络详细结构</h2><p>下表为EfficientNet-B0的网络框架（B1-B7就是在B0的基础上修改<code>Resolution</code>，<code>Channels</code>以及<code>Layers</code>），可以看出网络总共分成了9个<code>Stage</code>，第一个<code>Stage</code>就是一个卷积核大小为<code>3x3</code>步距为2的普通卷积层（包含BN和激活函数Swish），<code>Stage2～Stage8</code>都是在重复堆叠<code>MBConv</code>结构（最后一列的<code>Layers</code>表示该<code>Stage</code>重复<code>MBConv</code>结构多少次），而<code>Stage9</code>由一个普通的<code>1x1</code>的卷积层（包含BN和激活函数Swish）一个平均池化层和一个全连接层组成。表格中每个<code>MBConv</code>后会跟一个数字1或6，这里的1或6就是倍率因子<code>n</code>即<code>MBConv</code>中第一个<code>1x1</code>的卷积层会将输入特征矩阵的<code>channels</code>扩充为<code>n</code>倍，其中<code>k3x3</code>或<code>k5x5</code>表示<code>MBConv</code>中<code>Depthwise Conv</code>所采用的卷积核大小。<code>Channels</code>表示通过该<code>Stage</code>后输出特征矩阵的<code>Channels</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210907105819323.png" alt="image-20210907105819323"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210907113547952.png" alt="image-20210907113547952"></p><blockquote><p>注： 上图中的stride参数的值对应的是Stage中多Layers的MBConv层的第一个MBConv层的步距，而其他的MBConv层的步距默认为1</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义MBConv结构配置</span><span class="token keyword">class</span> <span class="token class-name">InvertedResidualConfig</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># kernel_size, in_channel, out_channel, exp_ratio, strides, use_SE, drop_connect_rate</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 kernel<span class="token punctuation">:</span> int<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># 3 or 5</span>                 input_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 out_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 expanded_ratio<span class="token punctuation">:</span> int<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 1 or 6</span>                 stride<span class="token punctuation">:</span> int<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># 1 or 2</span>                 use_se<span class="token punctuation">:</span> bool<span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># True</span>                 drop_rate<span class="token punctuation">:</span> float<span class="token punctuation">,</span>                 index<span class="token punctuation">:</span> str<span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 1a, 2a, 2b, ...</span>                 <span class="token comment" spellcheck="true"># width_coefficient channel维度上的倍率因子</span>                 width_coefficient<span class="token punctuation">:</span> float<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>input_c <span class="token operator">=</span> self<span class="token punctuation">.</span>adjust_channels<span class="token punctuation">(</span>input_c<span class="token punctuation">,</span> width_coefficient<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>kernel <span class="token operator">=</span> kernel        self<span class="token punctuation">.</span>expanded_c <span class="token operator">=</span> self<span class="token punctuation">.</span>input_c <span class="token operator">*</span> expanded_ratio        self<span class="token punctuation">.</span>out_c <span class="token operator">=</span> self<span class="token punctuation">.</span>adjust_channels<span class="token punctuation">(</span>out_c<span class="token punctuation">,</span> width_coefficient<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>use_se <span class="token operator">=</span> use_se        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride        self<span class="token punctuation">.</span>drop_rate <span class="token operator">=</span> drop_rate        self<span class="token punctuation">.</span>index <span class="token operator">=</span> index    @staticmethod    <span class="token keyword">def</span> <span class="token function">adjust_channels</span><span class="token punctuation">(</span>channels<span class="token punctuation">:</span> int<span class="token punctuation">,</span> width_coefficient<span class="token punctuation">:</span> float<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _make_divisible<span class="token punctuation">(</span>channels <span class="token operator">*</span> width_coefficient<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MBConv结构"><a href="#MBConv结构" class="headerlink" title="MBConv结构"></a>MBConv结构</h2><p><code>MBConv</code>其实就是MobileNetV3网络中的<code>InvertedResidualBlock</code>，但也有些许区别。一个是采用的激活函数不一样（EfficientNet的MBConv中使用的都是<code>Swish激活函数</code>），另一个是在每个<code>MBConv</code>中都加入了SE（<code>Squeeze-and-Excitation</code>）模块。下图是我自己绘制的<code>MBConv结构</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210419135003777.png" alt="mbblock"></p><p>如图所示，<code>MBConv</code>结构主要由一个<code>1x1</code>的普通卷积（升维作用，包含BN和Swish），一个<code>kxk</code>的<code>Depthwise Conv</code>卷积（包含BN和Swish）<code>k</code>的具体值可看EfficientNet-B0的网络框架主要有<code>3x3</code>和<code>5x5</code>两种情况，一个<code>SE</code>模块，一个<code>1x1</code>的普通卷积（降维作用，包含BN），一个<code>Droupout</code>层构成。搭建过程中还需要注意几点：</p><ul><li>第一个升维的<code>1x1</code>卷积层，它的卷积核个数是输入特征矩阵<code>channel</code>的n倍，n ∈ { 1 , 6 }，其中1对应MBConv1，6对应MBConv6</li><li>当n = 1时，不要第一个升维的<code>1x1</code>卷积层，即<code>Stage2</code>中的<code>MBConv</code>结构都没有第一个升维的<code>1x1</code>卷积层（这和MobileNetV3网络类似）</li><li>关于<code>shortcut</code>连接，仅当输入<code>MBConv</code>结构的特征矩阵与输出的特征矩阵<code>shape</code>相同时才存在（代码中可通过<code>stride == 1 and inputc_channels == output_channels</code>条件来判断）</li><li>SE模块如下所示，由一个全局平均池化，两个全连接层组成。第一个全连接层的节点个数是输入该<code>MBConv</code>特征矩阵<code>channels</code>的$\frac{1}{4} $​，且使用Swish激活函数。第二个全连接层的节点个数等于<code>Depthwise Conv</code>层输出的特征矩阵<code>channels</code>，且使用Sigmoid激活函数</li><li>Dropout层的<code>dropout_rate</code>在tensorflow的keras源码中对应的是drop_connect_rate后面会细讲（<code>注意，在源码实现中只有使用shortcut的时候才有Dropout层</code>）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义卷积、BN以及激活函数模块</span><span class="token keyword">class</span> <span class="token class-name">ConvBNActivation</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># groups参数用来控制是使用普通卷积还是使用dw卷积</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 in_planes<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 out_planes<span class="token punctuation">:</span> int<span class="token punctuation">,</span>                 kernel_size<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>                 stride<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>                 groups<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>                 norm_layer<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># BN</span>                 activation_layer<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#激活函数</span>        padding <span class="token operator">=</span> <span class="token punctuation">(</span>kernel_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> norm_layer <span class="token keyword">is</span> None<span class="token punctuation">:</span>            norm_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d        <span class="token keyword">if</span> activation_layer <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># nn.SiLU其实就是Swish激活函数，只是名字不同罢了</span>            activation_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>SiLU  <span class="token comment" spellcheck="true"># alias Swish  (torch>=1.7)</span>        super<span class="token punctuation">(</span>ConvBNActivation<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>in_planes<span class="token punctuation">,</span>                                                         out_channels<span class="token operator">=</span>out_planes<span class="token punctuation">,</span>                                                         kernel_size<span class="token operator">=</span>kernel_size<span class="token punctuation">,</span>                                                         stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                                                         padding<span class="token operator">=</span>padding<span class="token punctuation">,</span>                                                         groups<span class="token operator">=</span>groups<span class="token punctuation">,</span>                                                         bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                               norm_layer<span class="token punctuation">(</span>out_planes<span class="token punctuation">)</span><span class="token punctuation">,</span>                                               activation_layer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义MBConv结构</span><span class="token keyword">class</span> <span class="token class-name">InvertedResidual</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 cnf<span class="token punctuation">:</span> InvertedResidualConfig<span class="token punctuation">,</span>                 norm_layer<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>InvertedResidual<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> cnf<span class="token punctuation">.</span>stride <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"illegal stride value."</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 判断是否满足使用捷径分支的条件</span>        self<span class="token punctuation">.</span>use_res_connect <span class="token operator">=</span> <span class="token punctuation">(</span>cnf<span class="token punctuation">.</span>stride <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> cnf<span class="token punctuation">.</span>input_c <span class="token operator">==</span> cnf<span class="token punctuation">.</span>out_c<span class="token punctuation">)</span>        layers <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        activation_layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>SiLU  <span class="token comment" spellcheck="true"># alias Swish</span>        <span class="token comment" spellcheck="true"># expand</span>        <span class="token comment" spellcheck="true"># 1x1卷积的升维模块</span>        <span class="token comment" spellcheck="true"># 当expanded_ratio = 1时，不要第一个升维的`1x1`卷积层，即`Stage2`中的`MBConv`结构都没有第一个升维的`1x1`卷积层（这和MobileNetV3网络类似）</span>        <span class="token comment" spellcheck="true"># expanded_ratio = 1 意味着expanded_channel与input_channel是相等的</span>        <span class="token keyword">if</span> cnf<span class="token punctuation">.</span>expanded_c <span class="token operator">!=</span> cnf<span class="token punctuation">.</span>input_c<span class="token punctuation">:</span>            layers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"expand_conv"</span><span class="token punctuation">:</span> ConvBNActivation<span class="token punctuation">(</span>cnf<span class="token punctuation">.</span>input_c<span class="token punctuation">,</span>                                                           cnf<span class="token punctuation">.</span>expanded_c<span class="token punctuation">,</span>                                                           kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                                           norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                                           activation_layer<span class="token operator">=</span>activation_layer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># depthwise</span>        <span class="token comment" spellcheck="true"># dw卷积模块</span>        layers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"dwconv"</span><span class="token punctuation">:</span> ConvBNActivation<span class="token punctuation">(</span>cnf<span class="token punctuation">.</span>expanded_c<span class="token punctuation">,</span>                                                  cnf<span class="token punctuation">.</span>expanded_c<span class="token punctuation">,</span>                                                  kernel_size<span class="token operator">=</span>cnf<span class="token punctuation">.</span>kernel<span class="token punctuation">,</span>                                                  stride<span class="token operator">=</span>cnf<span class="token punctuation">.</span>stride<span class="token punctuation">,</span>                                                  groups<span class="token operator">=</span>cnf<span class="token punctuation">.</span>expanded_c<span class="token punctuation">,</span>                                                  norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                                  activation_layer<span class="token operator">=</span>activation_layer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># EfficientNet中均使用SE模块，因此cnf.use_se参数恒为True</span>        <span class="token keyword">if</span> cnf<span class="token punctuation">.</span>use_se<span class="token punctuation">:</span>            layers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"se"</span><span class="token punctuation">:</span> SqueezeExcitation<span class="token punctuation">(</span>cnf<span class="token punctuation">.</span>input_c<span class="token punctuation">,</span>                                                   cnf<span class="token punctuation">.</span>expanded_c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># project</span>        <span class="token comment" spellcheck="true"># activation_layer=nn.Identity 激活函数传入nn.Identity 表示不做激活函数处理</span>        layers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"project_conv"</span><span class="token punctuation">:</span> ConvBNActivation<span class="token punctuation">(</span>cnf<span class="token punctuation">.</span>expanded_c<span class="token punctuation">,</span>                                                        cnf<span class="token punctuation">.</span>out_c<span class="token punctuation">,</span>                                                        kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                                        norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span>                                                        activation_layer<span class="token operator">=</span>nn<span class="token punctuation">.</span>Identity<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>layers<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> cnf<span class="token punctuation">.</span>out_c        self<span class="token punctuation">.</span>is_strided <span class="token operator">=</span> cnf<span class="token punctuation">.</span>stride <span class="token operator">></span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 只有在使用shortcut连接时才使用dropout层</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_res_connect <span class="token operator">and</span> cnf<span class="token punctuation">.</span>drop_rate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> DropPath<span class="token punctuation">(</span>cnf<span class="token punctuation">.</span>drop_rate<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>block<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_res_connect<span class="token punctuation">:</span>            result <span class="token operator">+=</span> x        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210306151615976.png" alt="semodule"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义SE模块</span><span class="token keyword">class</span> <span class="token class-name">SqueezeExcitation</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 input_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># block input channel</span>                 expand_c<span class="token punctuation">:</span> int<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># block expand channel</span>                 squeeze_factor<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SqueezeExcitation<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># squeeze_c为第一个全连接层的channel数</span>        squeeze_c <span class="token operator">=</span> input_c <span class="token operator">//</span> squeeze_factor        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>expand_c<span class="token punctuation">,</span> squeeze_c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ac1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>SiLU<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># alias Swish</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>squeeze_c<span class="token punctuation">,</span> expand_c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ac2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 平均池化下采样层</span>        scale <span class="token operator">=</span> F<span class="token punctuation">.</span>adaptive_avg_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>ac1<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        scale <span class="token operator">=</span> self<span class="token punctuation">.</span>ac2<span class="token punctuation">(</span>scale<span class="token punctuation">)</span>        <span class="token keyword">return</span> scale <span class="token operator">*</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EfficientNet-B0-B7-参数"><a href="#EfficientNet-B0-B7-参数" class="headerlink" title="EfficientNet(B0-B7)参数"></a>EfficientNet(B0-B7)参数</h2><p>还是先给出EfficientNetB0的网络结构，方便后面理解。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210907110352865.png" alt="EfficientNetB0"></p><p>通过上面的内容，我们是可以搭建出EfficientNetB0网络的，其他版本的详细参数可见下表：</p><table><thead><tr><th>Model</th><th>input_size</th><th>width_coefficient</th><th>depth_coefficient</th><th>drop_connect_rate</th><th>dropout_rate</th></tr></thead><tbody><tr><td>EfficientNetB0</td><td>224x224</td><td>1.0</td><td>1.0</td><td>0.2</td><td>0.2</td></tr><tr><td>EfficientNetB1</td><td>240x240</td><td>1.0</td><td>1.1</td><td>0.2</td><td>0.2</td></tr><tr><td>EfficientNetB2</td><td>260x260</td><td>1.1</td><td>1.2</td><td>0.2</td><td>0.3</td></tr><tr><td>EfficientNetB3</td><td>300x300</td><td>1.2</td><td>1.4</td><td>0.2</td><td>0.3</td></tr><tr><td>EfficientNetB4</td><td>380x380</td><td>1.4</td><td>1.8</td><td>0.2</td><td>0.4</td></tr><tr><td>EfficientNetB5</td><td>456x456</td><td>1.6</td><td>2.2</td><td>0.2</td><td>0.4</td></tr><tr><td>EfficientNetB6</td><td>528x528</td><td>1.8</td><td>2.6</td><td>0.2</td><td>0.5</td></tr><tr><td>EfficientNetB7</td><td>600x600</td><td>2.0</td><td>3.1</td><td>0.2</td><td>0.5</td></tr></tbody></table><ul><li><code>input_size</code>代表训练网络时输入网络的图像大小</li><li><code>width_coefficient</code>代表<code>channel</code>维度上的倍率因子，比如在 EfficientNetB0中<code>Stage1</code>的<code>3x3</code>卷积层所使用的卷积核个数是32，那么在B6中就是$32\times 1.8=57.6$​接着取整到离它最近的8的整数倍即56，其它<code>Stage</code>同理</li><li><code>depth_coefficient</code>代表<code>depth</code>维度上的倍率因子（仅针对<code>Stage2</code>到<code>Stage8</code>），比如在EfficientNetB0中<code>Stage7</code>的${\widehat L}_i=4 $，那么在B6中就是$ 4 \times 2.6=10.4$​接着向上取整即11</li><li><code>drop_connect_rate</code>是在<code>MBConv</code>结构中dropout层使用的<code>drop_rate</code>，在官方keras模块的实现中<code>MBConv</code>结构的<code>drop_rate</code>是从0递增到<code>drop_connect_rate</code>的（具体实现可以看下官方源码，<strong>注意，在源码实现中只有使用shortcut的时候才有Dropout层</strong>）。还需要注意的是，这里的Dropout层是<code>Stochastic Depth</code>，即会随机丢掉整个block的主分支（只剩捷径分支，相当于直接跳过了这个block）也可以理解为减少了网络的深度。具体可参考<code>Deep Networks with Stochastic Depth</code>这篇文章</li><li><code>dropout_rate</code>是最后一个全连接层前的<code>dropout</code>层（在<code>stage9</code>的Pooling与FC之间）的<code>dropout_rate</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义EfficientNet模块</span><span class="token keyword">class</span> <span class="token class-name">EfficientNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 width_coefficient<span class="token punctuation">:</span> float<span class="token punctuation">,</span>                 depth_coefficient<span class="token punctuation">:</span> float<span class="token punctuation">,</span>                 num_classes<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>                 dropout_rate<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 最后用于特征分类的全连接层之前的Dropout参数</span>                 drop_connect_rate<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span>                 block<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span>                 norm_layer<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Module<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None                 <span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>EfficientNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># kernel_size, in_channel, out_channel, exp_ratio, strides, use_SE, drop_connect_rate, repeats</span>        default_cnf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> drop_connect_rate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> drop_connect_rate<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> drop_connect_rate<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> drop_connect_rate<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> drop_connect_rate<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> drop_connect_rate<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> drop_connect_rate<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">round_repeats</span><span class="token punctuation">(</span>repeats<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">"""Round number of repeats based on depth multiplier."""</span>            <span class="token keyword">return</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>depth_coefficient <span class="token operator">*</span> repeats<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 乘上深度倍率因子并向上取整</span>        <span class="token keyword">if</span> block <span class="token keyword">is</span> None<span class="token punctuation">:</span>            block <span class="token operator">=</span> InvertedResidual  <span class="token comment" spellcheck="true"># 默认传入MBconv模块</span>        <span class="token keyword">if</span> norm_layer <span class="token keyword">is</span> None<span class="token punctuation">:</span>            norm_layer <span class="token operator">=</span> partial<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>        adjust_channels <span class="token operator">=</span> partial<span class="token punctuation">(</span>InvertedResidualConfig<span class="token punctuation">.</span>adjust_channels<span class="token punctuation">,</span>                                  width_coefficient<span class="token operator">=</span>width_coefficient<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># build inverted_residual_setting</span>        bneck_conf <span class="token operator">=</span> partial<span class="token punctuation">(</span>InvertedResidualConfig<span class="token punctuation">,</span>                             width_coefficient<span class="token operator">=</span>width_coefficient<span class="token punctuation">)</span>        b <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 根据深度倍率因子，重新计算Stage2-8即MBConv模块的堆叠深度</span>        num_blocks <span class="token operator">=</span> float<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>round_repeats<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> default_cnf<span class="token punctuation">)</span><span class="token punctuation">)</span>        inverted_residual_setting <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 定义列表用于保存修改后的MBConv模块参数</span>        <span class="token keyword">for</span> stage<span class="token punctuation">,</span> args <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>default_cnf<span class="token punctuation">)</span><span class="token punctuation">:</span>            cnf <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>args<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>round_repeats<span class="token punctuation">(</span>cnf<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># strides equal 1 except first cnf</span>                    cnf<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># strides</span>                    cnf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># input_channel equal output_channel</span>                <span class="token comment" spellcheck="true"># 重新计算MBConv模块中的dropout参数，此参数随模型深度增长，增长上限为drop_connect_rate</span>                cnf<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> b <span class="token operator">/</span> num_blocks  <span class="token comment" spellcheck="true"># update dropout ratio</span>                index <span class="token operator">=</span> str<span class="token punctuation">(</span>stage <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1a, 2a, 2b, ...</span>                <span class="token comment" spellcheck="true"># 重新组合所有MBConv模块的参数配置信息</span>                inverted_residual_setting<span class="token punctuation">.</span>append<span class="token punctuation">(</span>bneck_conf<span class="token punctuation">(</span><span class="token operator">*</span>cnf<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span>                b <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># create layers</span>        layers <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 有序字典</span>        <span class="token comment" spellcheck="true"># first conv</span>        layers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"stem_conv"</span><span class="token punctuation">:</span> ConvBNActivation<span class="token punctuation">(</span>in_planes<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                                                     out_planes<span class="token operator">=</span>adjust_channels<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                     kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                                                     stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                                                     norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># building inverted residual blocks</span>        <span class="token keyword">for</span> cnf <span class="token keyword">in</span> inverted_residual_setting<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># cnf.index是该层的名称</span>            layers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>cnf<span class="token punctuation">.</span>index<span class="token punctuation">:</span> block<span class="token punctuation">(</span>cnf<span class="token punctuation">,</span> norm_layer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># build top</span>        last_conv_input_c <span class="token operator">=</span> inverted_residual_setting<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>out_c        last_conv_output_c <span class="token operator">=</span> adjust_channels<span class="token punctuation">(</span><span class="token number">1280</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 进行channel上的调整，即乘上宽度倍率因子width_coefficient</span>        layers<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"top"</span><span class="token punctuation">:</span> ConvBNActivation<span class="token punctuation">(</span>in_planes<span class="token operator">=</span>last_conv_input_c<span class="token punctuation">,</span>                                               out_planes<span class="token operator">=</span>last_conv_output_c<span class="token punctuation">,</span>                                               kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                               norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>layers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 传入定义好的特征提取层</span>        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 平均池化下采样层</span>        <span class="token comment" spellcheck="true"># 定义特征分类层</span>        classifier <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> dropout_rate <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Dropout</span>            classifier<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>dropout_rate<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        classifier<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>last_conv_output_c<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全连接层</span>        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>classifier<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># initial weights</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"fan_out"</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>ones_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_forward_impl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>classifier<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Tensor<span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_forward_impl<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后给出原论文中关于EfficientNet与当时主流网络的性能参数对比：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210306162051639.png" alt="EfficientNetvsothers"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> EfficientNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VGGNet</title>
      <link href="/vggnet.html"/>
      <url>/vggnet.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>2014年，牛津大学计算机视觉组和Google DeepMind公司的研究员一起研发出了新的深度卷积神经网络：VGGNet，并取得了ILSVRC2014比赛分类项目的第二名（第一名是GoogLeNet，也是同年提出的）和定位项目的第一名。</p><p>VGGNet可以看成是加深版的AlexNet，5层卷积层、3层全连接层、softmax层，层与层之间使用max-pooling，激活函数均为ReLU。</p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h2><ul><li>训练网络时，输入的图像大小是224*224的(测试时则不一定)，唯一的预处理步骤是减去均值。</li><li>所有的卷积层使用的都是3x3的卷积核(对比实验中用到了1x1的卷积核，它的作用在于引入更多的非线性。最终的VGG16和VGG19都不包含1x1的卷积核，所以它的出现只是为了做对比实验)。</li><li>为了使卷积后的feature map大小和卷积前相等，卷积核为3*3的卷积层的padding都设置为1。</li><li>使用max pooling，但并不是所有的卷积层后面都跟着pooling层，一共只有5个max pooling层。kernel大小是2*2，步长为2，也就是说，和AlexNet不同，VGGNet使用的是不重叠的pooling。</li><li>所有网络模型的最后三层都是全连接层。其中前两层都有4096个神经元，最后一层则是1000，每个代表一个分类类别。</li><li>所有的隐含层的激活函数都是ReLU函数，最后一层则是softmax层。</li><li>没有使用AlexNet中的LRN技术。这是因为后面的实验中证明了使用LRN对性能并没有提升作用，反而增加内存和时间消耗。</li></ul><h2 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a><strong>网络结构</strong></h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a><strong>整体架构</strong></h3><p>VGGNet的整体架构如图，六种网络结构使用不同数量的卷积核：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210903111650863.png" alt="image-20210903111650863"></p><p>每种网络结构都延续了AlexNet的架构设计，即5个卷积层、3个全连接层。区别就在于每一层所使用的卷积核数量、尺寸不同。根据层数的不同，又分别称作VGGNet16，VGGNet19等。值得一提的是，虽然网络从11层增加到19层，但是参数并没有很明显的增加，这是因为参数主要集中在全连接层。</p><p>以VGGNet16为例：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210903111820397.png" alt="image-20210903111820397"></p><ul><li><strong>前五层卷积层</strong></li></ul><p>卷积层使用的卷积核均为3x3，stride为1，padding为1。池化层使用最大池化，size2x2，stride为2。</p><p>每层使用的卷积核的组数：2 2 3 3 3。</p><p>卷积层深度：64-&gt;128-&gt;256-&gt;512-&gt;512。</p><p>特征图尺寸：224-&gt;112-&gt;56-&gt;28-&gt;14-&gt;7。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_features</span><span class="token punctuation">(</span>cfg<span class="token punctuation">:</span> list<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 传入cfgs参数</span>    layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    in_channels <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> cfg<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 遍历vgg网络的结构</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> <span class="token string">"M"</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果当前层标记为M，则代表最大池化层即maxpooling</span>            layers <span class="token operator">+=</span> <span class="token punctuation">[</span>nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 如果当前层没有标记为M，则代表卷积层且其数字代表卷积核个数</span>            conv2d <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>v<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            layers <span class="token operator">+=</span> <span class="token punctuation">[</span>conv2d<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            in_channels <span class="token operator">=</span> v    <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#  *layers 中的*表示非关键字参数传递</span>cfgs <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 下表中的数字代表卷积层卷积核个数，例如64表示该卷积层的卷积核个数为64</span>    <span class="token comment" spellcheck="true"># 字母M表示了最大池化层即maxpooling</span>    <span class="token string">'vgg11'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'vgg13'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'vgg16'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'vgg19'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>后三层全连接层</strong></li></ul><p>同AlexNet。</p><pre class="line-numbers language-python"><code class="language-python">        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>  <span class="token comment" spellcheck="true"># 分类网络结构</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span><span class="token operator">*</span><span class="token number">7</span><span class="token operator">*</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 全连接层</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-b86f5847bcaea7fd5d263850730ad303_720w.jpg" alt="VGG16网络结构图"></p><h2 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h2><h3 id="使用多个小卷积核构成的卷积层代替较大的卷积层"><a href="#使用多个小卷积核构成的卷积层代替较大的卷积层" class="headerlink" title="使用多个小卷积核构成的卷积层代替较大的卷积层"></a>使用多个小卷积核构成的卷积层代替较大的卷积层</h3><p>两个3x3卷积核的堆叠相对于5x5卷积核的视野，三个3x3卷积核的堆叠相当于7x7卷积核的视野。一方面减少参数，另一方面相当于进行了更多的非线性映射，可以增加拟合能力。</p><blockquote><p><strong>为什么不直接使用大的卷积核，而是使用多层3*3的卷积层来起到类似的作用呢？原因主要有两点：</strong></p><ul><li>层数越多，非线性因素就越多，决策函数的判别力更强。</li><li>虽然使用小的卷积核时，需要的层数会更多，但是需要学习的参数反而更少了，可以将层数更多、卷积核更小看作是对大的卷积核强加了正则化。比如对于卷积核大小都为3x3，通道数目都是C的三层卷积层来说，参数的数目是3x(3x3xCxC)=27xCxC；而卷积核大小为7x7，通道数目也是C的一层卷积层来说，参数的数目为7x7xCxC=49xCxC。</li></ul><p><strong>1*1的卷积核有什么作用？</strong></p><ul><li>在不影响卷积层的感受野的情况下，为模型引入更多的非线性。不影响感受野是显而易见的，非线性是怎么来的呢？是由于非线性激活函数的使用。</li></ul></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-c4fe70562cbec7413e431ff4b0a644d5_720w.jpg" alt="img"></p><h3 id="小池化核"><a href="#小池化核" class="headerlink" title="小池化核"></a>小池化核</h3><p>相比AlexNet的3x3的池化核，VGG全部为2x2的池化核。</p><h3 id="在训练时和预测时，使用Multi-Scale做数据增强"><a href="#在训练时和预测时，使用Multi-Scale做数据增强" class="headerlink" title="在训练时和预测时，使用Multi-Scale做数据增强"></a>在训练时和预测时，使用Multi-Scale做数据增强</h3><ul><li>训练时将同一张图片缩放到不同的尺寸，在随机剪裁到224*224的大小，能够增加数据量。</li><li>预测时将同一张图片缩放到不同尺寸做预测，最后取平均值。</li></ul><h3 id="感受野"><a href="#感受野" class="headerlink" title="感受野"></a>感受野</h3><p>感受野，通俗的说，输出特征图上的<strong>一个点</strong>所对应输入图上的<strong>那片区域</strong></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-e73d7f2803760fc1062ede0c6e8b0250_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210903113812613.png" alt="image-20210903113812613"></p><p>两层3x3的卷积核卷积操作之后的感受野是5x5，其中卷积核的步长为1、padding为0</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-04b390fe567ef839155a4ab45425ac47_720w.jpg" alt="img"></p><p>三层3x3卷积核操作之后的感受野是7x7，其中卷积核的步长为1，padding为0</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-078a0865d297baa773e47d05b8418d6f_720w.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> VGGNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ResNet</title>
      <link href="/resnet.html"/>
      <url>/resnet.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>参考传送门：<a href="https://blog.csdn.net/qq_37541097/article/details/104710784" target="_blank" rel="noopener">https://blog.csdn.net/qq_37541097/article/details/104710784</a></p><p>​                              <a href="https://blog.csdn.net/qq_37541097/article/details/104434557" target="_blank" rel="noopener">https://blog.csdn.net/qq_37541097/article/details/104434557</a></p><p>残差神经网络(ResNet)是由微软研究院的何恺明、张祥雨、任少卿、孙剑等人提出的。ResNet 在2015 年的ILSVRC（ImageNet Large Scale Visual Recognition Challenge）中取得了冠军。</p><p>残差神经网络的主要贡献是发现了“退化现象（Degradation）”，并针对退化现象发明了 “残差结构”，极大的消除了深度过大的神经网络训练困难问题。神经网络的“深度”首次突破了100层、最大的神经网络甚至超过了1000层。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200307105322237.jpg" alt="ResNet34"></p><h2 id="关键技术亮点"><a href="#关键技术亮点" class="headerlink" title="关键技术亮点"></a>关键技术亮点</h2><p>在ResNet网络提出之前，传统的卷积神经网络都是通过将一系列卷积层与下采样层进行堆叠得到的。但是当堆叠到一定网络深度时，就会出现两个问题。</p><ul><li><code>梯度消失或梯度爆炸</code></li><li><code>退化问题(degradation problem)</code></li></ul><p>在ResNet论文中说通过数据的预处理以及在网络中使用BN（Batch Normalization）层能够解决梯度消失或者梯度爆炸问题。</p><p>但是对于退化问题（随着网络层数的加深，效果还会变差，如下图所示）并没有很好的解决办法。因此ResNet论文提出了residual结构（残差结构）来减轻退化问题。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/2020030711090014.png" alt="img"></p><h3 id="残差结构"><a href="#残差结构" class="headerlink" title="残差结构"></a>残差结构</h3><p>下图是使用residual结构的卷积网络，可以看到随着网络的不断加深，效果并没有变差，反而变的更好了。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200307111052969.png" alt="img"></p><h4 id="残差结构简介"><a href="#残差结构简介" class="headerlink" title="残差结构简介"></a><strong>残差结构简介</strong></h4><p>下图是论文中给出的两种残差结构。左边的残差结构是针对层数较少网络，例如ResNet18层和ResNet34层网络。右边是针对网络层数较多的网络，例如ResNet101，ResNet152等。</p><p>为什么深层网络要使用右侧的残差结构呢。因为，右侧的残差结构能够减少网络参数与运算量。同样输入一个channel为256的特征矩阵，如果使用左侧的残差结构需要大约1170648个参数，但如果使用右侧的残差结构只需要69632个参数。明显搭建深层网络时，使用右侧的残差结构更合适。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200307112113629.png" alt="img"></p><h4 id="左侧的残差结构（针对ResNet18-34）"><a href="#左侧的残差结构（针对ResNet18-34）" class="headerlink" title="左侧的残差结构（针对ResNet18/34）"></a><strong>左侧的残差结构（针对ResNet18/34）</strong></h4><p>如下图所示，该残差结构的主分支是由<code>两层3x3的卷积层</code>组成，而残差结构右侧的连接线是shortcut分支也称捷径分支（注意为了让主分支上的输出矩阵能够与我们捷径分支上的输出矩阵进行相加，必须保证这两个输出特征矩阵有相同的shape）。</p><p>仔细阅读ResNet的结构图会发现图中会有一些虚线的残差结构。在原论文中作者只是简单说了这些虚线残差结构有降维的作用，并在捷径分支上通过1x1的卷积核进行降维处理。而下图右侧给出了详细的虚线残差结构，注意下每个卷积层的步距stride，以及捷径分支上的卷积核的个数（与主分支上的卷积核个数相同）。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200307115303893.png" alt="img"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义残差结构，此处定义的残差结构式针对ResNet 18层和34层的</span><span class="token keyword">class</span> <span class="token class-name">BasicBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    expansion <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 此参数用于标识参加结构中的卷积核大小是否是一样的</span>    <span class="token comment" spellcheck="true"># downsample=None ，此参数标识是否使用“捷径”</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>BasicBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用BatchNormalization时不需要设置偏置，因此bias=False</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>in_channel<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>out_channel<span class="token punctuation">,</span>                               kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channel<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>out_channel<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>out_channel<span class="token punctuation">,</span>                               kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channel<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        identity <span class="token operator">=</span> x        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            identity <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">+=</span> identity        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="右侧的残差结构（针对ResNet50-101-152）"><a href="#右侧的残差结构（针对ResNet50-101-152）" class="headerlink" title="右侧的残差结构（针对ResNet50/101/152）"></a><strong>右侧的残差结构（针对ResNet50/101/152）</strong></h4><p>在该残差结构当中，主分支使用了三个卷积层：</p><ul><li>第一个是1x1的卷积层用来压缩channel维度</li><li>第二个是3x3的卷积层</li><li>第三个是1x1的卷积层用来还原channel维度（注意主分支上第一层卷积层和第二层卷积层所使用的卷积核个数是相同的，第三层是第一层的4倍）</li></ul><p>该残差结构所对应的虚线残差结构如下图右侧所示，同样在捷径分支上有一层1x1的卷积层，它的卷积核个数与主分支上的第三层卷积层卷积核个数相同，注意每个卷积层的步距。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200307130433106.png" alt="img"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义残差结构，此处定义的残差结构式针对ResNet 50层、101层和152层的</span><span class="token keyword">class</span> <span class="token class-name">Bottleneck</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    注意：原论文中，在虚线残差结构的主分支上，第一个1x1卷积层的步距是2，第二个3x3卷积层步距是1。    但在pytorch官方实现过程中是第一个1x1卷积层的步距是1，第二个3x3卷积层步距是2，    这么做的好处是能够在top1上提升大概0.5%的准确率。    可参考Resnet v1.5 https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch    """</span>    expansion <span class="token operator">=</span> <span class="token number">4</span>  <span class="token comment" spellcheck="true"># 此参数为4 是因为残差结构最后一层卷积的深度是前面几层卷积深度的4倍</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span>None<span class="token punctuation">,</span>                 groups<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> width_per_group<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        width <span class="token operator">=</span> int<span class="token punctuation">(</span>out_channel <span class="token operator">*</span> <span class="token punctuation">(</span>width_per_group <span class="token operator">/</span> <span class="token number">64</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> groups        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>in_channel<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>width<span class="token punctuation">,</span>                               kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># squeeze channels</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>width<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># -----------------------------------------</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>width<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>width<span class="token punctuation">,</span> groups<span class="token operator">=</span>groups<span class="token punctuation">,</span>                               kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>width<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># -----------------------------------------</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span>width<span class="token punctuation">,</span> out_channels<span class="token operator">=</span>out_channel<span class="token operator">*</span>self<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span>                               kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># unsqueeze channels</span>        self<span class="token punctuation">.</span>bn3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channel<span class="token operator">*</span>self<span class="token punctuation">.</span>expansion<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        identity <span class="token operator">=</span> x        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            identity <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn2<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">=</span> self<span class="token punctuation">.</span>bn3<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        out <span class="token operator">+=</span> identity        out <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>out<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>原论文中，在下图右侧虚线残差结构的主分支中，第一个1x1卷积层的步距是2，第二个3x3卷积层步距是1。但在pytorch官方实现过程中是第一个1x1卷积层的步距是1，第二个3x3卷积层步距是2，这么做的好处是能够在top1上提升大概0.5%的准确率。可参考Resnet v1.5 <a href="https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch" target="_blank" rel="noopener">https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch</a></p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210416180003786.png" alt="img"></p><h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h3><blockquote><p>Batch Normalization是google团队在2015年论文《Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift》提出的。通过该方法能够加速网络的收敛并提升准确率。</p><p><a href="https://www.bilibili.com/video/av9770302?p=10" target="_blank" rel="noopener">https://www.bilibili.com/video/av9770302?p=10</a> </p></blockquote><h4 id="Batch-Normalization原理"><a href="#Batch-Normalization原理" class="headerlink" title="Batch Normalization原理"></a>Batch Normalization原理</h4><p>我们在图像预处理过程中通常会对图像进行标准化处理，这样能够加速网络的收敛，如下图所示，对于Conv1来说输入的就是满足某一分布的特征矩阵，但对于Conv2而言输入的feature map就不一定满足某一分布规律了（注意这里所说满足某一分布规律并不是指某一个feature map的数据要满足分布规律，理论上是指整个训练样本集所对应feature map的数据要满足分布规律）。而我们Batch Normalization的目的就是使我们的feature map满足均值为0，方差为1的分布规律。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200221211618570.png" alt="img"></p><p>下面是从原论文中截取的原话，注意标黄的部分：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200221214131291.png" alt="img"></p><p>“对于一个拥有d维的输入x，我们将对它的每一个维度进行标准化处理。”  假设我们输入的x是RGB三通道的彩色图像，那么这里的d就是输入图像的channels即d=3，，其中就代表我们的R通道所对应的特征矩阵，依此类推。标准化处理也就是分别对我们的R通道，G通道，B通道进行处理。上面的公式不用看，原文提供了更加详细的计算公式：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200221215813522.png" alt="img"></p><p>我们刚刚有说<strong>让feature map满足某一分布规律，理论上是指整个训练样本集所对应feature map的数据要满足分布规律</strong>，也就是说要计算出整个训练集的feature map然后在进行标准化处理，对于一个大型的数据集明显是不可能的，所以论文中说的是Batch Normalization，也就是我们计算一个Batch数据的feature map然后在进行标准化（batch越大越接近整个数据集的分布，效果越好）。我们根据上图的公式可以知道<img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/gif.latex" alt="\mu _{\ss }">代表着我们计算的feature map每个维度（channel)的均值，<strong>注意<img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/gif.latex" alt="\mu _{\ss }">是一个向量不是一个值</strong>，<img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/gif.latex" alt="\mu _{\ss }">向量的每一个元素代表着一个维度（channel）的均值。![\sigma_{\ss }^{2}](<a href="https://private.codecogs.com/gif.latex?\sigma_{\ss" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\sigma_{\ss</a> }^{2})代表着我们计算的feature map每个维度（channel)的方差，<strong>注意![\sigma_{\ss }^{2}](<a href="https://private.codecogs.com/gif.latex?\sigma_{\ss" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\sigma_{\ss</a> }^{2})是一个向量不是一个值</strong>，![\sigma_{\ss }^{2}](<a href="https://private.codecogs.com/gif.latex?\sigma_{\ss" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\sigma_{\ss</a> }^{2})向量的每一个元素代表着一个维度（channel)的方差，然后根据<img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/gif.latex" alt="\mu _{\ss }">和![\sigma_{\ss }^{2}](<a href="https://private.codecogs.com/gif.latex?\sigma_{\ss" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\sigma_{\ss</a> }^{2})计算标准化处理后得到的值。下图给出了一个计算均值<img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/gif.latex" alt="\mu _{\ss }">和方差![\sigma_{\ss }^{2}](<a href="https://private.codecogs.com/gif.latex?\sigma_{\ss" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\sigma_{\ss</a> }^{2})的示例：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200226145423805.png" alt="img"></p><p>上图展示了一个batch size为2（两张图片）的Batch Normalization的计算过程，假设feature1、feature2分别是由image1、image2经过一系列卷积池化后得到的特征矩阵，feature的channel为2，那么x^(1)^代表该batch的所有feature的channel1的数据，同理x^(2)^代表该batch的所有feature的channel2的数据。然后分别计算x^(1)^和x^(2)^的均值与方差，得到我们的<img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/gif.latex" alt="\mu _{\ss }">和![\sigma_{\ss }^{2}](<a href="https://private.codecogs.com/gif.latex?\sigma_{\ss" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\sigma_{\ss</a> }^{2})两个向量。然后在根据标准差计算公式<strong>分别</strong>计算每个channel的值（公式中的<img src="https://private.codecogs.com/gif.latex?%5Cepsilon" alt="\epsilon">是一个很小的常量，防止分母为零的情况）。在我们训练网络的过程中，我们是通过一个batch一个batch的数据进行训练的，但是我们在预测过程中通常都是输入一张图片进行预测，此时batch size为1，如果在通过上述方法计算均值和方差就没有意义了。所以我们在训练过程中要去不断的计算每个batch的均值和方差，并使用移动平均(moving average)的方法记录统计的均值和方差，在我们训练完后我们可以近似认为我们所统计的均值和方差就等于我们整个训练集的均值和方差。然后在我们验证以及预测过程中，就使用我们统计得到的均值和方差进行标准化处理。</p><p>细心的同学会发现，在原论文公式中不是还有<img src="https://private.codecogs.com/gif.latex?%5Cgamma" alt="\gamma">，<img src="https://private.codecogs.com/gif.latex?%5Cbeta" alt="\beta">两个参数吗？是的，<img src="https://private.codecogs.com/gif.latex?%5Cgamma" alt="\gamma">是用来调整数值分布的方差大小，<img src="https://private.codecogs.com/gif.latex?%5Cbeta" alt="\beta">是用来调节数值均值的位置。这两个参数是在反向传播过程中学习得到的，<img src="https://private.codecogs.com/gif.latex?%5Cgamma" alt="\gamma">的默认值是1，<img src="https://private.codecogs.com/gif.latex?%5Cbeta" alt="\beta">的默认值是0。</p><h4 id="使用pytorch进行试验"><a href="#使用pytorch进行试验" class="headerlink" title="使用pytorch进行试验"></a><strong>使用pytorch进行试验</strong></h4><p>刚刚说了在我们训练过程中，均值<img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/gif.latex" alt="\mu _{\ss }">和方差![\sigma_{\ss }^{2}](<a href="https://private.codecogs.com/gif.latex?\sigma_{\ss" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\sigma_{\ss</a> }^{2})是通过计算当前批次数据得到的记为![\mu <em>{now}](<a href="https://private.codecogs.com/gif.latex?\mu" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\mu</a> _{now})和![\sigma _{now}^{2}](<a href="https://private.codecogs.com/gif.latex?%5Csigma%20" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?%5Csigma%20</a></em>%7Bnow%7D%5E%7B2%7D)，而我们的验证以及预测过程中所使用的均值方差是一个统计量记为<img src="https://private.codecogs.com/gif.latex?%5Cmu%20_%7Bstatistic%7D" alt="\mu _{statistic}">和<img src="https://private.codecogs.com/gif.latex?%5Csigma%20_%7Bstatistic%7D%5E%7B2%7D" alt="\sigma _{statistic}^{2}">。<img src="https://private.codecogs.com/gif.latex?%5Cmu%20_%7Bstatistic%7D" alt="\mu _{statistic}">和<img src="https://private.codecogs.com/gif.latex?%5Csigma%20_%7Bstatistic%7D%5E%7B2%7D" alt="\sigma _{statistic}^{2}">的具体更新策略如下，其中momentum默认取0.1：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210906150113407.png" alt="image-20210906150113407"></p><p>这里要注意一下，在pytorch中对当前批次feature进行bn处理时所使用的<img src="https://private.codecogs.com/gif.latex?%5Cbg_white%20%5Clarge%20%5Csigma%20_%7Bnow%7D%5E%7B2%7D" alt="\large \sigma _{now}^{2}">是总体标准差，计算公式如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210906150326207.png" alt="image-20210906150326207"></p><p>在更新统计量<img src="https://private.codecogs.com/gif.latex?%5Cbg_white%20%5Clarge%20%5Csigma%20_%7Bstatistic%7D%5E%7B2%7D" alt="\large \sigma _{statistic}^{2}">时采用的<img src="https://private.codecogs.com/gif.latex?%5Cbg_white%20%5Clarge%20%5Csigma%20_%7Bnow%7D%5E%7B2%7D" alt="\large \sigma _{now}^{2}">是样本标准差，计算公式如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210906150335257.png" alt="image-20210906150335257"></p><p>下面是我使用pytorch做的测试，代码如下：</p><p>（1）bn_process函数是自定义的bn处理方法验证是否和使用官方bn处理方法结果一致。在bn_process中计算输入batch数据的每个维度（这里的维度是channel维度）的均值和标准差（标准差等于方差开平方），然后通过计算得到的均值和总体标准差对feature每个维度进行标准化，然后使用均值和样本标准差更新统计均值和标准差。</p><p>（2）初始化统计均值是一个元素为0的向量，元素个数等于channel深度；初始化统计方差是一个元素为1的向量，元素个数等于channel深度，初始化<img src="https://private.codecogs.com/gif.latex?%5Cgamma" alt="\gamma">=1，<img src="https://private.codecogs.com/gif.latex?%5Cbeta" alt="\beta">=0。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token keyword">def</span> <span class="token function">bn_process</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> var<span class="token punctuation">)</span><span class="token punctuation">:</span>    feature_shape <span class="token operator">=</span> feature<span class="token punctuation">.</span>shape    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>feature_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># [batch, channel, height, width]</span>        feature_t <span class="token operator">=</span> feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        mean_t <span class="token operator">=</span> feature_t<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 总体标准差</span>        std_t1 <span class="token operator">=</span> feature_t<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 样本标准差</span>        std_t2 <span class="token operator">=</span> feature_t<span class="token punctuation">.</span>std<span class="token punctuation">(</span>ddof<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># bn process</span>        <span class="token comment" spellcheck="true"># 这里记得加上eps和pytorch保持一致</span>        feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>feature<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> mean_t<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>std_t1 <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># update calculating mean and var</span>        mean<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mean<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token operator">+</span> mean_t <span class="token operator">*</span> <span class="token number">0.1</span>        var<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> var<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token operator">+</span> <span class="token punctuation">(</span>std_t2 <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机生成一个batch为2，channel为2，height=width=2的特征向量</span><span class="token comment" spellcheck="true"># [batch, channel, height, width]</span>feature1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化统计均值和方差</span>calculate_mean <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">]</span>calculate_var <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># print(feature1.numpy())</span><span class="token comment" spellcheck="true"># 注意要使用copy()深拷贝</span>bn_process<span class="token punctuation">(</span>feature1<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> calculate_mean<span class="token punctuation">,</span> calculate_var<span class="token punctuation">)</span>bn <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>output <span class="token operator">=</span> bn<span class="token punctuation">(</span>feature1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我在最后设置了一个断点进行调试，查看下官方bn对feature处理后得到的统计均值和方差。我们可以发现官方提供的bn的running_mean和running_var和我们自己计算的calculate_mean和calculate_var是一模一样的（只是精度不同）。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210906150511631.png" alt="image-20210906150511631"></p><p>然后我们打印出通过自定义bn_process函数得到的输出以及使用官方bn处理得到输出，明显结果是一样的（只是精度不同）：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210906150538730.png" alt="image-20210906150538730"></p><h4 id="使用BN时需要注意的问题"><a href="#使用BN时需要注意的问题" class="headerlink" title="使用BN时需要注意的问题"></a>使用BN时需要注意的问题</h4><ul><li><p>训练时要将traning参数设置为True，在验证时将trainning参数设置为False。在pytorch中可通过创建模型的model.train()和model.eval()方法控制。</p></li><li><p>batch size尽可能设置大点，设置小后表现可能很糟糕，设置的越大求的均值和方差越接近整个训练集的均值和方差。</p></li><li><p>建议将bn层放在卷积层（Conv）和激活层（例如Relu）之间，且卷积层不要使用偏置bias，因为没有用，参考下图推理，即使使用了偏置bias求出的结果也是一样的![\bg_white \large y_{i}^{b}=y_{i}](<a href="https://private.codecogs.com/gif.latex?\bg_white" target="_blank" rel="noopener">https://private.codecogs.com/gif.latex?\bg_white</a> \large y_{i}^{b}%3Dy_{i})</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210906150637170.png" alt="image-20210906150637170"></p><h2 id="ResNet结构参数"><a href="#ResNet结构参数" class="headerlink" title="ResNet结构参数"></a>ResNet结构参数</h2><p>下面这幅图是原论文给出的不同深度的ResNet网络结构配置，注意表中的残差结构给出了主分支上卷积核的大小与卷积核个数，表中的xN表示将该残差结构重复N次。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200307131256537.png" alt="img"></p><p>对于我们ResNet18/34/50/101/152，<code>表中conv3_x, conv4_x, conv5_x所对应的一系列残差结构的第一层残差结构都是虚线残差结构</code>。因为这一系列残差结构的第一层都有<code>调整输入特征矩阵shape</code>的使命（将特征矩阵的高和宽缩减为原来的一半，将深度channel调整成下一层残差结构所需要的channel）。为了方便理解，下面给出了ResNet34的网络结构图，图中简单标注了一些信息。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200307132651290.jpg" alt="img"></p><p>对于我们ResNet50/101/152，其实在conv2_x所对应的一系列残差结构的第一层也是虚线残差结构。因为它需要调整输入特征矩阵的channel，根据表格可知通过3x3的max pool之后输出的特征矩阵shape应该是[56, 56, 64]，但我们conv2_x所对应的一系列残差结构中的实线残差结构它们期望的输入特征矩阵shape是[56, 56, 256]（因为这样才能保证输入输出特征矩阵shape相同，才能将捷径分支的输出与主分支的输出进行相加）。所以第一层残差结构需要将shape从[56, 56, 64] –&gt; [56, 56, 256]。注意，这里只调整channel维度，高和宽不变（而conv3_x, conv4_x, conv5_x所对应的一系列残差结构的第一层虚线残差结构不仅要调整channel还要将高和宽缩减为原来的一半）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># block      参数是传入的残差网络结构,如果是ResNet50，则是Bottleneck</span>    <span class="token comment" spellcheck="true"># blocks_num 参数是残差网络的堆叠数量，是一个列表，如果是ResNet50，则是[3,4,6,3]</span>    <span class="token comment" spellcheck="true"># include_top=True 此参数是为了定义更加复杂网络而使用的</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 block<span class="token punctuation">,</span>                 blocks_num<span class="token punctuation">,</span>                 num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                 include_top<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 groups<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                 width_per_group<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ResNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>include_top <span class="token operator">=</span> include_top        self<span class="token punctuation">.</span>in_channel <span class="token operator">=</span> <span class="token number">64</span>        self<span class="token punctuation">.</span>groups <span class="token operator">=</span> groups        self<span class="token punctuation">.</span>width_per_group <span class="token operator">=</span> width_per_group        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>in_channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>                               padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channel<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>maxpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义残差结构 conv2.x</span>        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> blocks_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义残差结构 conv3.x</span>        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> blocks_num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义残差结构 conv4.x</span>        self<span class="token punctuation">.</span>layer3 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> blocks_num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义残差结构 conv5.x</span>        self<span class="token punctuation">.</span>layer4 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> blocks_num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>include_top<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 自适应平均池化下采样</span>            self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># output size = (1, 1)</span>            self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对卷积层进行初始化操作</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'fan_out'</span><span class="token punctuation">,</span> nonlinearity<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_make_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> block_num<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># channel是残差网络第一层卷积层的深度大小</span>        <span class="token comment" spellcheck="true"># block_num表示该残差堆叠多少次</span>        downsample <span class="token operator">=</span> None        <span class="token comment" spellcheck="true"># 判断该残差结构是否使用捷径，且此处定义的是残差结构中虚线的部分</span>        <span class="token keyword">if</span> stride <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">or</span> self<span class="token punctuation">.</span>in_channel <span class="token operator">!=</span> channel <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">:</span>            downsample <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channel<span class="token punctuation">,</span> channel <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>channel <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">)</span><span class="token punctuation">)</span>        layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channel<span class="token punctuation">,</span>                            channel<span class="token punctuation">,</span>                            downsample<span class="token operator">=</span>downsample<span class="token punctuation">,</span>                            stride<span class="token operator">=</span>stride<span class="token punctuation">,</span>                            groups<span class="token operator">=</span>self<span class="token punctuation">.</span>groups<span class="token punctuation">,</span>                            width_per_group<span class="token operator">=</span>self<span class="token punctuation">.</span>width_per_group<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>in_channel <span class="token operator">=</span> channel <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> block_num<span class="token punctuation">)</span><span class="token punctuation">:</span>            layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channel<span class="token punctuation">,</span>                                channel<span class="token punctuation">,</span>                                groups<span class="token operator">=</span>self<span class="token punctuation">.</span>groups<span class="token punctuation">,</span>                                width_per_group<span class="token operator">=</span>self<span class="token punctuation">.</span>width_per_group<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>include_top<span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token keyword">def</span> <span class="token function">resnet34</span><span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># https://download.pytorch.org/models/resnet34-333f7ec4.pth</span>    <span class="token keyword">return</span> ResNet<span class="token punctuation">(</span>BasicBlock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span> include_top<span class="token operator">=</span>include_top<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">resnet50</span><span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># https://download.pytorch.org/models/resnet50-19c8e357.pth</span>    <span class="token keyword">return</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span> include_top<span class="token operator">=</span>include_top<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">resnet101</span><span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># https://download.pytorch.org/models/resnet101-5d3b4d8f.pth</span>    <span class="token keyword">return</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span> include_top<span class="token operator">=</span>include_top<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">resnext50_32x4d</span><span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth</span>    groups <span class="token operator">=</span> <span class="token number">32</span>    width_per_group <span class="token operator">=</span> <span class="token number">4</span>    <span class="token keyword">return</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span>                  include_top<span class="token operator">=</span>include_top<span class="token punctuation">,</span>                  groups<span class="token operator">=</span>groups<span class="token punctuation">,</span>                  width_per_group<span class="token operator">=</span>width_per_group<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">resnext101_32x8d</span><span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> include_top<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># https://download.pytorch.org/models/resnext101_32x8d-8ba56ff5.pth</span>    groups <span class="token operator">=</span> <span class="token number">32</span>    width_per_group <span class="token operator">=</span> <span class="token number">8</span>    <span class="token keyword">return</span> ResNet<span class="token punctuation">(</span>Bottleneck<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  num_classes<span class="token operator">=</span>num_classes<span class="token punctuation">,</span>                  include_top<span class="token operator">=</span>include_top<span class="token punctuation">,</span>                  groups<span class="token operator">=</span>groups<span class="token punctuation">,</span>                  width_per_group<span class="token operator">=</span>width_per_group<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> ResNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MobileNet</title>
      <link href="/mobilenet.html"/>
      <url>/mobilenet.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>参考传送门：<a href="https://blog.csdn.net/qq_37541097/article/details/105771329" target="_blank" rel="noopener">https://blog.csdn.net/qq_37541097/article/details/105771329</a></p><p>​                              <a href="https://blog.csdn.net/baidu_36913330/article/details/120083490" target="_blank" rel="noopener">https://blog.csdn.net/baidu_36913330/article/details/120083490</a></p></blockquote><p>在之前的文章中讲的AlexNet、VGG、GoogLeNet以及ResNet网络，它们都是传统卷积神经网络（都是使用的传统卷积层），缺点在于内存需求大、运算量大导致无法在移动设备以及嵌入式设备上运行。而本文要讲的MobileNet网络就是专门为移动端，嵌入式端而设计。</p><h2 id="MobileNet-v1"><a href="#MobileNet-v1" class="headerlink" title="MobileNet v1"></a>MobileNet v1</h2><p>MobileNet网络是由google团队在2017年提出的，专注于移动端或者嵌入式设备中的轻量级CNN网络。相比传统卷积神经网络，在准确率小幅降低的前提下大大减少模型参数与运算量。(相比VGG16准确率减少了0.9%，但模型参数只有VGG的1/32)。</p><blockquote><p><strong>MobileNet网络的优点</strong></p><p>网络中的Depthwise Convolution结构 (<code>大大减少运算量和参数数量</code>)。</p></blockquote><p>下图展示了传统卷积与DW卷积的差异：</p><ul><li>在传统卷积中，每个卷积核的channel与输入特征矩阵的channel相等（每个卷积核都会与输入特征矩阵的每一个维度进行卷积运算）</li><li>在DW卷积中，每个卷积核的channel都是等于1的（每个卷积核只负责输入特征矩阵的一个channel，故卷积核的个数必须等于输入特征矩阵的channel数，从而使得输出特征矩阵的channel数也等于输入特征矩阵的channel数）</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200426162556656.png" alt="dw卷积与普通卷积"></p><p>刚刚说了使用DW卷积后输出特征矩阵的channel是与输入特征矩阵的channel相等的，如果想改变/自定义输出特征矩阵的channel，那只需要在DW卷积后接上一个PW卷积即可，如下图所示，其实PW卷积就是普通的卷积而已（只不过卷积核大小为1）。通常DW卷积和PW卷积是放在一起使用的，一起叫做Depthwise Separable Convolution（深度可分卷积）。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200426163946303.png" alt="DW卷积和PW卷积"></p><p>那Depthwise Separable Convolution（深度可分卷积）与传统的卷积相比有到底能节省多少计算量呢，下图对比了这两个卷积方式的<code>计算量</code>，其中：</p><ul><li>Df是输入特征矩阵的宽高（这里假设宽和高相等）</li><li>Dk是卷积核的大小</li><li>M是输入特征矩阵的channel</li><li>N是输出特征矩阵的channel</li></ul><p><code>卷积计算量近似等于卷积核的高 x 卷积核的宽 x 卷积核的channel x 输入特征矩阵的高 x 输入特征矩阵的宽（这里假设stride等于1）</code></p><p>在我们mobilenet网络中DW卷积都是是使用3x3大小的卷积核。所以理论上普通卷积计算量是DW+PW卷积的8到9倍（公式来源于原论文）：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200426164254206.png" alt="计算量对比"></p><p>在了解完Depthwise Separable Convolution（深度可分卷积）后在看下<code>mobilenet v1的网络结构</code>，左侧的表格是mobileNetv1的网络结构，表中标记：</p><ul><li>Conv表示普通卷积</li><li>Conv dw表示DW卷积</li><li>s表示步距</li></ul><p>在mobilenetv1原论文中，还提出了两个超参数，一个是α，一个是β：</p><ul><li>α参数是一个倍率因子，用来调整卷积核的个数</li><li>β参数是控制输入网络的图像尺寸参数</li></ul><p>下图右侧给出了使用不同α和β网络的分类准确率，计算量以及模型参数：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200426165207571.png" alt="mobilenet v1"></p><h2 id="MobileNet-v2"><a href="#MobileNet-v2" class="headerlink" title="MobileNet v2"></a>MobileNet v2</h2><p>在MobileNet v1的网络结构表中能够发现，网络的结构就像VGG一样是个直筒型的，不像ResNet网络有shortcut之类的连接方式。而且有人反映说MobileNet v1网络中的DW卷积很容易训练废掉，效果并没有那么理想。所以我们接着看下MobileNet v2网络。</p><p>MobileNet v2网络是由google团队在2018年提出的，相比MobileNet V1网络，准确率更高，模型更小。</p><ul><li>MobileNet v1网络中的亮点是DW卷积</li><li>MobileNet v2中的亮点就是Inverted residual block（倒残差结构）</li></ul><p>如下下图所示，左侧是ResNet网络中的残差结构，右侧就是MobileNet v2中的到残差结构。</p><ul><li>在残差结构中是        1x1卷积降维 - -&gt;  3x3卷积  –&gt;  1x1卷积升维</li><li>在倒残差结构中是    1x1卷积升维 - -&gt;  3x3DW卷积 –&gt;  1x1卷积降维（正好相反）</li></ul><p>为什么要这样做，原文的解释是高维信息通过ReLU激活函数后丢失的信息更少（注意倒残差结构中基本使用的都是ReLU6激活函数，但是最后一个1x1的卷积层使用的是线性激活函数）。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200426171005366.png" alt="倒残差结构"></p><p>在使用倒残差结构时需要注意下，<code>并不是所有的倒残差结构都有shortcut连接</code>，只有当stride=1且输入特征矩阵与输出特征矩阵shape相同时才有shortcut连接（只有当shape相同时，两个矩阵才能做加法运算，当stride=1时并不能保证输入特征矩阵的channel与输出特征矩阵的channel相同）。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200426171906852.png" alt="倒残差shortcut"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ConvBNReLU</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># groups=1 , 此参数决定是使用普通卷积还是使用dw卷积，当groups=1时是使用普通卷积，当groups=in_channel的时候是使用dw卷积</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> groups<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        padding <span class="token operator">=</span> <span class="token punctuation">(</span>kernel_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        super<span class="token punctuation">(</span>ConvBNReLU<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>            <span class="token comment" spellcheck="true"># bias=False, 因为卷积之后会使用BN层，则此处偏置不进行设置</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> padding<span class="token punctuation">,</span> groups<span class="token operator">=</span>groups<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channel<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU6<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用ReLU6激活函数进行激活</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义倒残差结构</span><span class="token keyword">class</span> <span class="token class-name">InvertedResidual</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># expand_ratio 参数为扩展因子，为MobileNet模型表中的t</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> expand_ratio<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>InvertedResidual<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        hidden_channel <span class="token operator">=</span> in_channel <span class="token operator">*</span> expand_ratio        <span class="token comment" spellcheck="true">#  self.use_shortcut 此参数是一个bool变量，用于判断是否使用捷径分支</span>        self<span class="token punctuation">.</span>use_shortcut <span class="token operator">=</span> <span class="token punctuation">(</span>stride <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> in_channel <span class="token operator">==</span> out_channel<span class="token punctuation">)</span>        layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 定义一个层列表</span>        <span class="token keyword">if</span> expand_ratio <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 1x1 pointwise conv</span>            layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ConvBNReLU<span class="token punctuation">(</span>in_channel<span class="token punctuation">,</span> hidden_channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layers<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true"># 3x3 depthwise conv</span>            <span class="token comment" spellcheck="true"># groups=hidden_channel 表示此卷积是dw卷积</span>            ConvBNReLU<span class="token punctuation">(</span>hidden_channel<span class="token punctuation">,</span> hidden_channel<span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> groups<span class="token operator">=</span>hidden_channel<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 1x1 pointwise conv(linear)</span>            <span class="token comment" spellcheck="true"># 此部分是普通卷积</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>hidden_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channel<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组合倒残差结构的各层</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 若使用捷径分支，则将捷径分支上的输出加入到主分支</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_shortcut<span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下图是MobileNet v2网络的结构表，其中：</p><ul><li>t代表的是扩展因子（倒残差结构中第一个1x1卷积的扩展因子）</li><li>c代表输出特征矩阵的channel</li><li>n代表倒残差结构重复的次数</li><li>s代表步距（注意：<code>这里的步距只是针对重复n次的第一层倒残差结构，后面的都默认为1</code>）</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200426172803520.png" alt="MobileNet v2结构"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token comment" spellcheck="true"># 此函数将ch修正为divisor的整数倍</span><span class="token keyword">def</span> <span class="token function">_make_divisible</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> divisor<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> min_ch<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    This function is taken from the original tf repo.    It ensures that all layers have a channel number that is divisible by 8    It can be seen here:    https://github.com/tensorflow/models/blob/master/research/slim/nets/mobilenet/mobilenet.py    """</span>    <span class="token keyword">if</span> min_ch <span class="token keyword">is</span> None<span class="token punctuation">:</span>        min_ch <span class="token operator">=</span> divisor    new_ch <span class="token operator">=</span> max<span class="token punctuation">(</span>min_ch<span class="token punctuation">,</span> int<span class="token punctuation">(</span>ch <span class="token operator">+</span> divisor <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> divisor <span class="token operator">*</span> divisor<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Make sure that round down does not go down by more than 10%.</span>    <span class="token keyword">if</span> new_ch <span class="token operator">&lt;</span> <span class="token number">0.9</span> <span class="token operator">*</span> ch<span class="token punctuation">:</span>        new_ch <span class="token operator">+=</span> divisor    <span class="token keyword">return</span> new_ch<span class="token keyword">class</span> <span class="token class-name">ConvBNReLU</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># groups=1 , 此参数决定是使用普通卷积还是使用dw卷积，当groups=1时是使用普通卷积，当groups=in_channel的时候是使用dw卷积</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> groups<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        padding <span class="token operator">=</span> <span class="token punctuation">(</span>kernel_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        super<span class="token punctuation">(</span>ConvBNReLU<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>            <span class="token comment" spellcheck="true"># bias=False, 因为卷积之后会使用BN层，则此处偏置不进行设置</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> padding<span class="token punctuation">,</span> groups<span class="token operator">=</span>groups<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channel<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU6<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用ReLU6激活函数进行激活</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义倒残差结构</span><span class="token keyword">class</span> <span class="token class-name">InvertedResidual</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># expand_ratio 参数为扩展因子，为MobileNet模型表中的t</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> expand_ratio<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>InvertedResidual<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        hidden_channel <span class="token operator">=</span> in_channel <span class="token operator">*</span> expand_ratio        <span class="token comment" spellcheck="true">#  self.use_shortcut 此参数是一个bool变量，用于判断是否使用捷径分支</span>        self<span class="token punctuation">.</span>use_shortcut <span class="token operator">=</span> <span class="token punctuation">(</span>stride <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">and</span> in_channel <span class="token operator">==</span> out_channel<span class="token punctuation">)</span>        layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 定义一个层列表</span>        <span class="token keyword">if</span> expand_ratio <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 1x1 pointwise conv</span>            layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ConvBNReLU<span class="token punctuation">(</span>in_channel<span class="token punctuation">,</span> hidden_channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layers<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true"># 3x3 depthwise conv</span>            <span class="token comment" spellcheck="true"># groups=hidden_channel 表示此卷积是dw卷积</span>            ConvBNReLU<span class="token punctuation">(</span>hidden_channel<span class="token punctuation">,</span> hidden_channel<span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> groups<span class="token operator">=</span>hidden_channel<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># 1x1 pointwise conv(linear)</span>            <span class="token comment" spellcheck="true"># 此部分是普通卷积</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>hidden_channel<span class="token punctuation">,</span> out_channel<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channel<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组合倒残差结构的各层</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 若使用捷径分支，则将捷径分支上的输出加入到主分支</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>use_shortcut<span class="token punctuation">:</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义MobileNetV2网络模型</span><span class="token keyword">class</span> <span class="token class-name">MobileNetV2</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># alpha=1.0 此参数即超参数a，是用来控制卷积层卷积核个数的倍率</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> round_nearest<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>MobileNetV2<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        block <span class="token operator">=</span> InvertedResidual        input_channel <span class="token operator">=</span> _make_divisible<span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">*</span> alpha<span class="token punctuation">,</span> round_nearest<span class="token punctuation">)</span>        last_channel <span class="token operator">=</span> _make_divisible<span class="token punctuation">(</span><span class="token number">1280</span> <span class="token operator">*</span> alpha<span class="token punctuation">,</span> round_nearest<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义MobileNetV2的倒残差网络的参数列表</span>        inverted_residual_setting <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token comment" spellcheck="true"># t, c, n, s</span>            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># conv1 layer</span>        features<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ConvBNReLU<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> input_channel<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># building inverted residual residual blockes</span>        <span class="token keyword">for</span> t<span class="token punctuation">,</span> c<span class="token punctuation">,</span> n<span class="token punctuation">,</span> s <span class="token keyword">in</span> inverted_residual_setting<span class="token punctuation">:</span>            output_channel <span class="token operator">=</span> _make_divisible<span class="token punctuation">(</span>c <span class="token operator">*</span> alpha<span class="token punctuation">,</span> round_nearest<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                stride <span class="token operator">=</span> s <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 表格中的步距s仅仅表示第一层的步距，其他层均为1</span>                features<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>input_channel<span class="token punctuation">,</span> output_channel<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> expand_ratio<span class="token operator">=</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>                input_channel <span class="token operator">=</span> output_channel        <span class="token comment" spellcheck="true"># building last several layers</span>        features<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ConvBNReLU<span class="token punctuation">(</span>input_channel<span class="token punctuation">,</span> last_channel<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># combine feature layers</span>        self<span class="token punctuation">.</span>features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>features<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 组合用于特征提取的各层</span>        <span class="token comment" spellcheck="true"># building classifier</span>        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>last_channel<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># weight initialization</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'fan_out'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>ones_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 展平处理</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>classifier<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MobileNet-V3"><a href="#MobileNet-V3" class="headerlink" title="MobileNet V3"></a>MobileNet V3</h2><p>MobileNetV3 是由 google 团队在 2019 年提出的，其原始论文为 Searching for MobileNetV3。MobileNetV3 有以下三点值得注意：</p><ul><li>更新 Block (bneck)</li><li>使用 NAS 搜索参数 (Neural Architecture Search)</li><li>重新设计耗时层结构</li></ul><p>相比于 MobileNetV2 版本而言，具体 MobileNetV3 在性能上有哪些提升呢？在原论文摘要中，作者提到在 ImageNet 分类任务中正确率上升了 3.2%，计算延时还降低了 20%。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/f9de3e4c97b844bbbc2e2f1e1529fea3.png" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20fcb2e5fc0945be902f320d87786628.png" alt="请添加图片描述"></p><p><strong>更新 Block (bneck)</strong></p><p>首先我们来看一下在 MobileNetV3 中 block 如何被更新的。乍一看没有太大的区别，最显眼的部分就是加入了 SE 模块，即注意力机制；其次是更新了激活函数。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/7e30a11cb2e04410a534e2cca1503d02.png" alt="请添加图片描述"></p><p>这里的注意力机制想法非常简单，即针对每一个 channel 进行池化处理，就得到了 channel 个数个元素，通过两个全连接层，得到输出的这个向量。值得注意的是：</p><ul><li>第一个全连接层的节点个数等于 channel 个数的 1/4，</li><li>第二个全连接层的节点就和 channel 保持一致。</li></ul><p>这个得到的输出就相当于对原始的特征矩阵的每个 channel 分析出来了其重要程度，越重要的赋予越大的权重，越不重要的就赋予越小的权重。我们用下图来进行理解，首先采用平均池化将每一个 channel 变为一个值，然后经过两个全连接层之后得到通道权重的输出，值得注意的是第二个全连接层使用 Hard-Sigmoid 激活函数。然后将通道的权重乘回原来的特征矩阵就得到了新的特征矩阵。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/765251eb075b498faa9e1d949bbcce9f.png" alt="请添加图片描述"></p><p><strong>使用 NAS 搜索参数 (Neural Architecture Search)</strong></p><p>虽然 MobileNetV3 结构我们已经知道了，但是 如何设计出的这个网络，如何进行网络结构的搜索？ 结合论文标题 “Searching for” 我们还是有必要简单提一下。之所以简单说，是因为我现在也不太懂 。总体而言，先使用 NAS 算法，优化每一个 block，得到大体的网络结构，然后使用 NetAdapt 算法来确定每个 filter 的 channel 的数量。由于small model 的精度以及耗时影响相对较大，MobileNetV3-large 和 MobileNetV3-small 是分别使用 NAS 设计的。具体过程如下：</p><ul><li>先用 NAS 找到一个可用的结构 A<ul><li>在 A 的基础上生成一系类的候选结构，并且这些候选结构消耗在一点点减少，即穷举子结构</li><li>对于每个候选结构，使用前一个模型进行初始化，（前一个模型没有的参数随机初始化就行），finetune T 个 epoch，得到一个大致的精度</li><li>在这些候选结构中，找到最好的</li></ul></li><li>反复迭代，直到到达结束条件，找到最合适的结果</li></ul><p>候选子结构包括：降低 expansion layer 的升维 size 以及减少 projection layer 的降维 size。</p><p>关于网络架构搜索 (NAS) 并不是 MobileNetV3 这篇文章首先提出来的，而是在 18 年同是谷歌的一篇文章 MnasNet: Platform-Aware Neural Architecture Search for Mobile 提出来的，有兴趣的可以看一看。</p><p><strong>重新设计激活函数</strong></p><p>我们来重点讲一讲重新设计激活函数这个部分，之前在 MobileNetV2 都是使用 ReLU6 激活函数。现在比较常用的是 swish 激活函数，即 x 乘上 sigmoid 激活函数。使用 swish 激活函数确实能够提高网络的准确率，但是呢它也有一些问题。首先就是其计算和求导时间复杂，光一个 sigmoid 进行计算和求导就比较头疼了。第二个就是对量化过程非常不友好，特别是对于移动端的设备，为了加速一般都会进行量化操作。为此，作者提出了一个叫做 h-swish 的激活函数。</p><p>在说 h-swish 之前，首先要说说 h-sigmoid 激活函数，它其实是 ReLU6 ( x + 3 ) / 6 。可以看出来它和 sigmoid 非常接近，但是计算公式和求导简单太多了。由于 swish 是 x 乘上 sigmoid，自然而言得到 h-swish 是 x 乘上 h-sigmoid。可以看到 swish 激活函数的曲线和 h-swish 激活函数的曲线还是非常相似的。作者在原论文中提到，经过将 swish 激活函数替换为 h-swish，sigmoid 激活函数替换为 h-sigmoid 激活函数，对网络的推理速度是有帮助的，并且对量化过程也是很友好的。注意，h-swish 实现虽然说比 swish 快，但和 ReLU 比还是慢不少。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/711159bcaaf84f46918233173e4b97a1.png" alt="请添加图片描述"></p><p><strong>重新设计耗时层结构</strong></p><p>关于重新设计耗时层结构，原论文主要讲了两个部分。首先是针对第一层卷积层，因为卷积核比较大，所以将第一层卷积核个数从 32 减少到 16。作者通过实验发现，这样做其实准确率并没有改变，但是参数量小了呀，有节省大概 2ms 的时间！</p><p>第二个则是精简 Last Stage。作者在使用过程中发现原始的最后结构比较耗时。精简之后第一个卷积没有变化，紧接着直接进行平均池化操作，再跟两个卷积层。和原来比起来明显少了很多层结构。作者通过实验发现这样做正确率基本没有损失，但是速度快了很多，节省了 7ms 的推理时间，别看 7ms 少，它占据了全部推理时间的 11%。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/f991ea485bf148759580ec195dff9e54.png" alt="请添加图片描述"></p><p><strong>MobileNetV3 网络结构</strong></p><p>下表给出的是 MobileNetV3-large 的网络配置。</p><ul><li>Input 表示输入当前层的特征矩阵的 shape</li><li>#out 代表的就是输出的通道大小</li><li>exp size 表示 bneck 中第一个升维的 1 × 1 卷积输出的维度</li><li>SE 表示是否使用注意力机制</li><li>NL 表示当前使用的非线性激活函数，HS指的是H-swish激活函数，RE指的是ReLU6激活函数</li><li>s 为步距 stride</li><li>bneck 后面跟的就是 DW 卷积的卷积核大小。注意最后有一个 NBN 表示分类器部分的卷积不会去使用 BN 层。</li></ul><p>还需要注意的是第一个 bneck 结构，它的 exp size 和输出维度是一样的，也就是第一个 1 × 1 卷积并没有做升维处理，所以在 pytorch 和 tensorflow 的官方实现中，第一个 bneck 结构中就没有使用 1 × 1 卷积了，直接就是 DW 卷积了。</p><p>与 MobileNetV2 一致，只有当 stride = 1 且 input channel = output channel 的时候才有 shortcut 连接。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1b9af4e7445247218f17785af60af4e8.png" alt="请添加图片描述"></p><p>至于 MobileNetV3-small 的网络配置见下表，这里就不做过多赘述了。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/87527387094441b88e5b5e8475955ff3.png" alt="请添加图片描述"></p><p><strong>特点</strong></p><ul><li>MobileNetV1的深度可分离卷积（depthwise separable convolutions）。</li><li>MobileNetV2的具有线性瓶颈的逆残差结构(the inverted residual with linear bottleneck)。</li><li>轻量级的注意力模型。</li><li>利用h-swish代替swish函数。</li></ul><h2 id="train-py"><a href="#train-py" class="headerlink" title="train.py"></a>train.py</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms<span class="token punctuation">,</span> datasets<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> load_workbook<span class="token keyword">import</span> time<span class="token keyword">from</span> model_v2 <span class="token keyword">import</span> MobileNetV2model_info <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"using {} device."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> <span class="token number">2</span>    epochs <span class="token operator">=</span> <span class="token number">10</span>    data_transform <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"train"</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>RandomResizedCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"val"</span><span class="token punctuation">:</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   transforms<span class="token punctuation">.</span>CenterCrop<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                   transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.485</span><span class="token punctuation">,</span> <span class="token number">0.456</span><span class="token punctuation">,</span> <span class="token number">0.406</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.229</span><span class="token punctuation">,</span> <span class="token number">0.224</span><span class="token punctuation">,</span> <span class="token number">0.225</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    data_root <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># get data root path</span>    image_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_root<span class="token punctuation">,</span> <span class="token string">"Data"</span><span class="token punctuation">,</span> <span class="token string">"PlantVillageWithAugmentation"</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"{} path does not exist."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    train_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">"train"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         transform<span class="token operator">=</span>data_transform<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    train_num <span class="token operator">=</span> len<span class="token punctuation">(</span>train_dataset<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># {'daisy':0, 'dandelion':1, 'roses':2, 'sunflower':3, 'tulips':4}</span>    flower_list <span class="token operator">=</span> train_dataset<span class="token punctuation">.</span>class_to_idx    cla_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> flower_list<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># write dict into json file</span>    json_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>cla_dict<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'class_indices.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_file<span class="token punctuation">:</span>        json_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span>    nw <span class="token operator">=</span> min<span class="token punctuation">(</span><span class="token punctuation">[</span>os<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size <span class="token keyword">if</span> batch_size <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># number of workers</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Using {} dataloader workers every process'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>nw<span class="token punctuation">)</span><span class="token punctuation">)</span>    train_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>train_dataset<span class="token punctuation">,</span>                                               batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                               num_workers<span class="token operator">=</span>nw<span class="token punctuation">)</span>    validate_dataset <span class="token operator">=</span> datasets<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                            transform<span class="token operator">=</span>data_transform<span class="token punctuation">[</span><span class="token string">"val"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    val_num <span class="token operator">=</span> len<span class="token punctuation">(</span>validate_dataset<span class="token punctuation">)</span>    validate_loader <span class="token operator">=</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>validate_dataset<span class="token punctuation">,</span>                                                  batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                                  num_workers<span class="token operator">=</span>nw<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"using {} images for training, {} images for validation."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>train_num<span class="token punctuation">,</span>                                                                           val_num<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># create model</span>    net <span class="token operator">=</span> MobileNetV2<span class="token punctuation">(</span>num_classes<span class="token operator">=</span><span class="token number">39</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># load pretrain weights</span>    <span class="token comment" spellcheck="true"># download url: https://download.pytorch.org/models/mobilenet_v2-b0353104.pth</span>    model_weight_path <span class="token operator">=</span> <span class="token string">"./mobilenet_v2-pre.pth"</span>    <span class="token keyword">assert</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>model_weight_path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"file {} dose not exist."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>model_weight_path<span class="token punctuation">)</span>    pre_weights <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>model_weight_path<span class="token punctuation">,</span> map_location<span class="token operator">=</span>device<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读入模型权重</span>    <span class="token comment" spellcheck="true"># delete classifier weights</span>    <span class="token comment" spellcheck="true"># net.state_dict()[k].numel(): 提取model模型中的关键字K代表的层的长度</span>    <span class="token comment" spellcheck="true"># v.numel: 是下载的预训练参数中对应层的长度</span>    <span class="token comment" spellcheck="true"># 在本例中的迁移学习希望只训练最后的全连接层(因为分类数不同)，所以该句进行一般判断，当model和预训练参数中的对应层不同时就是全连接层</span>    pre_dict <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> pre_weights<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> v<span class="token punctuation">.</span>numel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    missing_keys<span class="token punctuation">,</span> unexpected_keys <span class="token operator">=</span> net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>pre_dict<span class="token punctuation">,</span> strict<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 载入预训练模型权重</span>    <span class="token comment" spellcheck="true"># 冻结特征提取层的参数权重</span>    <span class="token comment" spellcheck="true"># net.features.parameters() 在model中我们将反残差结构放在了features中，我们不希望在后面的训练中对其训练，因此冻结其梯度</span>    <span class="token comment" spellcheck="true"># freeze features weights</span>    <span class="token keyword">for</span> param <span class="token keyword">in</span> net<span class="token punctuation">.</span>features<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        param<span class="token punctuation">.</span>requires_grad <span class="token operator">=</span> <span class="token boolean">False</span>    net<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># define loss function</span>    loss_function <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># construct an optimizer</span>    params <span class="token operator">=</span> <span class="token punctuation">[</span>p <span class="token keyword">for</span> p <span class="token keyword">in</span> net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> p<span class="token punctuation">.</span>requires_grad<span class="token punctuation">]</span>    optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>params<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.0001</span><span class="token punctuation">)</span>    best_acc <span class="token operator">=</span> <span class="token number">0.0</span>    save_path <span class="token operator">=</span> <span class="token string">'./MobileNetV2.pth'</span>    train_steps <span class="token operator">=</span> len<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># train</span>        net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        running_loss <span class="token operator">=</span> <span class="token number">0.0</span>        train_bar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>train_loader<span class="token punctuation">)</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_bar<span class="token punctuation">)</span><span class="token punctuation">:</span>            images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data            optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>            logits <span class="token operator">=</span> net<span class="token punctuation">(</span>images<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>            loss <span class="token operator">=</span> loss_function<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>            optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print statistics</span>            running_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_bar<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">"train epoch[{}/{}] loss:{:.3f}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                                                     epochs<span class="token punctuation">,</span>                                                                     loss<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># validate</span>        net<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        acc <span class="token operator">=</span> <span class="token number">0.0</span>  <span class="token comment" spellcheck="true"># accumulate accurate number / epoch</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            val_bar <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>validate_loader<span class="token punctuation">)</span>            <span class="token keyword">for</span> val_data <span class="token keyword">in</span> val_bar<span class="token punctuation">:</span>                val_images<span class="token punctuation">,</span> val_labels <span class="token operator">=</span> val_data                outputs <span class="token operator">=</span> net<span class="token punctuation">(</span>val_images<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># loss = loss_function(outputs, test_labels)</span>                predict_y <span class="token operator">=</span> torch<span class="token punctuation">.</span>max<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                acc <span class="token operator">+=</span> torch<span class="token punctuation">.</span>eq<span class="token punctuation">(</span>predict_y<span class="token punctuation">,</span> val_labels<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>                val_bar<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">"valid epoch[{}/{}]"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                                           epochs<span class="token punctuation">)</span>        val_accurate <span class="token operator">=</span> acc <span class="token operator">/</span> val_num        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[epoch %d] train_loss: %.3f  val_accuracy: %.3f'</span> <span class="token operator">%</span>              <span class="token punctuation">(</span>epoch <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> running_loss <span class="token operator">/</span> train_steps<span class="token punctuation">,</span> val_accurate<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> val_accurate <span class="token operator">></span> best_acc<span class="token punctuation">:</span>            best_acc <span class="token operator">=</span> val_accurate            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> save_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Finished Training'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_info_to_excel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model_info<span class="token punctuation">)</span>    date <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H-%M-%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'modelinfo.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list<span class="token punctuation">(</span>model_info<span class="token punctuation">)</span><span class="token punctuation">)</span>        book <span class="token operator">=</span> load_workbook<span class="token punctuation">(</span><span class="token string">'modelinfo.xlsx'</span><span class="token punctuation">)</span>        writer <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">"modelinfo.xlsx"</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'openpyxl'</span><span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>book <span class="token operator">=</span> book        pf<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span> sheet_name<span class="token operator">=</span>str<span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 若不存在excel文件，则将数据写入新的excel文件中</span>        pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>list<span class="token punctuation">(</span>model_info<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 指定字段顺序</span>        order <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'epoch'</span><span class="token punctuation">,</span> <span class="token string">'train_loss'</span><span class="token punctuation">,</span> <span class="token string">'train_acc'</span><span class="token punctuation">,</span> <span class="token string">'test_loss'</span><span class="token punctuation">,</span> <span class="token string">'test_acc'</span><span class="token punctuation">]</span>        pf <span class="token operator">=</span> pf<span class="token punctuation">[</span>order<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 指定生成的Excel表格名称</span>        file_path <span class="token operator">=</span> pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">'modelinfo.xlsx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 替换空单元格</span>        pf<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出</span>        pf<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>sheet_name<span class="token operator">=</span>date<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 保存表格</span>        file_path<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    save_info_to_excel<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pre_dict = {k: v for k, v in pre_weights.items() if net.state_dict()[k].numel() == v.numel()} 在下载的官方预训练参数中，num_classes=1000 而在我们的model中num_classes=5<ul><li>net.state_dict()[k].numel(): 提取model模型中的关键字K代表的层的长度</li><li>v.numel: 是下载的预训练参数中对应层的长度</li><li>在本例中的迁移学习希望只训练最后的全连接层(因为分类数不同)，所以该句进行一般判断，当model和预训练参数中的对应层不同时就是全连接层</li></ul></li><li>net.features.parameters() 在model中我们将反残差结构放在了features中，我们不希望在后面的训练中对其训练，因此冻结其梯度</li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> MobileNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoogleNet</title>
      <link href="/googlenet.html"/>
      <url>/googlenet.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GoogLeNet在2014年由Google团队提出（与VGG网络同年，注意GoogLeNet中的L大写是为了致敬LeNet），斩获当年ImageNet竞赛中Classification Task (分类任务) 第一名。</p><p>原论文地址：Going deeper with convolutions</p><h2 id="GoogLeNet创新点"><a href="#GoogLeNet创新点" class="headerlink" title="GoogLeNet创新点"></a>GoogLeNet创新点</h2><ul><li>引入了 Inception 结构（融合不同尺度的特征信息）</li><li>使用1x1的卷积核进行降维以及映射处理 （虽然VGG网络中也有，但该论文介绍的更详细）</li><li>添加两个辅助分类器帮助训练</li><li>丢弃全连接层，使用平均池化层（大大减少模型参数，除去两个辅助分类器，网络大小只有vgg的1/20）</li></ul><h2 id="Inception"><a href="#Inception" class="headerlink" title="Inception"></a>Inception</h2><p>传统的CNN结构如AlexNet、VggNet（下图）都是串联的结构，即将一系列的卷积层和池化层进行串联得到的结构。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210903143923844.png" alt="image-20210903143923844"></p><h3 id="Inception原始结构"><a href="#Inception原始结构" class="headerlink" title="Inception原始结构"></a>Inception原始结构</h3><p>GoogLeNet 提出了一种<code>并联结构</code>，下图是论文中提出的inception原始结构，将特征矩阵同时输入到多个分支进行处理，并将输出的特征矩阵按深度进行拼接，得到最终输出。</p><ul><li>inception的作用：增加网络深度和宽度的同时减少参数。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200717121029783.png" alt="在这里插入图片描述"></p><blockquote><p>注意：每个分支所得特征矩阵的高和宽必须相同（通过调整stride和padding），以保证输出特征能在深度上进行拼接。</p></blockquote><h3 id="Inception-降维"><a href="#Inception-降维" class="headerlink" title="Inception + 降维"></a>Inception + 降维</h3><p>在 inception 的基础上，还可以加上降维功能的结构，如下图所示，在原始 inception 结构的基础上，在分支2，3，4上加入了<strong>卷积核大小为1x1的卷积层，</strong>目的是为了降维（减小深度），减少模型训练参数，减少计算量。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200717121920660.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义一个Inception的模板类，用于组合一系列卷积层、Pooling层以形成一个完整的Inception模块</span><span class="token keyword">class</span> <span class="token class-name">Inception</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># in_channels 为输入数据的深度</span>    <span class="token comment" spellcheck="true"># ch1x1       为 #1x1       的参数，也就是分支1上的1x1的卷积核个数</span>    <span class="token comment" spellcheck="true"># ch3x3red    为 #3x3reduce 的参数，也就是分支2上1x1的卷积核个数</span>    <span class="token comment" spellcheck="true"># ch3x3       为 #3x3       的参数，也就是分支2上3x3的卷积核个数</span>    <span class="token comment" spellcheck="true"># ch5x5red    为 #5x5reduce 的参数，也就是分支3上1x1的卷积核个数</span>    <span class="token comment" spellcheck="true"># ch5x5       为 #5x5       的参数，也就是分支3上5x5的卷积核个数</span>    <span class="token comment" spellcheck="true"># pool_proj   为 poolproj   的参数，也就是分支4上1x1的卷积核个数</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> ch1x1<span class="token punctuation">,</span> ch3x3red<span class="token punctuation">,</span> ch3x3<span class="token punctuation">,</span> ch5x5red<span class="token punctuation">,</span> ch5x5<span class="token punctuation">,</span> pool_proj<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Inception<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义Inception的第一个分支</span>        self<span class="token punctuation">.</span>branch1 <span class="token operator">=</span> BasicConv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> ch1x1<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># kernel_size=1 表示卷积核大小是1x1的</span>        <span class="token comment" spellcheck="true"># 定义Inception的第二个分支</span>        self<span class="token punctuation">.</span>branch2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            BasicConv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> ch3x3red<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true"># kernel_size=1 表示卷积核大小是1x1的</span>            BasicConv2d<span class="token punctuation">(</span>ch3x3red<span class="token punctuation">,</span> ch3x3<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 设置padding保证输出大小等于输入大小 ， kernel_size=3 表示卷积核大小是3x3的</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义Inception的第三个分支</span>        self<span class="token punctuation">.</span>branch3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            BasicConv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> ch5x5red<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># kernel_size=1 表示卷积核大小是1x1的</span>            BasicConv2d<span class="token punctuation">(</span>ch5x5red<span class="token punctuation">,</span> ch5x5<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 设置padding保证输出大小等于输入大小 , kernel_size=5 表示卷积核大小是5x5的</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 定义Inception的第四个分支</span>        self<span class="token punctuation">.</span>branch4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 最大池化下采样层，size是3x3，为保证输出大小等于输入大小，设置了padding=1 stride=1</span>            BasicConv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> pool_proj<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1x1卷积层</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        branch1 <span class="token operator">=</span> self<span class="token punctuation">.</span>branch1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        branch2 <span class="token operator">=</span> self<span class="token punctuation">.</span>branch2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        branch3 <span class="token operator">=</span> self<span class="token punctuation">.</span>branch3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        branch4 <span class="token operator">=</span> self<span class="token punctuation">.</span>branch4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        outputs <span class="token operator">=</span> <span class="token punctuation">[</span>branch1<span class="token punctuation">,</span> branch2<span class="token punctuation">,</span> branch3<span class="token punctuation">,</span> branch4<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 组合为一个列表</span>        <span class="token comment" spellcheck="true"># 注: pytorch的tensor格式中维度排列为 [Batchsize,Channels,High,Wide]</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 利用torch.cat()函数对传入的列表进行合并，参数中的1表示在数据的第一维度上进行合并</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1×1卷积核的降维功能</li></ul><p>同样是对一个深度为512的特征矩阵使用64个大小为5x5的卷积核进行卷积，不使用1x1卷积核进行降维的 话一共需要819200个参数，如果使用1x1卷积核进行降维一共需要50688个参数，明显少了很多。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200717122403870.png" alt="在这里插入图片描述"></p><blockquote><p>注：CNN参数个数 = 卷积核尺寸×卷积核深度 × 卷积核组数 = 卷积核尺寸 × 输入特征矩阵深度 × 输出特征矩阵深度.</p></blockquote><h2 id="辅助分类器（Auxiliary-Classifier）"><a href="#辅助分类器（Auxiliary-Classifier）" class="headerlink" title="辅助分类器（Auxiliary Classifier）"></a>辅助分类器（Auxiliary Classifier）</h2><p>AlexNet 和 VGG 都只有1个输出层，GoogLeNet 有3个输出层，其中的两个是辅助分类层。</p><p>如下图所示，网络主干右边的 两个分支 就是 辅助分类器，其结构一模一样。</p><p>在训练模型时，将两个辅助分类器的损失乘以权重（论文中是0.3）加到网络的整体损失上，再进行反向传播。</p><blockquote><p><strong>辅助分类器的两个分支有什么用呢？</strong></p><ul><li>作用一：可以把他看做inception网络中的一个小细节，它确保了即便是隐藏单元和中间层也参与了特征计算，他们也能预测图片的类别，他在inception网络中起到一种调整的效果，并且能防止网络发生过拟合。</li><li>作用二：给定深度相对较大的网络，有效传播梯度反向通过所有层的能力是一个问题。通过将辅助分类器添加到这些中间层，可以期望较低阶段分类器的判别力。在训练期间，它们的损失以折扣权重（辅助分类器损失的权重是0.3）加到网络的整个损失上。</li></ul></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200717161450737.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义辅助分类器</span><span class="token keyword">class</span> <span class="token class-name">InceptionAux</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>InceptionAux<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>averagePool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AvgPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 平均池化下采样层，size为5x5,stride为3</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> BasicConv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># output[batch, 128, 4, 4]</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 128x4x4=2048 # 全连接层</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全连接层</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># aux1为辅助分类器1 ， aux2为辅助分类器2</span>        <span class="token comment" spellcheck="true"># aux1: N x 512 x 14 x 14, aux2: N x 528 x 14 x 14</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>averagePool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># aux1: N x 512 x 4 x 4, aux2: N x 528 x 4 x 4</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 128 x 4 x 4</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对数据进行展平处理</span>        <span class="token comment" spellcheck="true"># 当我们实例化一个模型model后，可以通过model.train()和model.eval()来控制模型的状态</span>        <span class="token comment" spellcheck="true"># 在model.train()模式下self.training=True</span>        <span class="token comment" spellcheck="true"># 在model.eval() 模式下self.training=False</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> training<span class="token operator">=</span>self<span class="token punctuation">.</span>training<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dropout  # 原论文为0.7</span>        <span class="token comment" spellcheck="true"># N x 2048</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 第一层全连接层并进行relu激活</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> training<span class="token operator">=</span>self<span class="token punctuation">.</span>training<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dropout  # 原论文为0.7</span>        <span class="token comment" spellcheck="true"># N x 1024</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x num_classes</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GoogLeNet-网络参数"><a href="#GoogLeNet-网络参数" class="headerlink" title="GoogLeNet 网络参数"></a>GoogLeNet 网络参数</h2><p>下面是原论文中给出的网络参数列表，配合上图查看</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200717163647478.png" alt="在这里插入图片描述"></p><p>对于Inception模块，所需要使用到参数有<code>#1x1</code>, <code>#3x3reduce</code>, <code>#3x3</code>, <code>#5x5reduce</code>, <code>#5x5</code>,<code>poolproj</code>，这6个参数，分别对应着所使用的卷积核个数。</p><ul><li><code>#1x1</code>  对应着分支1上1x1的卷积核个数</li><li><code>#3x3reduce</code>  对应着分支2上1x1的卷积核个数</li><li><code>#3x3</code>  对应着分支2上3x3的卷积核个数</li><li><code>#5x5reduce</code>  对应着分支3上1x1的卷积核个数</li><li><code>#5x5</code>   对应着分支3上5x5的卷积核个数</li><li><code>poolproj</code>  对应着分支4上1x1的卷积核个数。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义了一个卷积层的模板类，继承nn.Module这个父类，主要作用是组合卷积层和卷积层后的ReLu激活层</span><span class="token keyword">class</span> <span class="token class-name">BasicConv2d</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># in_channels 为输入矩阵的深度</span>    <span class="token comment" spellcheck="true"># out_channels 为输出矩阵的深度</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>BasicConv2d<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment" spellcheck="true"># GoogleNet网络模型</span><span class="token keyword">class</span> <span class="token class-name">GoogLeNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># aux_logits参数表示是否使用辅助分类器</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> aux_logits<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> init_weights<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>GoogLeNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>aux_logits <span class="token operator">=</span> aux_logits        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> BasicConv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># ceil_mode=True 表示若最大池化下采样结果为小数时，会进行向上取整</span>        <span class="token comment" spellcheck="true"># ceil_mode=False 表示若最大池化下采样结果为小数时，会进行向下取整</span>        self<span class="token punctuation">.</span>maxpool1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># nn.LocalResponseNorm() # LayerNorm层 ，注：是否使用该层对结果影响不大故暂不使用</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> BasicConv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv3 <span class="token operator">=</span> BasicConv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>maxpool2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception3a <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception3b <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>maxpool3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception4a <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">480</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception4b <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception4c <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception4d <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">288</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception4e <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">528</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>maxpool4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception5a <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">832</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inception5b <span class="token operator">=</span> Inception<span class="token punctuation">(</span><span class="token number">832</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>aux_logits<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>aux1 <span class="token operator">=</span> InceptionAux<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>aux2 <span class="token operator">=</span> InceptionAux<span class="token punctuation">(</span><span class="token number">528</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 自适应平均池化下采样，输出的数据的 HxW 为 1x1。不需要指定输入的大小</span>        self<span class="token punctuation">.</span>dropout <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.4</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span>        <span class="token keyword">if</span> init_weights<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_initialize_weights<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># N x 3 x 224 x 224</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 64 x 112 x 112</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 64 x 56 x 56</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 64 x 56 x 56</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 192 x 56 x 56</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 192 x 28 x 28</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception3a<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 256 x 28 x 28</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception3b<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 480 x 28 x 28</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 480 x 14 x 14</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception4a<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 512 x 14 x 14</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token operator">and</span> self<span class="token punctuation">.</span>aux_logits<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># eval model lose this layer</span>            aux1 <span class="token operator">=</span> self<span class="token punctuation">.</span>aux1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception4b<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 512 x 14 x 14</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception4c<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 512 x 14 x 14</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception4d<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 528 x 14 x 14</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token operator">and</span> self<span class="token punctuation">.</span>aux_logits<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># eval model lose this layer</span>            aux2 <span class="token operator">=</span> self<span class="token punctuation">.</span>aux2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception4e<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 832 x 14 x 14</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 832 x 7 x 7</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception5a<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 832 x 7 x 7</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>inception5b<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 1024 x 7 x 7</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 1024 x 1 x 1</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 1024</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># N x 1000 (num_classes)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token operator">and</span> self<span class="token punctuation">.</span>aux_logits<span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># eval model lose this layer</span>            <span class="token keyword">return</span> x<span class="token punctuation">,</span> aux2<span class="token punctuation">,</span> aux1        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">_initialize_weights</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'fan_out'</span><span class="token punctuation">,</span> nonlinearity<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>                nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> GoogleNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AlexNet</title>
      <link href="/alexnet.html"/>
      <url>/alexnet.html</url>
      
        <content type="html"><![CDATA[<p>AlexNet模型来源于论文-<a href="https://link.zhihu.com/?target=http%3A//www.cs.toronto.edu/~fritz/absps/imagenet.pdf" target="_blank" rel="noopener">ImageNet Classification with Deep Convolutional Neural Networks</a>，作者Alex Krizhevsky，Ilya Sutskever，Geoffrey E.Hinton.</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在2010年的ImageNet LSVRC-2010上，AlexNet在给包含有1000种类别的共120万张高分辨率图片的分类任务中，在测试集上的top-1和top-5错误率为37.5%和17.0%（<strong>top-5 错误率：即对一张图像预测5个类别，只要有一个和人工标注类别相同就算对，否则算错。同理top-1对一张图像只预测1个类别</strong>），在ImageNet LSVRC-2012的比赛中，取得了top-5错误率为15.3%的成绩。</p><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p>数据来源于<a href="https://link.zhihu.com/?target=http%3A//www.image-net.org/" target="_blank" rel="noopener">ImageNet</a>，训练集包含120万张图片，验证集包含5万张图片，测试集包含15万张图片，这些图片分为了1000个类别，并且有多种不同的分辨率，但是AlexNet的输入要求是<code>固定的分辨率</code>，为了解决这个问题，Alex的团队采用低采样率把每张图片的分辨率降为256×256，具体方法就是给定一张矩形图像，首先重新缩放图像，使得较短边的长度为256，然后从结果图像的中心裁剪出256×256大小的图片。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-fe69581942fa991b4bb4b7bda9181ae5_720w.jpg" alt="img"></p><h2 id="AlexNet整体网络结构"><a href="#AlexNet整体网络结构" class="headerlink" title="AlexNet整体网络结构"></a>AlexNet整体网络结构</h2><p>AlexNet一共有5个卷积层和3个全连接层，网络结构图：</p><p><img src="https://pic4.zhimg.com/80/v2-c06c669bfd7c5b5bacb782d946c9eafb_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-0c8c83147f5a09afb3e3ae7975725080_720w.jpg" alt="论文中的原图"></p><p><img src="https://pic2.zhimg.com/80/v2-3f5a7ab9bcb15004d5a08fdf71e6a775_720w.jpg" alt="细化的结构图"></p><ul><li>5个卷积层，卷积层用于提取图像特征</li></ul><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># self.features，这个参数保存的是用于提取图像特征的层结构</span>    self<span class="token punctuation">.</span>features <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>  <span class="token comment" spellcheck="true"># nn.Sequential此函数会将多个层结构进行组合</span>        <span class="token comment" spellcheck="true"># padding=n,参数n为整数时，会在图像上下左右各补充n行或n列0</span>        <span class="token comment" spellcheck="true"># padding=n,当参数n为tuple类型是，例如n为(1,2)，则是在图像上下方各补一行0，在图像左右各补两行0</span>        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># input[3, 224, 224]  output[96, 55, 55]</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true"># output[96, 27, 27]</span>        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># output[256, 27, 27]</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true"># output[256, 13, 13]</span>        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># output[384, 13, 13]</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">384</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># output[384, 13, 13]</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># output[256, 13, 13]</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token comment" spellcheck="true"># output[256, 6, 6]</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3个全连接层，全连接层用于特征分类</li></ul><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># self.classifier，这个参数保存的是用于进行特征分类的层结构</span>    self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>        nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">128</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注：图像数据经过5个卷积层后，需要对输出数据进行展平操作后才可以传入3个全连接层。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># x为图像经过5个卷积层后的输出数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">,</span> start_dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># start_dim=1，表示展平操作是从数据的第一维度开始的，第0维度不做操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="技术亮点"><a href="#技术亮点" class="headerlink" title="技术亮点"></a>技术亮点</h2><h3 id="使用非线性ReLU函数修正线性单元"><a href="#使用非线性ReLU函数修正线性单元" class="headerlink" title="使用非线性ReLU函数修正线性单元"></a>使用非线性ReLU函数修正线性单元</h3><p>模拟神经元输出的激活函数一般是单双极性的sigmoid函数，但是二者在x非常大或小时，函数的输出基本不变，训练速度很慢；而ReLU函数则是非饱和函数，训练更快。同时，此函数具有线性性质（正值部分），在反向传播时，不会有由于非线性引起的<code>剃度弥散现象</code>（顶层误差较大，由于逐层递减误差传递，引起低层误差很小，导致深度网络地层权值更新量很小，导致深度网络局部最优）。所以 ReLU 函数可以用于训练更深层次的网络。</p><blockquote><p><strong>梯度弥散现象</strong></p><ul><li>当神经网络的层数不断增大时，sigmoid函数等作为激活函数时，靠近输入层的hidden layer梯度小，参数更新慢，很难收敛；靠近输出层的hidden layer梯度大，参数更新快，很快可以收敛。这种现象称为<strong>梯度弥散</strong>。</li><li>同时，有一个与之相应的问题是，当前面的hidden layer梯度在不断训练变大后，后面的hidden layer梯度指数级增大，称为<strong>梯度爆炸</strong>。</li></ul></blockquote><p>ReLu函数： f(x) = max(0,x) , 其图像为：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/d788d43f8794a4c25b5e4dd902f41bd5ac6e39c6" alt="img"></p><p>下面这种图展示了在一个4层的卷积网络中使用ReLU函数在CIFAR-10数据集上达到25%的训练错误率要比在相同网络相同条件下使用tanh函数快6倍</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-057e48787a4e618d3e22134ec67723d4_720w.jpg" alt="img"></p><h3 id="多GPU训练"><a href="#多GPU训练" class="headerlink" title="多GPU训练"></a>多GPU训练</h3><p>AlexNet采用两路GTX 580 3G并行训练，两个GPU只在特定的层通信（二、四、五层之间就不相互连接），并行训练的示意图如下图所示</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-2b59274d31bc595dd6865b48f894a608_720w.jpg" alt="img"></p><p>值得注意的是，这种训练方法使top-1和top-5错误率和使用一个GPU训练一半的kernels相比分别降低了1.7%和1.2%，</p><h3 id="局部响应归一化（Local-Response-Normalization-LRN）"><a href="#局部响应归一化（Local-Response-Normalization-LRN）" class="headerlink" title="局部响应归一化（Local Response Normalization,LRN）"></a>局部响应归一化（Local Response Normalization,LRN）</h3><blockquote><p><strong>为什么要引入LRN层？</strong></p><ul><li>首先要引入一个神经生物学的概念：<strong>侧抑制（lateral inhibitio），即指被激活的神经元抑制相邻的神经元。</strong></li><li>归一化（normaliazation）的目的就是<strong>“抑制”</strong>,LRN就是借鉴这种侧抑制来实现局部抑制，尤其是我们使用ReLU的时候，这种“侧抑制”很有效 ，由于ReLU的相应结果是无界的，所以需要归一化。</li></ul><p><strong>归一化有什么好处？</strong></p><ul><li>归一化有助于快速收敛；</li><li>对局部神经元的活动创建竞争机制，使得其中响应比较大的值变得相对更大，并抑制其他反馈较小的神经元，增强了模型的泛化能力。</li></ul></blockquote><p>计算公式为</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210903105136360.png" alt="image-20210903105136360"></p><p>LRN使AlexNet的top-1和top-5错误率分别降低了1.4%和1.2%. 关于LRN更详细的介绍可以参考-<a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/hduxiejun/article/details/70570086" target="_blank" rel="noopener">LRN</a></p><h3 id="重叠池化（Overlapping-Pooling）"><a href="#重叠池化（Overlapping-Pooling）" class="headerlink" title="重叠池化（Overlapping Pooling）"></a>重叠池化（Overlapping Pooling）</h3><p>一般的池化层因为没有重叠，所以pool_size 和 stride一般是相等的，例如8 × 8的一个图像，如果池化层的尺寸是2 × 2，那么经过池化后的操作得到的图像是 4 × 4大小，这种设置叫做不覆盖的池化操作，如果 stride &lt; pool_size, 那么就会产生覆盖的池化操作，这种有点类似于convolutional化的操作，这样可以得到更准确的结果。在top-1，和top-5中使用覆盖的池化操作分别将error rate降低了0.4%和0.3%。论文中说，在训练模型过程中，覆盖的池化层更不容易过拟合。</p><h2 id="减少过拟合"><a href="#减少过拟合" class="headerlink" title="减少过拟合"></a>减少过拟合</h2><p>下面介绍AlexNet中使用的缓解过拟合的两个主要方法。</p><h3 id="Data-Augmentation（数据增量）"><a href="#Data-Augmentation（数据增量）" class="headerlink" title="Data Augmentation（数据增量）"></a>Data Augmentation（数据增量）</h3><p>早期最常见的针对图像数据减少过拟合的方法就是人工地增大数据集，AlexNet中使用了两种增大数据量的方法</p><ul><li>镜像反射和随机剪裁</li></ul><p>先对图像做镜像反射，就像下图这样：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-0482f9ffd2dfc37df7982d6b6475bcea_720w.jpg" alt="img"></p><p>然后在原图和镜像反射的图（256×256）中随机抽取227×227的块，像这样：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-18e444284e54b4d14093dc51215f0bd0_720w.jpg" alt="img"></p><ul><li>改变训练样本RGB通道的强度值</li></ul><p>Alex团队在整个训练集中对图片的RGB像素值集执行PCA（<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-hans/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90" target="_blank" rel="noopener">主成分分析，Principal Components Analysis</a>）。对于每一张训练图片，他们增加了多个找到的主成分，它们的大小比例是相应的特征值乘以一个随机值（来自均值为0，标准差为0.1的高斯分布）。</p><h3 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h3><p>训练时使用dropout随机互留一部分神经元，避免过拟合。</p><blockquote><p>过拟合的表现：模型在训练数据上损失函数较小，预测准确率较高；但是在测试数据上损失函数比较大，预测准确率较低。</p></blockquote><p>Dropout说的简单一点就是：我们在前向传播的时候，让某个神经元的激活值以一定的概率p停止工作，这样可以使模型泛化性更强，因为它不会太依赖某些局部的特征。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-5530bdc5d49f9e261975521f8afd35e9_720w.jpg" alt="img"></p><p>因为dropout程序导致两个神经元不一定每次都在一个dropout网络中出现。这样权值的更新不再依赖于有固定关系的隐含节点的共同作用，阻止了某些特征仅仅在其它特定特征下才有效果的情况 。在同一次训练时，即前向和后向的过程中，删除的神经元相同。</p><p>在AlexNet中设置的失活概率为0.5。</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlexNet </tag>
            
            <tag> 图像识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积神经网络基础</title>
      <link href="/juan-ji-shen-jing-wang-luo-ji-chu.html"/>
      <url>/juan-ji-shen-jing-wang-luo-ji-chu.html</url>
      
        <content type="html"><![CDATA[<h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120143337073.png" alt="image-20210120143337073"></p><h2 id="全连接神经网络"><a href="#全连接神经网络" class="headerlink" title="全连接神经网络"></a>全连接神经网络</h2><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120152958306.png" alt="image-20210120152958306"></p><ul><li><p>Input layer： X</p></li><li><p>hidden layer ：Z</p></li><li><p>Output layer：Y</p></li><li><p>Z = W * X</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120153900580.png" alt="image-20210120153900580"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120154153039.png" alt="image-20210120154153039"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120154206151.png" alt="image-20210120154206151"></p><h2 id="卷积网络"><a href="#卷积网络" class="headerlink" title="卷积网络"></a>卷积网络</h2><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210901170245368.png" alt="image-20210901170245368"></p><h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><ul><li><p>Input Volume：输入数据，当输入数据为图像时存在三个通道，即RGB，对应下图中的<code>x[:,:,0]</code>，<code>x[:,:,1]</code>，<code>x[:,:,2]</code> 三个维度的矩阵</p></li><li><p>Filter W0 和 Filter W1：卷积核，卷积核的维度对应输入数据的维度，卷积核的数量决定输出数据的维度</p></li><li><p>Output Volume：输出数据</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120154354736.png" alt="image-20210120154354736"></p><h4 id="卷积核"><a href="#卷积核" class="headerlink" title="卷积核"></a>卷积核</h4><ul><li>卷积核的数据是通过<code>学习得到</code>的</li><li>卷积核的大小（3X3,5X5,7X7等等）是<code>事先给出</code>的</li></ul><h4 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h4><p>为了保证图像卷积前后的大小不变，需要添加padding，即为输入数据添加<code>n</code>行或列数值为0的数据</p><p>之前在讨论卷积神经网络的时候，我们是使用 filter 来做元素乘法运算来完成卷积运算的。目的是为了完成探测垂直边缘这种特征。但这样做会带来两个问题。</p><ul><li>卷积运算后，输出图片尺寸缩小</li><li>越是边缘的像素点，对于输出的影响越小，因为卷积运算在移动的时候到边缘就结束了。中间的像素点有可能会参与多次计算，但是边缘像素点可能只参与一次。所以我们的结果可能会丢失边缘信息。</li></ul><p>那么为了解决这个问题，我们引入 padding， 什么是 padding 呢，就是我们认为的扩充图片， 在图片外围补充一些像素点，把这些像素点初始化为 0. 如下图：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210901171551933.png" alt="image-20210901171551933"></p><p>经过 padding 之后，原始图片尺寸为 (n+2p) x (n+2p)，filter 尺寸为 f x f，则卷积后的图片尺寸为 (n+2p-f+1) x (n+2p-f+1)。若要保证卷积前后图片尺寸不变，则 p 应满足：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210901171534520.png" alt="image-20210901171534520"></p><h4 id="卷积步长"><a href="#卷积步长" class="headerlink" title="卷积步长"></a>卷积步长</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120170636366.png" alt="image-20210120170636366"></p><h4 id="卷积的计算"><a href="#卷积的计算" class="headerlink" title="卷积的计算"></a>卷积的计算</h4><p>卷积核在输入数据上<code>滑动</code>，每次滑动后<code>输入数据与卷积核对应位置相乘再相加</code>所得到的数值<code>再加上偏移量Bias</code>即可得到一个输出数据。</p><p>如下图：注：下图中W0[:，:，0]，W0[:，:，1]，W0[:，:，2]三个构成<code>一个卷积核</code>，</p><p>​                                    X[:，:，0]，X[:，:，1]，X[:，:，2]三个构成<code>一个输入数据</code></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120163304059.png" alt="image-20210120163304059"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 大体框架，不牵扯细节</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 建立一个空的模型</span>layer1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3x3卷积核，10个</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layer1<span class="token punctuation">)</span>layer2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3x3卷积核，64个</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layer2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#....</span><span class="token comment" spellcheck="true">#....</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输入数据进行训练</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>输出图像的大小可通过下列公式计算：</p><p>​        输出图像大小=(输入图像大小 - 卷积核大小)/卷积步长+1</p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120165411960.png" alt="image-20210120165411960"></p><h3 id="卷积网络的特点"><a href="#卷积网络的特点" class="headerlink" title="卷积网络的特点"></a>卷积网络的特点</h3><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120165321522.png" alt="image-20210120165321522"></p><h3 id="卷积核的堆叠"><a href="#卷积核的堆叠" class="headerlink" title="卷积核的堆叠"></a>卷积核的堆叠</h3><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120165356929.png" alt="image-20210120165356929"></p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><ul><li>卷积网络是非线性模型，主要原因是激活函数的存在。</li></ul><ul><li>代码中<code>Conv2D()</code>存在<code>activation参数</code>表示卷积层使用什么激活函数，例如<code>Conv2D(&#39;activation=&#39;sigmoid&#39;)</code></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120181958524.png" alt="image-20210120181958524"></p><h4 id="Sigmoid激活函数"><a href="#Sigmoid激活函数" class="headerlink" title="Sigmoid激活函数"></a>Sigmoid激活函数</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120183842987.png" alt="image-20210120183842987"></p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">,</span>lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Sigmoid'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Tanh激活函数"><a href="#Tanh激活函数" class="headerlink" title="Tanh激活函数"></a>Tanh激活函数</h4><blockquote><p><code>Tanh函数 = 2*Sigmoid函数(2*x) - 1</code></p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120183935762.png" alt="image-20210120183935762"></p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">,</span>lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Tanh'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a>ReLU函数</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120184827211.png" alt="image-20210120184827211"></p><ul><li>ReLU函数</li></ul><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span>y <span class="token operator">=</span> p<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>x<span class="token punctuation">)</span>y<span class="token punctuation">[</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">,</span>lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'ReLU'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Leaky ReLU函数</li></ul><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span>y <span class="token operator">=</span> p<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>x<span class="token punctuation">)</span>index <span class="token operator">=</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> y<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.05</span> <span class="token operator">*</span> y<span class="token punctuation">[</span>index<span class="token punctuation">]</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'r-'</span><span class="token punctuation">,</span>lw<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'Leaky ReLU'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'best'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mish函数"><a href="#Mish函数" class="headerlink" title="Mish函数"></a>Mish函数</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120185907770.png" alt="image-20210120185907770"></p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><ul><li><p>Keras的Conv2D函数中存在<code>kernel_regularizer和bias_regularizer</code>参数，分别对应<code>L1/L2</code></p><p>例如： <code>Conv2D(kernel_regularizer = &#39;l1&#39;, bias_regularizer = &#39;l2&#39;)</code></p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120191736842.png" alt="image-20210120191736842"></p><ul><li><strong>Dropout</strong></li></ul><p>​        代码写法例如：model.add(Dropout(0.5))</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120192418718.png" alt="image-20210120192418718"></p><ul><li>Dropout的方法和特点<ul><li>对于每一个训练样本，以概率0.5选择隐层的单元是否有效；</li><li>几乎每一个输入样本的网络都是不同的，但有效单元的权值相同；</li><li>输入层也可以采用dropout（如以0.2的概率drop）；</li><li>测试样本下的网络，其实是训练样本得到网络的“平均网络”；</li><li>平均网络保证了比单个网络的精度更高；</li><li>由于计算中忽略一半的单元，所以计算更加高效；</li><li>可以配合预处理得到更好的结果；</li></ul></li></ul><h3 id="池化层Pooling"><a href="#池化层Pooling" class="headerlink" title="池化层Pooling"></a>池化层Pooling</h3><ul><li><p>Pooling实际上就是为了降采样</p><p>代码写法例如：model.add(MaxPooling2D((2,2), 2, padding=’valid’))</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120194236911.png" alt="image-20210120194236911"></p><p>Pooling层主要的作用是压缩数据和参数的量（<strong>保持最显著的特征</strong>），通过去掉Feature Map中不重要的样本，进一步<strong>减少参数数量</strong>。Pooling的方法很多，通常采用<strong>最大池化</strong></p><ul><li>max_pooling:取池化窗口的最大值</li><li>avg_pooling:取池化窗口的平均值</li></ul><p><strong>池化层计算</strong></p><p>池化层也有窗口的大小以及移动步长，那么之后的输出大小怎么计算？计算公式同卷积计算公式一样</p><blockquote><p>计算：224x224x64,窗口为2，步长为2输出结果？</p><p>​            H2 = (224 - 2 + 2*0)/2 +1 = 112</p><p>​            w2 = (224 - 2 + 2*0)/2 +1 = 112</p></blockquote><p>通常池化层采用 2x2大小、步长为2窗口</p><h3 id="卷积网络的一般架构"><a href="#卷积网络的一般架构" class="headerlink" title="卷积网络的一般架构"></a>卷积网络的一般架构</h3><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120200307749.png" alt="image-20210120200307749"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120200346385.png" alt="image-20210120200346385"></p><h4 id="LeNet网络结构"><a href="#LeNet网络结构" class="headerlink" title="LeNet网络结构"></a>LeNet网络结构</h4><blockquote><p>输入数据–&gt;卷积–&gt;pooling–&gt;卷积–&gt;pooling–&gt;全连接–&gt;全连接–&gt;全连接–&gt;输出数据</p><p>pooling不算一层网络，因此下述网络模型为：<code>2卷积层+3全连接层 = 5层神经网络</code></p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120200403358.png" alt="image-20210120200403358"></p><h4 id="AlexNet网络结构"><a href="#AlexNet网络结构" class="headerlink" title="AlexNet网络结构"></a>AlexNet网络结构</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210120200419960.png" alt="image-20210120200419960"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121144931976.png" alt="image-20210121144931976"></p><h4 id="ZFNet网络结构"><a href="#ZFNet网络结构" class="headerlink" title="ZFNet网络结构"></a>ZFNet网络结构</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121145255293.png" alt="image-20210121145255293"></p><h4 id="VGGNet网络结构"><a href="#VGGNet网络结构" class="headerlink" title="VGGNet网络结构"></a>VGGNet网络结构</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121145354740.png" alt="image-20210121145354740"></p><h4 id="GoogleNet网络结构–Inception"><a href="#GoogleNet网络结构–Inception" class="headerlink" title="GoogleNet网络结构–Inception"></a>GoogleNet网络结构–Inception</h4><ul><li>下图中左侧图片为Inception v1；右侧图片为 Inception v2</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121152544238.png" alt="image-20210121152544238"></p><blockquote><p>Conv Ops = 卷积核size * 输入数据个数*输出数据个数*数据大小</p><p>例如：下图中[3x3 conv,192]     （ 3 * 3） * 256 * 192 * （28 *28）</p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121153045413.png" alt="image-20210121153045413"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121161941019.png" alt="image-20210121161941019"></p><ul><li><p>Inception v3</p><p>运用了卷积核的堆叠，使用多个小卷积核代替大的卷积核</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121162120206.png" alt="image-20210121162120206"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121163120924.png" alt="image-20210121163120924"></p><ul><li>Inception v4</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121162136989.png" alt="image-20210121162136989"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121162212432.png" alt="image-20210121162212432"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121162228732.png" alt="image-20210121162228732"></p><h4 id="ResNet残差网络"><a href="#ResNet残差网络" class="headerlink" title="ResNet残差网络"></a>ResNet残差网络</h4><blockquote><p>若输入数据X经过卷积后其图像大小不变，则卷积后的输出数据可以表示为F(X) + X，<code>这一组卷积的过程叫做残差块</code>（残差块中间最好至少有两个卷积层，理论上一个卷积层也可以但效果不好），<code>F(X)为残差</code></p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121192449836.png" alt="image-20210121192449836"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121193059508.png" alt="image-20210121193059508"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121193249092.png" alt="image-20210121193249092"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121194030696.png" alt="image-20210121194030696"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121194321028.png" alt="image-20210121194321028"></p><h4 id="模型比较"><a href="#模型比较" class="headerlink" title="模型比较"></a>模型比较</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121200612598.png" alt="image-20210121200612598"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201043770.png" alt="image-20210121201043770"></p><h4 id="近几年的模型改进"><a href="#近几年的模型改进" class="headerlink" title="近几年的模型改进"></a>近几年的模型改进</h4><h6 id="NIN-2014"><a href="#NIN-2014" class="headerlink" title="NIN 2014"></a>NIN 2014</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201058139.png" alt="image-20210121201058139"></p><h6 id="ResNet-Block-2015"><a href="#ResNet-Block-2015" class="headerlink" title="ResNet Block 2015"></a>ResNet Block 2015</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201124678.png" alt="image-20210121201124678"></p><h6 id="Wide-Residual-Networks-2016"><a href="#Wide-Residual-Networks-2016" class="headerlink" title="Wide Residual Networks 2016"></a>Wide Residual Networks 2016</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201247005.png" alt="image-20210121201247005"></p><h6 id="ResNext-2016"><a href="#ResNext-2016" class="headerlink" title="ResNext 2016"></a>ResNext 2016</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201321024.png" alt="image-20210121201321024"></p><h6 id="随机深度ResNet-2016"><a href="#随机深度ResNet-2016" class="headerlink" title="随机深度ResNet 2016"></a>随机深度ResNet 2016</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201355209.png" alt="image-20210121201355209"></p><h6 id="FractalNet-2017"><a href="#FractalNet-2017" class="headerlink" title="FractalNet 2017"></a>FractalNet 2017</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201507270.png" alt="image-20210121201507270"></p><h6 id="DenseNet-2017–值得思考应用"><a href="#DenseNet-2017–值得思考应用" class="headerlink" title="DenseNet 2017–值得思考应用"></a>DenseNet 2017–值得思考应用</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201538108.png" alt="image-20210121201538108"></p><h5 id="网络家族"><a href="#网络家族" class="headerlink" title="网络家族"></a>网络家族</h5><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121201731582.png" alt="image-20210121201731582"></p><h4 id="辅助分类器"><a href="#辅助分类器" class="headerlink" title="辅助分类器"></a>辅助分类器</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121161746888.png" alt="image-20210121161746888"></p><blockquote><p>如下图，蓝色和绿色箭头所指示部分就是两个辅助分类器</p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210121161707266.png" alt="image-20210121161707266"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vision_Transformer</title>
      <link href="/vision-transformer.html"/>
      <url>/vision-transformer.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vision-Transformer详解"><a href="#Vision-Transformer详解" class="headerlink" title="Vision Transformer详解"></a>Vision Transformer详解</h1><blockquote><p>传送门：<a href="https://blog.csdn.net/qq_37541097/article/details/118242600" target="_blank" rel="noopener">https://blog.csdn.net/qq_37541097/article/details/118242600</a></p><p>论文名称： An Image Is Worth 16x16 Words: Transformers For Image Recognition At Scale</p><p>论文下载链接：<a href="https://arxiv.org/abs/2010.11929" target="_blank" rel="noopener">https://arxiv.org/abs/2010.11929</a></p><p>原论文对应源码：<a href="https://github.com/google-research/vision_transformer" target="_blank" rel="noopener">https://github.com/google-research/vision_transformer</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Transformer最初提出是针对NLP领域的，并且在NLP领域大获成功。这篇论文也是受到其启发，尝试将Transformer应用到CV领域。通过这篇文章的实验，给出的最佳模型在ImageNet1K上能够达到88.55%的准确率（先在Google自家的JFT数据集上进行了预训练），说明Transformer在CV领域确实是有效的，而且效果还挺惊人。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210626104507713.png" alt="img"></p><h2 id="模型详解"><a href="#模型详解" class="headerlink" title="模型详解"></a>模型详解</h2><h3 id="Vision-Transformer模型详解"><a href="#Vision-Transformer模型详解" class="headerlink" title="Vision Transformer模型详解"></a>Vision Transformer模型详解</h3><p>下图是原论文中给出的关于Vision Transformer(ViT)的模型框架。简单而言，模型由三个模块组成：</p><ul><li>Linear Projection of Flattened Patches(Embedding层)</li><li>Transformer Encoder(图右侧有给出更加详细的结构)</li><li>MLP Head（最终用于分类的层结构）</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210626105321101.png" alt="img"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">VisionTransformer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">,</span> patch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> in_c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>                 embed_dim<span class="token operator">=</span><span class="token number">768</span><span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> num_heads<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> mlp_ratio<span class="token operator">=</span><span class="token number">4.0</span><span class="token punctuation">,</span> qkv_bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                 qk_scale<span class="token operator">=</span>None<span class="token punctuation">,</span> representation_size<span class="token operator">=</span>None<span class="token punctuation">,</span> distilled<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> drop_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>                 attn_drop_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> drop_path_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed_layer<span class="token operator">=</span>PatchEmbed<span class="token punctuation">,</span> norm_layer<span class="token operator">=</span>None<span class="token punctuation">,</span>                 act_layer<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Args:            img_size (int, tuple): input image size            patch_size (int, tuple): patch size            in_c (int): number of input channels            num_classes (int): number of classes for classification head            embed_dim (int): embedding dimension            depth (int): depth of transformer  重复堆叠Encoder Block模块的次数            num_heads (int): number of attention heads            mlp_ratio (int): ratio of mlp hidden dim to embedding dim            qkv_bias (bool): enable bias for qkv if True            qk_scale (float): override default qk scale of head_dim ** -0.5 if set            representation_size (Optional[int]): enable and set representation layer (pre-logits) to this value if set 用于pre-logits            distilled (bool): model includes a distillation token and head as in DeiT models            drop_ratio (float): dropout rate            attn_drop_ratio (float): attention dropout rate            drop_path_ratio (float): stochastic depth rate            embed_layer (nn.Module): patch embedding layer            norm_layer: (nn.Module): normalization layer        """</span>        super<span class="token punctuation">(</span>VisionTransformer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_classes <span class="token operator">=</span> num_classes  <span class="token comment" spellcheck="true"># 分类个数</span>        self<span class="token punctuation">.</span>num_features <span class="token operator">=</span> self<span class="token punctuation">.</span>embed_dim <span class="token operator">=</span> embed_dim  <span class="token comment" spellcheck="true"># num_features for consistency with other models</span>        self<span class="token punctuation">.</span>num_tokens <span class="token operator">=</span> <span class="token number">2</span> <span class="token keyword">if</span> distilled <span class="token keyword">else</span> <span class="token number">1</span>        norm_layer <span class="token operator">=</span> norm_layer <span class="token operator">or</span> partial<span class="token punctuation">(</span>nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">,</span> eps<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span>        act_layer <span class="token operator">=</span> act_layer <span class="token operator">or</span> nn<span class="token punctuation">.</span>GELU        self<span class="token punctuation">.</span>patch_embed <span class="token operator">=</span> embed_layer<span class="token punctuation">(</span>img_size<span class="token operator">=</span>img_size<span class="token punctuation">,</span> patch_size<span class="token operator">=</span>patch_size<span class="token punctuation">,</span> in_c<span class="token operator">=</span>in_c<span class="token punctuation">,</span> embed_dim<span class="token operator">=</span>embed_dim<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># embedding层</span>        num_patches <span class="token operator">=</span> self<span class="token punctuation">.</span>patch_embed<span class="token punctuation">.</span>num_patches  <span class="token comment" spellcheck="true"># 获取patches的个数</span>        self<span class="token punctuation">.</span>cls_token <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> embed_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化一个class token</span>        self<span class="token punctuation">.</span>dist_token <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> embed_dim<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> distilled <span class="token keyword">else</span> None        self<span class="token punctuation">.</span>pos_embed <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> num_patches <span class="token operator">+</span> self<span class="token punctuation">.</span>num_tokens<span class="token punctuation">,</span> embed_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># position Embedding</span>        self<span class="token punctuation">.</span>pos_drop <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span>drop_ratio<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建一个等差序列，从0到drop_path_ratio共depth个元素</span>        dpr <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> drop_path_ratio<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># stochastic depth decay rule</span>        <span class="token comment" spellcheck="true"># 创建堆叠Encoder Block模块共堆叠depth次</span>        self<span class="token punctuation">.</span>blocks <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span>            Block<span class="token punctuation">(</span>dim<span class="token operator">=</span>embed_dim<span class="token punctuation">,</span> num_heads<span class="token operator">=</span>num_heads<span class="token punctuation">,</span> mlp_ratio<span class="token operator">=</span>mlp_ratio<span class="token punctuation">,</span> qkv_bias<span class="token operator">=</span>qkv_bias<span class="token punctuation">,</span> qk_scale<span class="token operator">=</span>qk_scale<span class="token punctuation">,</span>                  drop_ratio<span class="token operator">=</span>drop_ratio<span class="token punctuation">,</span> attn_drop_ratio<span class="token operator">=</span>attn_drop_ratio<span class="token punctuation">,</span> drop_path_ratio<span class="token operator">=</span>dpr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>                  norm_layer<span class="token operator">=</span>norm_layer<span class="token punctuation">,</span> act_layer<span class="token operator">=</span>act_layer<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>depth<span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>norm <span class="token operator">=</span> norm_layer<span class="token punctuation">(</span>embed_dim<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Representation layer</span>        <span class="token keyword">if</span> representation_size <span class="token operator">and</span> <span class="token operator">not</span> distilled<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果传入了representation_size参数则会创建Pre Logits层</span>            self<span class="token punctuation">.</span>has_logits <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>num_features <span class="token operator">=</span> representation_size            self<span class="token punctuation">.</span>pre_logits <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token punctuation">(</span><span class="token string">"fc"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>embed_dim<span class="token punctuation">,</span> representation_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">(</span><span class="token string">"act"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 如果不传入representation_size参数则不会创建Pre Logits层</span>            self<span class="token punctuation">.</span>has_logits <span class="token operator">=</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>pre_logits <span class="token operator">=</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Classifier head(s)</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>num_features<span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span> <span class="token keyword">if</span> num_classes <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>head_dist <span class="token operator">=</span> None        <span class="token keyword">if</span> distilled<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>head_dist <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embed_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_classes<span class="token punctuation">)</span> <span class="token keyword">if</span> num_classes <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Weight init 权重初始化</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>trunc_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pos_embed<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>dist_token <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>trunc_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dist_token<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>trunc_normal_<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cls_token<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>apply<span class="token punctuation">(</span>_init_vit_weights<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward_features</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># [B, C, H, W] -> [B, num_patches, embed_dim]</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>patch_embed<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [B, 196, 768]  # patch embedding层</span>        <span class="token comment" spellcheck="true"># [1, 1, 768] -> [B, 1, 768]</span>        cls_token <span class="token operator">=</span> self<span class="token punctuation">.</span>cls_token<span class="token punctuation">.</span>expand<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>dist_token <span class="token keyword">is</span> None<span class="token punctuation">:</span>            x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>cls_token<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [B, 197, 768]  # 拼接class token</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>cls_token<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dist_token<span class="token punctuation">.</span>expand<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pos_drop<span class="token punctuation">(</span>x <span class="token operator">+</span> self<span class="token punctuation">.</span>pos_embed<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 拼接后的token与position embedding相加并经过一个dropout层</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>blocks<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 堆叠depth次的Encoder Block层</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Encoder Block层之后的Layer Norm层</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>dist_token <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>pre_logits<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_features<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>head_dist <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            x<span class="token punctuation">,</span> x_dist <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>head_dist<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>training <span class="token operator">and</span> <span class="token operator">not</span> torch<span class="token punctuation">.</span>jit<span class="token punctuation">.</span>is_scripting<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># during inference, return the average of both classifier predictions</span>                <span class="token keyword">return</span> x<span class="token punctuation">,</span> x_dist            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> x_dist<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>head<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载预训练权重代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_init_vit_weights</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    ViT weight initialization    :param m: module    """</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">)</span><span class="token punctuation">:</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>trunc_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> std<span class="token operator">=</span><span class="token punctuation">.</span><span class="token number">01</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>    <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"fan_out"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> m<span class="token punctuation">.</span>bias <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>    <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">)</span><span class="token punctuation">:</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>zeros_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">)</span>        nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>ones_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Embedding层结构详解"><a href="#Embedding层结构详解" class="headerlink" title="Embedding层结构详解"></a>Embedding层结构详解</h3><p>对于标准的Transformer模块，要求输入的是token（向量）序列，即二维矩阵[num_token, token_dim]，如下图，token0-9对应的都是向量，以ViT-B/16为例，每个token向量长度为<code>768</code>，即<code>16*16*3=768</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210831104317597.png" alt="image-20210831104317597"></p><p>对于图像数据而言，其数据格式为<code>[H, W, C]</code>是三维矩阵明显不是Transformer想要的。所以需要先通过一个Embedding层来对数据做个变换。如下图所示，首先将一张图片按给定大小分成一堆Patches。以ViT-B/16为例，将输入图片<code>(224x224)</code>按照<code>16x16</code>大小的Patch进行划分，划分后会得到<code>(224/16)^2 = 196</code>个Patches。接着通过线性映射将每个Patch映射到一维向量中，以ViT-B/16为例，每个Patche数据shape为<code>[16, 16, 3]</code>通过映射得到一个长度为768的向量（后面都直接称为token）。<code>[16,16,3] -&gt; [768]</code></p><p><strong>在代码实现中，直接通过一个卷积层来实现。</strong> 以ViT-B/16为例，直接使用一个<code>卷积核大小为16x16，步距为16，卷积核个数为768的卷积</code>来实现。通过卷积<code>[224,224,3] -&gt; [14,14,768]</code>，然后把H以及W两个维度展平即可<code>[14,14,768] -&gt; [196,768]</code>，（<code>14*14=196</code>），此时正好变成了一个二维矩阵，正是Transformer想要的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PatchEmbed</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    2D Image to Patch Embedding    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_size<span class="token operator">=</span><span class="token number">224</span><span class="token punctuation">,</span> patch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span> in_c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> embed_dim<span class="token operator">=</span><span class="token number">768</span><span class="token punctuation">,</span> norm_layer<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># in_c=3 RGB图片则为3通道</span>        <span class="token comment" spellcheck="true"># embed_dim=768 嵌入向量的维度 （16*16*3）= 768</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        img_size <span class="token operator">=</span> <span class="token punctuation">(</span>img_size<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输入图像大小</span>        patch_size <span class="token operator">=</span> <span class="token punctuation">(</span>patch_size<span class="token punctuation">,</span> patch_size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 卷积核大小</span>        self<span class="token punctuation">.</span>img_size <span class="token operator">=</span> img_size        self<span class="token punctuation">.</span>patch_size <span class="token operator">=</span> patch_size        self<span class="token punctuation">.</span>grid_size <span class="token operator">=</span> <span class="token punctuation">(</span>img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">//</span> patch_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> patch_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_patches <span class="token operator">=</span> self<span class="token punctuation">.</span>grid_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>grid_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># patches的数目</span>        self<span class="token punctuation">.</span>proj <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_c<span class="token punctuation">,</span> embed_dim<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span>patch_size<span class="token punctuation">,</span> stride<span class="token operator">=</span>patch_size<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 卷积核大小和步长均为patch_size</span>        self<span class="token punctuation">.</span>norm <span class="token operator">=</span> norm_layer<span class="token punctuation">(</span>embed_dim<span class="token punctuation">)</span> <span class="token keyword">if</span> norm_layer <span class="token keyword">else</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 未传入norm_layer则不做操作</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> H<span class="token punctuation">,</span> W <span class="token operator">=</span> x<span class="token punctuation">.</span>shape   <span class="token comment" spellcheck="true"># B 为 batch_size 即训练时图片传入的数目</span>        <span class="token comment" spellcheck="true"># 检验数据图像的大小是否符合模型的可输入图像要求</span>        <span class="token keyword">assert</span> H <span class="token operator">==</span> self<span class="token punctuation">.</span>img_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> W <span class="token operator">==</span> self<span class="token punctuation">.</span>img_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> \            f<span class="token string">"Input image size ({H}*{W}) doesn't match model ({self.img_size[0]}*{self.img_size[1]})."</span>        <span class="token comment" spellcheck="true"># flatten: [B, C, H, W] -> [B, C, HW]  从第二维度的H开始展平</span>        <span class="token comment" spellcheck="true"># transpose: [B, C, HW] -> [B, HW, C]  调换第二维度与第一维度的位置 ??????  [num_token,token_dim]???</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>proj<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在输入Transformer Encoder之前注意需要加上[class]token以及Position Embedding。</strong> 在原论文中，作者说参考BERT，在刚刚得到的一堆tokens中插入一个专门用于分类的[class]token，这个[class]token是一个可训练的参数，数据格式和其他token一样都是一个向量，以ViT-B/16为例，就是一个长度为768的向量，与之前从图片中生成的tokens拼接在一起，<code>Cat([1,768], [196,768]) -&gt; [197,768]</code>。关于Position Embedding就是之前Transformer中讲到的Positional Encoding，这里的Position Embedding采用的是一个可训练的参数（<code>1D Pos. Emb.</code>），是直接叠加在tokens上的（add），所以shape要一样。以ViT-B/16为例，刚刚拼接[class]token后shape是<code>[197,768]</code>，那么这里的Position Embedding的shape也是<code>[197,768]</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210831110059229.png" alt="image-20210831110059229"></p><p>对于Position Embedding作者也有做一系列对比试验，在源码中默认使用的是1D Pos. Emb.，对比不使用Position Embedding准确率提升了大概3个点，和2D Pos. Emb.比起来没太大差别。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210831110605646.png" alt="image-20210831110605646"></p><h3 id="Transformer-Encoder详解"><a href="#Transformer-Encoder详解" class="headerlink" title="Transformer Encoder详解"></a>Transformer Encoder详解</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Block</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 即 Encoder Block模块</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 dim<span class="token punctuation">,</span>                 num_heads<span class="token punctuation">,</span>                 mlp_ratio<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>                 qkv_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                 qk_scale<span class="token operator">=</span>None<span class="token punctuation">,</span>                 drop_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>                 attn_drop_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>                 drop_path_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>                 act_layer<span class="token operator">=</span>nn<span class="token punctuation">.</span>GELU<span class="token punctuation">,</span>                 norm_layer<span class="token operator">=</span>nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># dim, 为token的dim</span>        <span class="token comment" spellcheck="true"># num_heads, 为在Multi-Head Attention中head的数量</span>        <span class="token comment" spellcheck="true"># mlp_ratio=4., 即因为mlp中hidden_features一般为in_features的四倍</span>        <span class="token comment" spellcheck="true"># qkv_bias=False,即是否添加qkv的偏置 默认不使用</span>        <span class="token comment" spellcheck="true"># qk_scale=None, 是否指定 Attention 公式中的“根号dk分之一”</span>        <span class="token comment" spellcheck="true"># drop_ratio=0., Attention 公式中的”softmax(Q*K的转置*'根号dk分之一')*V”后的dropout层的drop参数设置</span>        <span class="token comment" spellcheck="true"># drop_ratio=0., 同时也是mlp最后一个dropout层的drop参数设置</span>        <span class="token comment" spellcheck="true"># attn_drop_ratio=0., Attention 公式中的“softmax(Q*K的转置*'根号dk分之一')"后的dropout层的drop参数设置</span>        <span class="token comment" spellcheck="true"># drop_path_ratio=0., 为DropPath模块中的Dropout层的drop参数设置</span>        <span class="token comment" spellcheck="true"># act_layer=nn.GELU, 为MLP模块中的激活函数</span>        <span class="token comment" spellcheck="true"># norm_layer=nn.LayerNorm, Encoder Block模块中的LayerNorm模块</span>        super<span class="token punctuation">(</span>Block<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 第一个Layer Norm模块</span>        self<span class="token punctuation">.</span>norm1 <span class="token operator">=</span> norm_layer<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Multi-Head Attention模块</span>        self<span class="token punctuation">.</span>attn <span class="token operator">=</span> Attention<span class="token punctuation">(</span>dim<span class="token punctuation">,</span> num_heads<span class="token operator">=</span>num_heads<span class="token punctuation">,</span> qkv_bias<span class="token operator">=</span>qkv_bias<span class="token punctuation">,</span> qk_scale<span class="token operator">=</span>qk_scale<span class="token punctuation">,</span>                              attn_drop_ratio<span class="token operator">=</span>attn_drop_ratio<span class="token punctuation">,</span> proj_drop_ratio<span class="token operator">=</span>drop_ratio<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Dropout/DropPath模块</span>        <span class="token comment" spellcheck="true"># NOTE: drop path for stochastic depth, we shall see if this is better than dropout here</span>        self<span class="token punctuation">.</span>drop_path <span class="token operator">=</span> DropPath<span class="token punctuation">(</span>drop_path_ratio<span class="token punctuation">)</span> <span class="token keyword">if</span> drop_path_ratio <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">.</span> <span class="token keyword">else</span> nn<span class="token punctuation">.</span>Identity<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 第二个Layer Norm模块</span>        self<span class="token punctuation">.</span>norm2 <span class="token operator">=</span> norm_layer<span class="token punctuation">(</span>dim<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># MLP模块</span>        mlp_hidden_dim <span class="token operator">=</span> int<span class="token punctuation">(</span>dim <span class="token operator">*</span> mlp_ratio<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mlp <span class="token operator">=</span> Mlp<span class="token punctuation">(</span>in_features<span class="token operator">=</span>dim<span class="token punctuation">,</span> hidden_features<span class="token operator">=</span>mlp_hidden_dim<span class="token punctuation">,</span> act_layer<span class="token operator">=</span>act_layer<span class="token punctuation">,</span> drop<span class="token operator">=</span>drop_ratio<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># X + (Layer Norm模块 --> Multi-Head Attention模块 --> Dropout/DropPath模块)</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>drop_path<span class="token punctuation">(</span>self<span class="token punctuation">.</span>attn<span class="token punctuation">(</span>self<span class="token punctuation">.</span>norm1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># X + (Layer Norm模块 --> MLP模块 --> Dropout/DropPath模块)</span>        x <span class="token operator">=</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>drop_path<span class="token punctuation">(</span>self<span class="token punctuation">.</span>mlp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>norm2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Transformer Encoder其实就是重复堆叠Encoder Block L次，下图是我自己绘制的Encoder Block，主要由以下几部分组成：</p><ul><li>Layer Norm，这种Normalization方法主要是针对NLP领域提出的，这里是对每个token进行Norm处理。</li><li>Multi-Head Attention。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Attention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 dim<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># 输入token的dim</span>                 num_heads<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true"># Multi-Head Attention中head的数量</span>                 qkv_bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 生成qkv时是否使用偏置</span>                 qk_scale<span class="token operator">=</span>None<span class="token punctuation">,</span>                 attn_drop_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>                 proj_drop_ratio<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Attention<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_heads <span class="token operator">=</span> num_heads        head_dim <span class="token operator">=</span> dim <span class="token operator">//</span> num_heads        self<span class="token punctuation">.</span>scale <span class="token operator">=</span> qk_scale <span class="token operator">or</span> head_dim <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">0.5</span>   <span class="token comment" spellcheck="true"># 公式中的“根号dk分之一”</span>        self<span class="token punctuation">.</span>qkv <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>dim<span class="token punctuation">,</span> dim <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> bias<span class="token operator">=</span>qkv_bias<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 通过全连接层得到qkv</span>        self<span class="token punctuation">.</span>attn_drop <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>attn_drop_ratio<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dropout层</span>        self<span class="token punctuation">.</span>proj <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>dim<span class="token punctuation">,</span> dim<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 公式中的"Wo"</span>        self<span class="token punctuation">.</span>proj_drop <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>proj_drop_ratio<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dropout层</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># [batch_size, num_patches + 1, total_embed_dim]</span>        <span class="token comment" spellcheck="true"># batch_size 传入图片的数目</span>        <span class="token comment" spellcheck="true"># num_patches patches的数目即为14*14=196，“+1”则是因为后续会添加一个分类的class token</span>        B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> C <span class="token operator">=</span> x<span class="token punctuation">.</span>shape        <span class="token comment" spellcheck="true"># qkv(): -> [batch_size, num_patches + 1, 3 * total_embed_dim]</span>        <span class="token comment" spellcheck="true"># reshape: -> [batch_size, num_patches + 1, 3, num_heads, embed_dim_per_head]</span>        <span class="token comment" spellcheck="true"># # C对应total_embed_dim，C // self.num_heads则是指的是每个heads对应的dimension</span>        <span class="token comment" spellcheck="true"># permute: -> [3, batch_size, num_heads, num_patches + 1, embed_dim_per_head] # 调整数据各维度的位置 为了便于后面的运算 ??????</span>        qkv <span class="token operator">=</span> self<span class="token punctuation">.</span>qkv<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">,</span> C <span class="token operator">//</span> self<span class="token punctuation">.</span>num_heads<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用切片的方式分别获取到q,k,v</span>        <span class="token comment" spellcheck="true"># [batch_size, num_heads, num_patches + 1, embed_dim_per_head]</span>        q<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> qkv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> qkv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> qkv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># make torchscript happy (cannot use tensor as tuple)</span>        <span class="token comment" spellcheck="true"># transpose: -> [batch_size, num_heads, embed_dim_per_head, num_patches + 1]</span>        <span class="token comment" spellcheck="true"># @: multiply -> [batch_size, num_heads, num_patches + 1, num_patches + 1]</span>        <span class="token comment" spellcheck="true"># 调换k的最后两个维度位置(转置??????)并与q进行矩阵乘法  @为矩阵乘法 ??????</span>        attn <span class="token operator">=</span> <span class="token punctuation">(</span>q @ k<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>scale  <span class="token comment" spellcheck="true"># 此计算过程则为公式中的"Q*K的转置*'根号dk分之一'"</span>        attn <span class="token operator">=</span> attn<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对上述数据进行softmax处理  dim=-1针对每行数据进行处理</span>        attn <span class="token operator">=</span> self<span class="token punctuation">.</span>attn_drop<span class="token punctuation">(</span>attn<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dropout层</span>        <span class="token comment" spellcheck="true"># @: multiply -> [batch_size, num_heads, num_patches + 1, embed_dim_per_head]</span>        <span class="token comment" spellcheck="true"># transpose: -> [batch_size, num_patches + 1, num_heads, embed_dim_per_head]</span>        <span class="token comment" spellcheck="true"># reshape: -> [batch_size, num_patches + 1, total_embed_dim]</span>        <span class="token comment" spellcheck="true"># # 将最后两个维度的信息进行了拼接</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>attn @ v<span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>B<span class="token punctuation">,</span> N<span class="token punctuation">,</span> C<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 该计算为公式中的“softmax(Q*K的转置*'根号dk分之一')*V”</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>proj<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 针对head的全连接层映射</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>proj_drop<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Dropout层</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Dropout/DropPath，在原论文的代码中是直接使用的Dropout层，在但rwightman实现的代码中使用的是DropPath（stochastic depth），可能后者会更好一点。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DropPath</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks).    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> drop_prob<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>DropPath<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>drop_prob <span class="token operator">=</span> drop_prob    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> drop_path<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>drop_prob<span class="token punctuation">,</span> self<span class="token punctuation">.</span>training<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>MLP Block，如图右侧所示，就是全连接+GELU激活函数+Dropout组成也非常简单，需要注意的是第一个全连接层会把输入节点个数翻4倍<code>[197,768] -&gt; [197,3072]</code>，第二个全连接层会还原回原节点个数<code>[197,3072] -&gt; [197,768]</code></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Mlp</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Encoder Block模块中的 MLP Block</span>    <span class="token triple-quoted-string string">"""    MLP as used in Vision Transformer, MLP-Mixer and related networks    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">,</span> hidden_features<span class="token operator">=</span>None<span class="token punctuation">,</span> out_features<span class="token operator">=</span>None<span class="token punctuation">,</span> act_layer<span class="token operator">=</span>nn<span class="token punctuation">.</span>GELU<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># in_features 数据节点个数</span>        <span class="token comment" spellcheck="true"># act_layer 激活函数</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        out_features <span class="token operator">=</span> out_features <span class="token operator">or</span> in_features  <span class="token comment" spellcheck="true"># out_features 若不传入则等于 in_features</span>        hidden_features <span class="token operator">=</span> hidden_features <span class="token operator">or</span> in_features  <span class="token comment" spellcheck="true"># hidden_features 一般为in_features的四倍，若不传入则等于 in_features</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token punctuation">,</span> hidden_features<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 全连接层 输入大小为in_features,输出大小为hidden_features</span>        self<span class="token punctuation">.</span>act <span class="token operator">=</span> act_layer<span class="token punctuation">(</span><span class="token punctuation">)</span>                               <span class="token comment" spellcheck="true"># 激活函数层，默认为GELU</span>        self<span class="token punctuation">.</span>fc2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_features<span class="token punctuation">,</span> out_features<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 全连接层 输入大小为hidden_features,输出大小为out_features</span>        self<span class="token punctuation">.</span>drop <span class="token operator">=</span> nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>drop<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># Dropout层</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>act<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210704114505695.png" alt="encoder"></p><h3 id="MLP-Head详解"><a href="#MLP-Head详解" class="headerlink" title="MLP Head详解"></a>MLP Head详解</h3><p>上面通过Transformer Encoder后输出的shape和输入的shape是保持不变的，以ViT-B/16为例，输入的是<code>[197,768]</code>输出的还是<code>[197,768]</code>。注意，在Transformer Encoder后其实还有一个Layer Norm没有画出来，后面有我自己画的ViT的模型可以看到详细结构。这里我们只是需要分类的信息，所以我们只需要提取出<code>[class]token</code>生成的对应结果就行，即<code>[197,768]</code>中抽取出<code>[class]token</code>对应的<code>[1,768]</code>。接着我们通过MLP Head得到我们最终的分类结果。MLP Head原论文中说在训练ImageNet21K时是由<code>Linear+tanh激活函数+Linear</code>组成。但是迁移到ImageNet1K上或者你自己的数据上时，只用一个<code>Linear</code>即可。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210626143208683.png" alt="mlp head"></p><h3 id="Vision-Transformer网络结构"><a href="#Vision-Transformer网络结构" class="headerlink" title="Vision Transformer网络结构"></a>Vision Transformer网络结构</h3><p>以ViT-B/16为例：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210704124600507.png" alt="vit-b/16"></p><p>下表是论文用来对比ViT，Resnet（和刚刚讲的一样，使用的卷积层和Norm层都进行了修改）以及Hybrid模型的效果。通过对比发现，在训练epoch较少时Hybrid优于ViT，但当epoch增大后ViT优于Hybrid。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20210626163529802.png" alt="vit vs hybrid"></p><h2 id="ViT模型搭建参数"><a href="#ViT模型搭建参数" class="headerlink" title="ViT模型搭建参数"></a>ViT模型搭建参数</h2><p>在论文的Table1中有给出三个模型（Base/ Large/ Huge）的参数，在源码中除了有Patch Size为16x16的外还有32x32的。其中的Layers就是Transformer Encoder中重复堆叠Encoder Block的次数，Hidden Size就是对应通过Embedding层后每个token的dim（向量的长度），MLP size是Transformer Encoder中MLP Block第一个全连接的节点个数（是Hidden Size的四倍），Heads代表Transformer中Multi-Head Attention的heads数。</p><table><thead><tr><th>Model</th><th>Patch Size</th><th>Layers</th><th>Hidden Size D</th><th>MLP size</th><th>Heads</th><th>Params</th></tr></thead><tbody><tr><td>ViT-Base</td><td>16x16</td><td>12</td><td>768</td><td>3072</td><td>12</td><td>86M</td></tr><tr><td>ViT-Large</td><td>16x16</td><td>24</td><td>1024</td><td>4096</td><td>16</td><td>307M</td></tr><tr><td>ViT-Huge</td><td>14x14</td><td>32</td><td>1280</td><td>5120</td><td>16</td><td>632M</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像识别 </tag>
            
            <tag> Vit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows安装MySQL5.7</title>
      <link href="/windows-an-zhuang-mysql5-7.html"/>
      <url>/windows-an-zhuang-mysql5-7.html</url>
      
        <content type="html"><![CDATA[<h3 id="windows安装MySQL5-7"><a href="#windows安装MySQL5-7" class="headerlink" title="windows安装MySQL5.7"></a>windows安装MySQL5.7</h3><blockquote><p>转载传送门：<a href="https://www.cnblogs.com/kendoziyu/p/MySQL.html" target="_blank" rel="noopener">https://www.cnblogs.com/kendoziyu/p/MySQL.html</a></p></blockquote><h3 id="一、检查及卸载原版本"><a href="#一、检查及卸载原版本" class="headerlink" title="一、检查及卸载原版本"></a>一、检查及卸载原版本</h3><p>我们可以检查下我们的系统服务确定下有没有安装过MySQL，打开Windows系统服务有以下两种方式：</p><ul><li>右击我的电脑/计算机，点击管理，打开计算机管理，依次选择服务和应用程序——服务。</li><li>使用快捷命令：同时按下<strong>win+r键</strong>，在运行窗口中输入<strong>services.msc</strong>，即可打开服务。</li></ul><p>打开系统服务后页面如下，可以看到我的电脑中已经安装有MySQL，下面我将其卸载，若你的电脑没有MySQL服务则不需要操作此步。<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191002105417276-217001891.png" alt="检查Mysql服务"></p><p>现在我们打开cmd命令行来卸载MySQL：</p><p>1.停止MySQL服务<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191002105456062-1583359584.png" alt="停止Mysql服务"><br>2.卸载MySQL<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191002105524805-457396218.png" alt="卸载Mysql"></p><h3 id="二、下载MySQL安装包"><a href="#二、下载MySQL安装包" class="headerlink" title="二、下载MySQL安装包"></a>二、下载MySQL安装包</h3><p>我们常用的是<strong>MySQL Community Server</strong>这款产品。</p><h5 id="下载方案A"><a href="#下载方案A" class="headerlink" title="下载方案A"></a>下载方案A</h5><blockquote><p>下载地址（选择该地址可下载目前最新的通用版本）：<br><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p></blockquote><ol><li>点击<code>Looking for previous GA versions</code>，点击后效果如下图，：<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191002105603734-976233778.png" alt="查找最新的通用版本"></li><li>有两种可选的下载策略，一个是下载installer安装器，一个是下载解压安装包<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191002105718006-80264316.png" alt="img"></li><li>installer安装器下载地址:</li></ol><blockquote><p><a href="https://dev.mysql.com/downloads/windows/installer/5.7.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/windows/installer/5.7.html</a></p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191002105747162-1277733805.png" alt="下载安装器"></p><p>PS:只有32位的下载器</p><h5 id="下载方案B"><a href="#下载方案B" class="headerlink" title="下载方案B"></a>下载方案B</h5><blockquote><p>下载地址（选择该地址可以下载历史版本）<br><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p></blockquote><p>PS：选择这种方式<strong>只能下载用压缩包方案</strong>安装。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825234203460.png" alt="image-20210825234203460"></p><h3 id="三、安装MySQL"><a href="#三、安装MySQL" class="headerlink" title="三、安装MySQL"></a>三、安装MySQL</h3><h5 id="安装方案A：安装器安装"><a href="#安装方案A：安装器安装" class="headerlink" title="安装方案A：安装器安装"></a>安装方案A：安装器安装</h5><h6 id="1-双击安装包mysql-installer-community-5-7-27-0-msi时出现错误"><a href="#1-双击安装包mysql-installer-community-5-7-27-0-msi时出现错误" class="headerlink" title="1. 双击安装包mysql-installer-community-5.7.27.0.msi时出现错误"></a>1. 双击安装包mysql-installer-community-5.7.27.0.msi时出现错误</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003122859389-1971663578.png" alt="installer安装报错"></p><blockquote><p>下载.NET FRAMEWORK 4.5.2的地址 <a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=42642" target="_blank" rel="noopener">https://www.microsoft.com/zh-CN/download/details.aspx?id=42642</a></p></blockquote><h6 id="2-选择安装类型Server-Only"><a href="#2-选择安装类型Server-Only" class="headerlink" title="2. 选择安装类型Server Only"></a>2. 选择安装类型Server Only</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123008831-453269682.png" alt="Server Only"></p><p>选择理由：我的主要目的不是对MySQL进行二次开发，而是基于MySQL提供的数据库服务，开发Web服务器，所以选择选择Server Only。</p><h6 id="3-遇到缺少必要的组件："><a href="#3-遇到缺少必要的组件：" class="headerlink" title="3. 遇到缺少必要的组件："></a>3. 遇到缺少必要的组件：</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123041760-1437047115.png" alt="Check Requirements"></p><ul><li>Microsoft Visual C++ 2013 Redistributable Packages（x64） is not installed</li></ul><blockquote><p>下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=40784" target="_blank" rel="noopener">https://www.microsoft.com/en-us/download/details.aspx?id=40784</a></p></blockquote><ul><li>我选择了下载 vcredist_x64.exe</li><li>双击安装 vcredist_x64.exe，安装完成之后，关闭MySQL Intaller并重新打开<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123120007-1732055678.png" alt="MySQL-installation"></li></ul><h6 id="4-其他的一些步骤参考（基本保持默认-点击Next就好了）"><a href="#4-其他的一些步骤参考（基本保持默认-点击Next就好了）" class="headerlink" title="4. 其他的一些步骤参考（基本保持默认,点击Next就好了）"></a>4. 其他的一些步骤参考（基本保持默认,点击Next就好了）</h6><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123202668-1358491620.png" alt="High-availability"><br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123235586-1307104687.png" alt="Type-and-networking"><br>这一步选择填写数据库的端口号<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123333492-1449855759.png" alt="Windows Service"><br>这一步填写Windows服务的名称<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123400271-794557846.png" alt="Apply Configurations"><br>这一步自动依次执行列表中所有的额外配置步骤</p><h6 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5. 配置环境变量"></a>5. 配置环境变量</h6><p>我的MySQL安装在<code>C:\Program Files\MySQL\MySQL Server 5.7</code>目录下，</p><ul><li>在桌面上右击计算机-属性-高级系统设置：<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123443242-709003050.png" alt="环境变量"><br><strong>新增</strong> 系统变量MYSQL_HOME=C:\Program Files\MySQL\MySQL Server 5.7<br>在系统变量Path的最后 <strong>追加</strong> <code>;%MYSQL_HOME%\bin</code></li><li><code>Win+R</code>打开运行，输入<code>cmd</code>回车<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191003123504019-1764572605.png" alt="Cmd-Windows-Service"></li></ul><h5 id="安装方案B：解压安装包安装"><a href="#安装方案B：解压安装包安装" class="headerlink" title="安装方案B：解压安装包安装"></a>安装方案B：解压安装包安装</h5><h6 id="1-解压安装包（mysql-5-7-17-winx64）"><a href="#1-解压安装包（mysql-5-7-17-winx64）" class="headerlink" title="1.解压安装包（mysql-5.7.17-winx64）"></a>1.解压安装包（mysql-5.7.17-winx64）</h6><blockquote><p>我选择解压在D盘，并且创建lib文件夹，即D:\lib\mysql-5.7.17-winx64，我又修改文件夹名称为D:\lib\mysql<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191007001628194-2037607139.png" alt="解压MySQL"></p></blockquote><h6 id="2-在解压目录下创建my-ini"><a href="#2-在解压目录下创建my-ini" class="headerlink" title="2.在解压目录下创建my.ini"></a>2.在解压目录下创建my.ini</h6><pre><code>[client]# 设置mysql客户端默认字符集default-character-set=utf8[mysqld]# 设置3306端口port=3306character_set_server=utf8# 解压目录basedir=D:\lib\mysql# 解压目录下data目录datadir=D:\lib\mysql\datadefault-storage-engine=INNODBsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[WinMySQLAdmin]D:\lib\mysql\bin\mysqld.exe</code></pre><h6 id="3-设置MYSQL的环境变量"><a href="#3-设置MYSQL的环境变量" class="headerlink" title="3.设置MYSQL的环境变量"></a>3.设置MYSQL的环境变量</h6><ul><li>新增系统变量 MYSQL_HOME=D:\lib\mysql</li><li>在系统变量Path后面追加<code>;%MYSQL_HOME%\bin</code></li></ul><h6 id="4-安装MYSQL"><a href="#4-安装MYSQL" class="headerlink" title="4.安装MYSQL"></a>4.安装MYSQL</h6><ul><li>在解压目录的\bin下（D:\lib\mysql\bin)，按住键盘<code>Ctrl+Shift</code>，然后右击鼠标打开命令窗口<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191007001651827-785308498.png" alt="打开命令窗口"></li><li>执行命令初始化数据库<br><code>mysqld -install</code><br><code>mysqld --initialize --console</code><br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1730512-20191007001732043-1502848367.png" alt="初始化数据库"></li></ul><blockquote><p>“mysqld –initialize –console”命令，可以得到mysql的初始密码，用<strong>mysqld –initialize 的目的是</strong>初始化data目录。要不然mysql5.7的解压文件夹下面不会出现data文件夹<br>比如本文中的初始密码为<code>.ak8%if5#nzJ</code></p></blockquote><ul><li>接着就是在输入<strong>net start mysql</strong>启动服务</li><li>开始使用mysql，输入命令：<strong>mysql -uroot -p</strong>，然后输入刚才的初始密码</li><li>修改密码<br><code>mysql&gt; alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</code><br><code>mysql&gt; flush privileges;</code></li><li>使用quit退出</li><li>输入命令：<strong>mysql -uroot -p</strong>，然后尝试新密码</li></ul>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django后端搭建</title>
      <link href="/django-hou-duan-da-jian.html"/>
      <url>/django-hou-duan-da-jian.html</url>
      
        <content type="html"><![CDATA[<h2 id="Django后端搭建"><a href="#Django后端搭建" class="headerlink" title="Django后端搭建"></a>Django后端搭建</h2><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="编程语言–python3"><a href="#编程语言–python3" class="headerlink" title="编程语言–python3"></a>编程语言–python3</h4><ul><li>官网 <a href="https://www.python.org/" target="_blank" rel="noopener">https://www.python.org/</a></li><li>安装流程 <a href="https://jingyan.baidu.com/article/3c48dd342686aaa10be358ee.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/3c48dd342686aaa10be358ee.html</a></li></ul><h4 id="IDE–pycharm"><a href="#IDE–pycharm" class="headerlink" title="IDE–pycharm"></a>IDE–pycharm</h4><ul><li><p>官网 <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/</a></p><p>社区版即可满足开发需求</p><p>专业版破解参考 </p></li></ul><h4 id="python相关包安装"><a href="#python相关包安装" class="headerlink" title="python相关包安装"></a>python相关包安装</h4><ul><li>安装命令 </li></ul><pre><code>pip3 install &lt;package name&gt; </code></pre><ul><li>如果上述命令安装过慢可添加-i参数指定安装源 </li></ul><pre><code>pip3 install &lt;package name&gt; -i https://pypi.tuna.tsinghua.edu.cn/simple/</code></pre><p>​    具体需要安装的包需要在开发过程中即用即装即可</p><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li><p>是否使用mysql数据库取决于项目需求</p><p>在本示例中，我们使用了mysql数据库进行数据存储</p></li><li><p>安装可参考 <a href="https://charles-li-github.github.io/windows-an-zhuang-mysql5-7.html">https://charles-li-github.github.io/windows-an-zhuang-mysql5-7.html</a></p></li></ul><h3 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h3><h4 id="安装Django包"><a href="#安装Django包" class="headerlink" title="安装Django包"></a>安装Django包</h4><pre><code>pip3 install Django</code></pre><h4 id="创建Django项目-1"><a href="#创建Django项目-1" class="headerlink" title="创建Django项目"></a>创建Django项目</h4><ul><li>用pycharm创建名为DjangoDemoPRJ的项目</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825230658588.png" alt="image-20210825230658588"></p><p>创建成功后的目录结构如下图</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825230651023.png" alt="image-20210825230651023"></p><ul><li>除了使用pycharm建立项目外，还可使用django-admin.py建立名为XXX的项目</li></ul><pre><code>django-admin startproject xxx</code></pre><h4 id="Django项目目录介绍"><a href="#Django项目目录介绍" class="headerlink" title="Django项目目录介绍"></a>Django项目目录介绍</h4><ul><li>DjangoDemoPRJ: 项目的容器。</li><li>manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。</li><li>DjangoDemoPRJ /<strong>init</strong>.py: 一个空文件，告诉 Python 该目录是一个 Python 包。</li><li>DjangoDemoPRJ /settings.py: 该 Django 项目的设置/配置。</li><li>DjangoDemoPRJ /urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站目录。</li><li>DjangoDemoPRJ/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</li></ul><h3 id="创建Django-APP"><a href="#创建Django-APP" class="headerlink" title="创建Django APP"></a>创建Django APP</h3><h4 id="APP创建"><a href="#APP创建" class="headerlink" title="APP创建"></a>APP创建</h4><ul><li>调用DjangoDemoPRJ 项目的manage.py 文件创建名为DjangoDemoAPP的应用</li></ul><pre><code>python manage.py startapp DjangoDemoAPP</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825231401693.png" alt="image-20210825231401693"></p><p>如果执行上述命令出现下图报错，则需要在DjangoDemoPRJ 项目的settings.py文件中加入下述代码</p><pre><code>import os</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825231340095.png" alt="image-20210825231340095"></p><ul><li>将DjangoDemoAPP添加到DjangoDemoPRJ的项目配置（settings.py）中</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232008285.png" alt="image-20210825232008285"></p><h4 id="Django应用的目录介绍"><a href="#Django应用的目录介绍" class="headerlink" title="Django应用的目录介绍"></a>Django应用的目录介绍</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825231619465.png" alt="image-20210825231619465"></p><ul><li>DjangoDemoAPP         #应用目录</li><li>│ admin.py    #对应应用后台管理配置文件。</li><li>│ apps.py     #对应应用的配置文件。</li><li>│ models.py    #数据模块，数据库设计就在此文件中设计。</li><li>│ tests.py    #自动化测试模块，可在里面编写测试脚本自动化测试</li><li>│ views.py    #视图文件，用来执行响应代码的。你在浏览器所见所得都是它处理的。</li><li>│ <strong>init</strong>.py</li><li>├─migrations    #数据迁移、移植文目录，记录数据库操作记录，内容自动生成。</li><li>│ │ <strong>init</strong>.py</li></ul><h4 id="urls配置"><a href="#urls配置" class="headerlink" title="urls配置"></a>urls配置</h4><p>为了降低多个Django APP 环境下的urls的复杂性，我们可以在DjangoDemoAPP文件下新建一个urls.py并将其关联到DjangoDemoPRJ项目的urls.py中。</p><ul><li>在DjanDemoAPP下新建urls.py文件并添加urlpatterns</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825231834265.png" alt="image-20210825231834265"></p><ul><li>在DjangoDemoPRJ项目的urls.py中加入DjanDemoAPP的urls.py关联</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825231839494.png" alt="image-20210825231839494"></p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>截止到步骤，Django项目即应用已经创建完成，可使用下述命令运行项目</p><pre><code>python manage.py runserver</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232120890.png" alt="image-20210825232120890"></p><p>点击上述网址即可打开项目网站</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232150798.png" alt="image-20210825232150798"></p><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>数据库我们使用的是Mysql数据库。</p><p>如下图所示，数据库的配置我们需要在settings.py文件中添加Mysql数据库的信息。</p><ul><li>NAME为数据库database的名称</li><li>USER为数据库username</li><li>PASSWORD为对应数据库username的密码</li><li>HOST为数据库的Hostname，本地则为127.0.0.1</li><li>PORT为数据库端口号</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232412967.png" alt="image-20210825232412967"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232438334.png" alt="image-20210825232438334"></p><h3 id="Django数据模型"><a href="#Django数据模型" class="headerlink" title="Django数据模型"></a>Django数据模型</h3><p>数据库配置好后我们可以在DjangoDemoAPP的models.py文件中建立数据模型</p><ul><li>建立数据模型的代码可参考下图</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232719574.png" alt="image-20210825232719574"></p><p>通过import引入的models下存在很多中Field，可根据开发需求选择适当的Field</p><p>在建立数据模型时可以选用很多参数</p><pre><code>primary_key参数表明主键db_column参数表明列名max_length参数表明最大长度null参数表明此元素是否可为空</code></pre><ul><li>在models.py文件中创建好数据模型后我们需要进行数据的迁移和同步</li></ul><p>数据迁移命令如下</p><pre><code>python manage.py makemigrations</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232902466.png" alt="image-20210825232902466"></p><p>数据同步命令如下</p><pre><code>python manage.py migrate</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232909667.png" alt="image-20210825232909667"></p><ul><li><p>完成数据的迁移与同步后，Mysql的djangodemoprjdb数据库中将创建好我们刚刚建立的数据模型。</p><p>djangodemoprjdb下的其他数据表存放的是django本身自带的部分功能的数据表，例如管理员信息等。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825232948885.png" alt="image-20210825232948885"></p></li></ul><h3 id="配置Django项目的static文件夹"><a href="#配置Django项目的static文件夹" class="headerlink" title="配置Django项目的static文件夹"></a>配置Django项目的static文件夹</h3><ul><li>新建static文件夹</li><li>在static文件夹下新建js、css、fonts、picture四个文件夹分别用于存放js、css、fonts、picture文件</li><li>配置DjangoDemoPRJ项目的settings.py文件</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233024118.png" alt="image-20210825233024118"></p><h3 id="项目实现"><a href="#项目实现" class="headerlink" title="项目实现"></a>项目实现</h3><h4 id="新建前端文件"><a href="#新建前端文件" class="headerlink" title="新建前端文件"></a>新建前端文件</h4><ul><li>在templates文件夹中新建Home.html</li><li>在static/js文件夹中新建Home.js</li><li>在static/css文件夹中新建Home.css</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233153714.png" alt="image-20210825233153714"></p><h4 id="实现后端页面跳转的业务逻辑"><a href="#实现后端页面跳转的业务逻辑" class="headerlink" title="实现后端页面跳转的业务逻辑"></a>实现后端页面跳转的业务逻辑</h4><ul><li>urls和views的实现</li><li>DjangoDemoAPP/views.py<ul><li>实现页面跳转的业务逻辑</li></ul></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233230256.png" alt="image-20210825233230256"></p><ul><li><p>DjangoDemoAPP/urls.py</p><ul><li>创建跳转Home.html的urls</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233249232.png" alt="image-20210825233249232"></p></li></ul><h4 id="实现后端数据获取的业务逻辑"><a href="#实现后端数据获取的业务逻辑" class="headerlink" title="实现后端数据获取的业务逻辑"></a>实现后端数据获取的业务逻辑</h4><ul><li>urls和views的实现</li><li>DjangoDemoAPP/views.py<ul><li>实现获取温度数据功能</li></ul></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233337858.png" alt="image-20210825233337858"></p><ul><li><p>DjangoDemoAPP/urls.py</p><ul><li>添加获取温度数据的url</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233343730.png" alt="image-20210825233343730"></p></li></ul><h4 id="数据获取的业务逻辑测试"><a href="#数据获取的业务逻辑测试" class="headerlink" title="数据获取的业务逻辑测试"></a>数据获取的业务逻辑测试</h4><ul><li><p>debug后端url的业务逻辑可使用postman软件</p><ul><li>postman下载地址 <a href="https://www.postman.com/" target="_blank" rel="noopener">https://www.postman.com/</a></li></ul></li><li><p>为了便于测试，我们需要在数据库中手动添加温度的数据信息</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233457866.png" alt="image-20210825233457866"></p><ul><li>使用postman测试结果如下，该功能可正确获取温度数据</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233503057.png" alt="image-20210825233503057"></p><h4 id="实现开关灯控制的业务逻辑"><a href="#实现开关灯控制的业务逻辑" class="headerlink" title="实现开关灯控制的业务逻辑"></a>实现开关灯控制的业务逻辑</h4><ul><li>DjangoDemoAPP/views.py</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233530961.png" alt="image-20210825233530961"></p><ul><li>DjangoDemoAPP/urls.py</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233534443.png" alt="image-20210825233534443"></p><h4 id="开关灯控制的业务逻辑测试"><a href="#开关灯控制的业务逻辑测试" class="headerlink" title="开关灯控制的业务逻辑测试"></a>开关灯控制的业务逻辑测试</h4><ul><li>为避免post请求的403错误我们需要在settings.py文件中添加Cors的配置，如下图所示</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233604450.png" alt="image-20210825233604450"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233608412.png" alt="image-20210825233608412"></p><ul><li>使用postman的测试结果如下</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233612788.png" alt="image-20210825233612788"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233618372.png" alt="image-20210825233618372"></p><h4 id="前端h5代码"><a href="#前端h5代码" class="headerlink" title="前端h5代码"></a>前端h5代码</h4><ul><li>本案例的项目目标为温度数据的展示和下位机开关灯控制。</li><li>Home.html代码如下</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233649090.png" alt="image-20210825233649090"></p><h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233701008.png" alt="image-20210825233701008"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233705008.png" alt="image-20210825233705008"></p><h4 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210825233735294.png" alt="image-20210825233735294"></p>]]></content>
      
      
      <categories>
          
          <category> Web Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>农业知识图谱实例</title>
      <link href="/nong-ye-zhi-shi-tu-pu-shi-li.html"/>
      <url>/nong-ye-zhi-shi-tu-pu-shi-li.html</url>
      
        <content type="html"><![CDATA[<h1 id="Agricultural-Knowledge-Graph"><a href="#Agricultural-Knowledge-Graph" class="headerlink" title="Agricultural Knowledge Graph"></a>Agricultural Knowledge Graph</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>项目代码仅供参考，项目中包含的数据可免费用于学术等非商业用途。</p><p>传送门：<a href="https://github.com/qq547276542/Agriculture_KnowledgeGraph" target="_blank" rel="noopener">https://github.com/qq547276542/Agriculture_KnowledgeGraph</a></p><blockquote><p>相关工作请引用paper: </p><ul><li>AgriKG: An Agricultural Knowledge Graph and Its Applications[C]. DASFAA (3) 2019: 533-537</li></ul></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre><code>.├── MyCrawler      // scrapy爬虫项目路径(已爬好)│   └── MyCrawler│       ├── data│       └── spiders├── data\ processing    // 数据清洗(已无用)│   └── data├── demo     // django项目路径│   ├── Model  // 模型层，用于封装Item类，以及neo4j和csv的读取│   ├── demo   // 用于写页面的逻辑(View)│   ├── label_data    // 标注训练集页面的保存路径│   │   └── handwork│   ├── static    // 静态资源│   │   ├── css│   │   ├── js│   │   └── open-iconic│   ├── templates   // html页面│   └── toolkit   // 工具库，包括预加载，命名实体识别│   └── KNN_predict   ├── KNN_predict    // KNN算法预测标签├── dfs_tree_crawler     // 爬取互动百科农业实体树形结构的爬虫└── wikidataSpider    //  爬取wiki中的关系</code></pre><h2 id="可复用的资源"><a href="#可复用的资源" class="headerlink" title="可复用的资源"></a>可复用的资源</h2><ul><li>hudong_pedia.csv : 已经爬好的农业实体的百科页面的结构化csv文件</li><li>labels.txt： 5000多个手工标注的实体类别</li><li>predict_labels.txt:  KNN算法预测的15W多个实体的类别</li><li>attributes.csv: 部分实体的属性(互动百科页面中直接得到)</li><li>/wikidataSpider/wikidataProcessing/wikidata_relation.csv: predict_labels.txt中实体在wikidata中对应的三元组关系</li><li>/wikidataSpider/weatherData/static_weather_list.csv： 气候类型列表</li><li>/wikidataSpider/weatherData/weather_plant.csv：气候与植物的种植关系</li><li>/wikidataSpider/weatherData/city_weather.csv：城市与气候的关系</li></ul><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="安装基本环境"><a href="#安装基本环境" class="headerlink" title="安装基本环境"></a><strong>安装基本环境</strong></h3><p>确保安装好python3和Neo4j（任意版本）</p><p>安装一系列pip依赖： cd至项目根目录，运行 sudo pip3 install -r requirement.txt</p><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a><strong>导入数据</strong></h3><p>将hudong_pedia.csv导入neo4j：开启neo4j，进入neo4j控制台。将hudong_pedia.csv放入neo4j安装目录下的/import目录。在控制台依次输入：</p><pre><code>// 将hudong_pedia.csv 导入LOAD CSV WITH HEADERS  FROM &quot;file:///hudong_pedia.csv&quot; AS line  CREATE (p:HudongItem{title:line.title,image:line.image,detail:line.detail,url:line.url,openTypeList:line.openTypeList,baseInfoKeyList:line.baseInfoKeyList,baseInfoValueList:line.baseInfoValueList})  // 新增了hudong_pedia2.csvLOAD CSV WITH HEADERS  FROM &quot;file:///hudong_pedia2.csv&quot; AS line  CREATE (p:HudongItem{title:line.title,image:line.image,detail:line.detail,url:line.url,openTypeList:line.openTypeList,baseInfoKeyList:line.baseInfoKeyList,baseInfoValueList:line.baseInfoValueList})  </code></pre><pre><code>// 创建索引CREATE CONSTRAINT ON (c:HudongItem)ASSERT c.title IS UNIQUE</code></pre><p>以上两步的意思是，将hudong_pedia.csv导入neo4j作为结点，然后对titile属性添加UNIQUE（唯一约束/索引）</p><p><em>（如果导入的时候出现neo4j jvm内存溢出，可以在导入前，先把neo4j下的conf/neo4j.conf中的dbms.memory.heap.initial_size 和dbms.memory.heap.max_size调大点。导入完成后再把值改回去）</em></p><p>进入/wikidataSpider/wikidataProcessing中，将new_node.csv,wikidata_relation.csv,wikidata_relation2.csv三个文件放入neo4j的import文件夹中（运行relationDataProcessing.py可以得到这3个文件），然后分别运行</p><pre><code>// 导入新的节点LOAD CSV WITH HEADERS FROM &quot;file:///new_node.csv&quot; AS lineCREATE (:NewNode { title: line.title })//添加索引CREATE CONSTRAINT ON (c:NewNode)ASSERT c.title IS UNIQUE//导入hudongItem和新加入节点之间的关系LOAD CSV  WITH HEADERS FROM &quot;file:///wikidata_relation2.csv&quot; AS lineMATCH (entity1:HudongItem{title:line.HudongItem}) , (entity2:NewNode{title:line.NewNode})CREATE (entity1)-[:RELATION { type: line.relation }]-&gt;(entity2)LOAD CSV  WITH HEADERS FROM &quot;file:///wikidata_relation.csv&quot; AS lineMATCH (entity1:HudongItem{title:line.HudongItem1}) , (entity2:HudongItem{title:line.HudongItem2})CREATE (entity1)-[:RELATION { type: line.relation }]-&gt;(entity2)</code></pre><ul><li><strong>导入实体属性(数据来源: 互动百科)</strong></li></ul><p>将attributes.csv放到neo4j的import目录下，然后执行</p><pre class="line-numbers language-cypher"><code class="language-cypher">LOAD CSV WITH HEADERS FROM "file:///attributes.csv" AS lineMATCH (entity1:HudongItem{title:line.Entity}), (entity2:HudongItem{title:line.Attribute})CREATE (entity1)-[:RELATION { type: line.AttributeName }]->(entity2);LOAD CSV WITH HEADERS FROM "file:///attributes.csv" AS lineMATCH (entity1:HudongItem{title:line.Entity}), (entity2:NewNode{title:line.Attribute})CREATE (entity1)-[:RELATION { type: line.AttributeName }]->(entity2);LOAD CSV WITH HEADERS FROM "file:///attributes.csv" AS lineMATCH (entity1:NewNode{title:line.Entity}), (entity2:NewNode{title:line.Attribute})CREATE (entity1)-[:RELATION { type: line.AttributeName }]->(entity2);LOAD CSV WITH HEADERS FROM "file:///attributes.csv" AS lineMATCH (entity1:NewNode{title:line.Entity}), (entity2:HudongItem{title:line.Attribute})CREATE (entity1)-[:RELATION { type: line.AttributeName }]->(entity2)  //我们建索引的时候带了label，因此只有使用label时才会使用索引，这里我们的实体有两个label，所以一共做2*2=4次。当然，可以建立全局索引，即对于不同的label使用同一个索引                      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>导入气候名称:</strong></li></ul><p>将wikidataSpider/weatherData/static_weather_list.csv放在指定的位置(import文件夹下)</p><pre><code>//导入节点LOAD CSV WITH HEADERS FROM &quot;file:///static_weather_list.csv&quot; AS lineMERGE (:Weather { title: line.title })//添加索引CREATE CONSTRAINT ON (c:Weather)ASSERT c.title IS UNIQUE</code></pre><ul><li><strong>导入气候与植物的关系</strong></li></ul><pre><code>将wikidataSpider/weatherData/weather_plant.csv放在指定的位置(import文件夹下)//导入hudongItem和新加入节点之间的关系LOAD CSV  WITH HEADERS FROM &quot;file:///weather_plant.csv&quot; AS lineMATCH (entity1:Weather{title:line.Weather}) , (entity2:HudongItem{title:line.Plant})CREATE (entity1)-[:Weather2Plant { type: line.relation }]-&gt;(entity2)//导入城市的气候将city_weather.csv放在指定的位置(import 文件夹下)(这步大约需要15分钟左右)//导入城市对应的气候LOAD CSV WITH HEADERS FROM &quot;file:///city_weather.csv&quot; AS lineMATCH (city{title:line.city}) , (weather{title:line.weather})CREATE (city)-[:CityWeather { type: line.relation }]-&gt;(weather)</code></pre><p>以上步骤是导入爬取到的关系</p><h3 id="下载词向量模型"><a href="#下载词向量模型" class="headerlink" title="下载词向量模型"></a><strong>下载词向量模型</strong></h3><p><strong>（如果只是为了运行项目，步骤2可以不做，预测结果已经离线处理好了）</strong></p><p><del><a href="http://s3-us-west-1.amazonaws.com/fasttext-vectors/wiki.zh.zip" target="_blank" rel="noopener">http://s3-us-west-1.amazonaws.com/fasttext-vectors/wiki.zh.zip</a><br>  将wiki.zh.bin放入 KNN_predict 目录 。</del></p><h3 id="修改Neo4j用户"><a href="#修改Neo4j用户" class="headerlink" title="修改Neo4j用户"></a><strong>修改Neo4j用户</strong></h3><p>进入demo/Model/neo_models.py,修改第9行的neo4j账号密码，改成你自己的</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a><strong>启动服务</strong></h3><p>进入demo目录，然后运行脚本：</p><pre><code>sudo sh django_server_start.sh</code></pre><p>这样就成功的启动了django。我们进入8000端口主页面，输入文本，即可看到以下命名实体和分词的结果（确保django和neo4j都处于开启状态）</p><hr><h2 id="项目展示"><a href="#项目展示" class="headerlink" title="项目展示"></a>项目展示</h2><h3 id="农业知识问答"><a href="#农业知识问答" class="headerlink" title="农业知识问答"></a>农业知识问答</h3><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/1541921074856.jpg" alt></p><h3 id="部分配置信息修改"><a href="#部分配置信息修改" class="headerlink" title="部分配置信息修改"></a>部分配置信息修改</h3><ul><li>关系查询中，添加了2个实体间的最短路查询，从而挖掘出实体之间一些奇怪的隐含关系</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/5bd3bf6ce4472.jpg" alt="image"></p><h3 id="农业实体识别-实体分类"><a href="#农业实体识别-实体分类" class="headerlink" title="农业实体识别+实体分类"></a>农业实体识别+实体分类</h3><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112142205.png" alt="image-20210824112142205"></p><ul><li>点击实体的超链接，可以跳转到词条页面（词云采用了词向量技术）：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/3.png" alt="image"></p><h3 id="实体查询"><a href="#实体查询" class="headerlink" title="实体查询"></a>实体查询</h3><ul><li>实体查询部分，我们能够搜索出与某一实体相关的实体，以及它们之间的关系：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/entitySearch.png" alt="image"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112221314.png" alt="image-20210824112221314"></p><h3 id="关系查询"><a href="#关系查询" class="headerlink" title="关系查询"></a>关系查询</h3><p>关系查询即查询三元组关系entity1-[relation]-&gt;entity2 , 分为如下几种情况:</p><ul><li>指定第一个实体entity1</li><li>指定第二个实体entity2</li><li>指定第一个实体entity1和关系relation</li><li>指定关系relation和第二个实体entity2</li><li>指定第一个实体entity1和第二个实体entity2</li><li>指定第一个实体entity1和第二个实体entity2以及关系relation</li></ul><p>下图所示，是指定关系relation和第二个实体entity2的查询结果</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112321414.png" alt="image-20210824112321414"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112306751.png" alt="image-20210824112306751"></p><h3 id="知识的树形结构"><a href="#知识的树形结构" class="headerlink" title="知识的树形结构"></a>知识的树形结构</h3><p>农业知识概览部分，我们能够列出某一农业分类下的词条列表，这些概念以树形结构组织在一起：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/6.png" alt="image"></p><p>农业分类的树形图：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112423078.png" alt="image-20210824112423078"></p><h3 id="训练集标注"><a href="#训练集标注" class="headerlink" title="训练集标注"></a>训练集标注</h3><p>我们还制作了训练集的手动标注页面，每次会随机的跳出一个未标注过的词条。链接：<a href="http://localhost:8000/tagging-get" target="_blank" rel="noopener">http://localhost:8000/tagging-get</a> , 手动标注的结果会追加到/label_data/labels.txt文件末尾：</p><p>我们将这部分做成了小工具，可复用：<a href="https://github.com/qq547276542/LabelMarker" target="_blank" rel="noopener">https://github.com/qq547276542/LabelMarker</a></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112611693.png" alt="image-20210824112611693"></p><p>同样的，我们制作了标注关系提取训练集的工具，如下图所示</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112626103.png" alt="image-20210824112626103"></p><p>如果Statement的标签是对的，点击True按钮；否则选择一个关系，或者输入其它关系。若当前句子无法判断，则点击Change One按钮换一条数据。</p><p>说明:　Statement是/wikidataSpider/TrainDataBaseOnWiki/finalData中train_data.txt中的数据，我们将它转化成json,导入到mongoDB中。标注好的数据同样存在MongoDB中另一个Collection中。关于Mongo的使用方法可以参考官方tutorial，或者利用这篇文章简单了解一下<a href="http://crisjk.site/2018/04/04/MongoDB-Tutorial/" target="_blank" rel="noopener">MongoDB</a> </p><p>我们在MongoDB中使用两个Collections，一个是train_data，即未经人工标注的数据；另一个是test_data，即人工标注好的数据。</p><p><strong>使用方法</strong>: 启动neo4j,mongodb之后，进入demo目录，启动django服务，进入127.0.0.1:8000/tagging即可使用</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别:"></a>命名实体识别:</h3><p>使用thulac工具进行分词，词性标注，命名实体识别（仅人名，地名，机构名）<br>为了识别农业领域特定实体，我们需要： </p><ol><li>分词，词性标注，命名实体识别 </li><li>以识别为命名实体（person，location，organzation）的，若实体库没有，可以标注出来 </li><li>对于非命名实体部分，采用一定的词组合和词性规则，在O(n)时间扫描所有分词，过滤掉不可能为农业实体的部分（例如动词肯定不是农业实体） </li><li>对于剩余词及词组合，匹配知识库中以分好类的实体。如果没有匹配到实体，或者匹配到的实体属于0类（即非实体），则将其过滤掉。 </li><li>实体的分类算法见下文。</li></ol><h3 id="实体分类："><a href="#实体分类：" class="headerlink" title="实体分类："></a>实体分类：</h3><h4 id="特征提取："><a href="#特征提取：" class="headerlink" title="特征提取："></a>特征提取：</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210824112830294.png" alt="image-20210824112830294"></p><h4 id="分类器：KNN算法"><a href="#分类器：KNN算法" class="headerlink" title="分类器：KNN算法"></a>分类器：KNN算法</h4><ul><li>无需表示成向量，比较相似度即可</li><li>K值通过网格搜索得到</li></ul><h4 id="定义两个页面的相似度sim-p1-p2-："><a href="#定义两个页面的相似度sim-p1-p2-：" class="headerlink" title="定义两个页面的相似度sim(p1,p2)："></a>定义两个页面的相似度sim(p1,p2)：</h4><ul><li>title之间的词向量的余弦相似度(利用fasttext计算的词向量能够避免out of vocabulary)</li><li>2组openType之间的词向量的余弦相似度的平均值</li><li>相同的baseInfoKey的IDF值之和（因为‘中文名’这种属性贡献应该比较小）</li><li>相同baseInfoKey下baseInfoValue相同的个数</li><li>预测一个页面时，由于KNN要将该页面和训练集中所有页面进行比较，因此每次预测的复杂度是O(n)，n为训练集规模。在这个过程中，我们可以统计各个分相似度的IDF值，均值，方差，标准差，然后对4个相似度进行标准化:<strong>(x-均值)/方差</strong></li><li>上面四个部分的相似度的加权和为最终的两个页面的相似度，权值由向量weight控制，通过10折叠交叉验证+网格搜索得到</li></ul><h3 id="Labels：（命名实体的分类）"><a href="#Labels：（命名实体的分类）" class="headerlink" title="Labels：（命名实体的分类）"></a>Labels：（命名实体的分类）</h3><table><thead><tr><th>Label</th><th>NE Tags</th><th>Example</th></tr></thead><tbody><tr><td>0</td><td>Invalid（不合法）</td><td>“色调”，“文化”，“景观”，“条件”，“A”，“234年”（不是具体的实体，或一些脏数据）</td></tr><tr><td>1</td><td>Person（人物，职位）</td><td>“袁隆平”，“副市长”</td></tr><tr><td>2</td><td>Location（地点，区域）</td><td>“福建省”，“三明市”，“大明湖”</td></tr><tr><td>3</td><td>Organization（机构，会议）</td><td>“华东师范大学”，“上海市农业委员会”</td></tr><tr><td>4</td><td>Political economy（政治经济名词）</td><td>“惠农补贴”，“基本建设投资”</td></tr><tr><td>5</td><td>Animal（动物学名词，包括畜牧类，爬行类，鸟类，鱼类，等）</td><td>“绵羊”，“淡水鱼”，“麻雀”</td></tr><tr><td>6</td><td>Plant（植物学名词，包括水果，蔬菜，谷物，草药，菌类，植物器官，其他植物）</td><td>“苹果”，“小麦”，“生菜”</td></tr><tr><td>7</td><td>Chemicals（化学名词，包括肥料，农药，杀菌剂，其它化学品，术语等）</td><td>“氮”，“氮肥”，“硝酸盐”，“吸湿剂”</td></tr><tr><td>8</td><td>Climate（气候，季节）</td><td>“夏天”，“干旱”</td></tr><tr><td>9</td><td>Food items（动植物产品）</td><td>“奶酪”，“牛奶”，“羊毛”，“面粉”</td></tr><tr><td>10</td><td>Diseases（动植物疾病）</td><td>“褐腐病”，“晚疫病”</td></tr><tr><td>11</td><td>Natural Disaster（自然灾害）</td><td>“地震”，“洪水”，“饥荒”</td></tr><tr><td>12</td><td>Nutrients（营养素，包括脂肪，矿物质，维生素，碳水化合物等）</td><td>“维生素A”，”钙”</td></tr><tr><td>13</td><td>Biochemistry（生物学名词，包括基因相关，人体部位，组织器官，细胞，细菌，术语）</td><td>“染色体”，“血红蛋白”，“肾脏”，“大肠杆菌”</td></tr><tr><td>14</td><td>Agricultural implements（农机具，一般指机械或物理设施）</td><td>“收割机”，“渔网”</td></tr><tr><td>15</td><td>Technology(农业相关术语，技术和措施)</td><td>“延后栽培”，“卫生防疫”，“扦插”</td></tr><tr><td>16</td><td>other（除上面类别之外的其它名词实体，可以与农业无关但必须是实体）</td><td>“加速度”，“cpu”，“计算机”，“爱鸟周”，“人民币”，“《本草纲目》”，“花岗岩”</td></tr></tbody></table><h3 id="关系抽取"><a href="#关系抽取" class="headerlink" title="关系抽取"></a>关系抽取</h3><p>使用远程监督方法构建数据集，利用tensorflow训练PCNN模型<br>详情见： <a href="https://github.com/qq547276542/Agriculture_KnowledgeGraph/tree/master/relationExtraction" target="_blank" rel="noopener">relationExtraction</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>医学知识图谱实例</title>
      <link href="/yi-xue-zhi-shi-tu-pu-shi-li.html"/>
      <url>/yi-xue-zhi-shi-tu-pu-shi-li.html</url>
      
        <content type="html"><![CDATA[<h1 id="医学知识图谱案例"><a href="#医学知识图谱案例" class="headerlink" title="医学知识图谱案例"></a>医学知识图谱案例</h1><p>从无到有搭建一个以疾病为中心的一定规模医药领域知识图谱，并以该知识图谱完成自动问答与分析服务。</p><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>该项目来源于github上的开源代码，传送门：<a href="https://github.com/liuhuanyong/QASystemOnMedicalKG" target="_blank" rel="noopener">https://github.com/liuhuanyong/QASystemOnMedicalKG</a></p><blockquote><p>注：本内容以学习记录为主，若存在侵权行为，请联系我进行删除。</p></blockquote><p>本项目立足医药领域，以垂直型医药网站为数据来源，以疾病为核心，构建起一个包含7类规模为4.4万的知识实体，11类规模约30万实体关系的知识图谱。</p><p>本项目将包括以下两部分的内容：</p><p>1) 基于垂直网站数据的医药知识图谱构建<br>2) 基于医药知识图谱的自动问答</p><h2 id="项目最终效果"><a href="#项目最终效果" class="headerlink" title="项目最终效果"></a>项目最终效果</h2><p>话不多少，直接上图。下图是实际问答运行过程中的截图：<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823105819039.png" alt="image-20210823105819039"></p><h2 id="项目运行方式"><a href="#项目运行方式" class="headerlink" title="项目运行方式"></a>项目运行方式</h2><p>1、配置要求：要求配置neo4j数据库及相应的python依赖包。neo4j数据库用户名密码记住，并修改相应文件。  2、知识图谱数据导入：python build_medicalgraph.py，导入的数据较多，估计需要几个小时。<br>3、启动问答：python chat_graph.py</p><h2 id="以下介绍详细方案"><a href="#以下介绍详细方案" class="headerlink" title="以下介绍详细方案"></a>以下介绍详细方案</h2><h3 id="一、医疗知识图谱构建"><a href="#一、医疗知识图谱构建" class="headerlink" title="一、医疗知识图谱构建"></a>一、医疗知识图谱构建</h3><h4 id="1-1-业务驱动的知识图谱构建框架"><a href="#1-1-业务驱动的知识图谱构建框架" class="headerlink" title="1.1 业务驱动的知识图谱构建框架"></a>1.1 业务驱动的知识图谱构建框架</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823105907816.png" alt="image-20210823105907816"></p><h4 id="1-2-脚本目录"><a href="#1-2-脚本目录" class="headerlink" title="1.2 脚本目录"></a>1.2 脚本目录</h4><p>prepare_data/datasoider.py：网络资讯采集脚本<br>prepare_data/datasoider.py：网络资讯采集脚本<br>prepare_data/max_cut.py：基于词典的最大向前/向后切分脚本<br>build_medicalgraph.py：知识图谱入库脚本    　　</p><h4 id="1-3-医药领域知识图谱规模"><a href="#1-3-医药领域知识图谱规模" class="headerlink" title="1.3 医药领域知识图谱规模"></a>1.3 医药领域知识图谱规模</h4><ul><li><p>neo4j图数据库存储规模<br><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823110015552.png" alt="image-20210823110015552"></p></li><li><p>知识图谱实体类型</p></li></ul><table><thead><tr><th align="left">实体类型</th><th align="center">中文含义</th><th align="center">实体数量</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">Check</td><td align="center">诊断检查项目</td><td align="center">3,353</td><td align="left">支气管造影;关节镜检查</td></tr><tr><td align="left">Department</td><td align="center">医疗科目</td><td align="center">54</td><td align="left">整形美容科;烧伤科</td></tr><tr><td align="left">Disease</td><td align="center">疾病</td><td align="center">8,807</td><td align="left">血栓闭塞性脉管炎;胸降主动脉动脉瘤</td></tr><tr><td align="left">Drug</td><td align="center">药品</td><td align="center">3,828</td><td align="left">京万红痔疮膏;布林佐胺滴眼液</td></tr><tr><td align="left">Food</td><td align="center">食物</td><td align="center">4,870</td><td align="left">番茄冲菜牛肉丸汤;竹笋炖羊肉</td></tr><tr><td align="left">Producer</td><td align="center">在售药品</td><td align="center">17,201</td><td align="left">通药制药青霉素V钾片;青阳醋酸地塞米松片</td></tr><tr><td align="left">Symptom</td><td align="center">疾病症状</td><td align="center">5,998</td><td align="left">乳腺组织肥厚;脑实质深部出血</td></tr><tr><td align="left">Total</td><td align="center">总计</td><td align="center">44,111</td><td align="left">约4.4万实体量级</td></tr></tbody></table><ul><li>知识图谱实体关系类型</li></ul><table><thead><tr><th align="left">实体关系类型</th><th align="center">中文含义</th><th align="center">关系数量</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">belongs_to</td><td align="center">属于</td><td align="center">8,844</td><td align="left">&lt;妇科,属于,妇产科&gt;</td></tr><tr><td align="left">common_drug</td><td align="center">疾病常用药品</td><td align="center">14,649</td><td align="left">&lt;阳强,常用,甲磺酸酚妥拉明分散片&gt;</td></tr><tr><td align="left">do_eat</td><td align="center">疾病宜吃食物</td><td align="center">22,238</td><td align="left">&lt;胸椎骨折,宜吃,黑鱼&gt;</td></tr><tr><td align="left">drugs_of</td><td align="center">药品在售药品</td><td align="center">17,315</td><td align="left">&lt;青霉素V钾片,在售,通药制药青霉素V钾片&gt;</td></tr><tr><td align="left">need_check</td><td align="center">疾病所需检查</td><td align="center">39,422</td><td align="left">&lt;单侧肺气肿,所需检查,支气管造影&gt;</td></tr><tr><td align="left">no_eat</td><td align="center">疾病忌吃食物</td><td align="center">22,247</td><td align="left">&lt;唇病,忌吃,杏仁&gt;</td></tr><tr><td align="left">recommand_drug</td><td align="center">疾病推荐药品</td><td align="center">59,467</td><td align="left">&lt;混合痔,推荐用药,京万红痔疮膏&gt;</td></tr><tr><td align="left">recommand_eat</td><td align="center">疾病推荐食谱</td><td align="center">40,221</td><td align="left">&lt;鞘膜积液,推荐食谱,番茄冲菜牛肉丸汤&gt;</td></tr><tr><td align="left">has_symptom</td><td align="center">疾病症状</td><td align="center">5,998</td><td align="left">&lt;早期乳腺癌,疾病症状,乳腺组织肥厚&gt;</td></tr><tr><td align="left">acompany_with</td><td align="center">疾病并发疾病</td><td align="center">12,029</td><td align="left">&lt;下肢交通静脉瓣膜关闭不全,并发疾病,血栓闭塞性脉管炎&gt;</td></tr><tr><td align="left">Total</td><td align="center">总计</td><td align="center">294,149</td><td align="left">约30万关系量级</td></tr></tbody></table><ul><li>知识图谱属性类型</li></ul><table><thead><tr><th align="left">属性类型</th><th align="center">中文含义</th><th align="center">举例</th></tr></thead><tbody><tr><td align="left">name</td><td align="center">疾病名称</td><td align="center">喘息样支气管炎</td></tr><tr><td align="left">desc</td><td align="center">疾病简介</td><td align="center">又称哮喘性支气管炎…</td></tr><tr><td align="left">cause</td><td align="center">疾病病因</td><td align="center">常见的有合胞病毒等…</td></tr><tr><td align="left">prevent</td><td align="center">预防措施</td><td align="center">注意家族与患儿自身过敏史…</td></tr><tr><td align="left">cure_lasttime</td><td align="center">治疗周期</td><td align="center">6-12个月</td></tr><tr><td align="left">cure_way</td><td align="center">治疗方式</td><td align="center">“药物治疗”,”支持性治疗”</td></tr><tr><td align="left">cured_prob</td><td align="center">治愈概率</td><td align="center">95%</td></tr><tr><td align="left">easy_get</td><td align="center">疾病易感人群</td><td align="center">无特定的人群</td></tr></tbody></table><h3 id="二、基于医疗知识图谱的自动问答"><a href="#二、基于医疗知识图谱的自动问答" class="headerlink" title="二、基于医疗知识图谱的自动问答"></a>二、基于医疗知识图谱的自动问答</h3><h4 id="2-1-技术架构"><a href="#2-1-技术架构" class="headerlink" title="2.1 技术架构"></a>2.1 技术架构</h4><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823110142870.png" alt="image-20210823110142870"></p><h4 id="2-2-脚本结构"><a href="#2-2-脚本结构" class="headerlink" title="2.2 脚本结构"></a>2.2 脚本结构</h4><p>question_classifier.py：问句类型分类脚本<br>question_parser.py：问句解析脚本<br>chatbot_graph.py：问答程序脚本  </p><h4 id="2-3-支持问答类型"><a href="#2-3-支持问答类型" class="headerlink" title="2.3 支持问答类型"></a>2.3 支持问答类型</h4><table><thead><tr><th align="left">问句类型</th><th align="center">中文含义</th><th align="center">问句举例</th></tr></thead><tbody><tr><td align="left">disease_symptom</td><td align="center">疾病症状</td><td align="center">乳腺癌的症状有哪些？</td></tr><tr><td align="left">symptom_disease</td><td align="center">已知症状找可能疾病</td><td align="center">最近老流鼻涕怎么办？</td></tr><tr><td align="left">disease_cause</td><td align="center">疾病病因</td><td align="center">为什么有的人会失眠？</td></tr><tr><td align="left">disease_acompany</td><td align="center">疾病的并发症</td><td align="center">失眠有哪些并发症？</td></tr><tr><td align="left">disease_not_food</td><td align="center">疾病需要忌口的食物</td><td align="center">失眠的人不要吃啥？</td></tr><tr><td align="left">disease_do_food</td><td align="center">疾病建议吃什么食物</td><td align="center">耳鸣了吃点啥？</td></tr><tr><td align="left">food_not_disease</td><td align="center">什么病最好不要吃某事物</td><td align="center">哪些人最好不好吃蜂蜜？</td></tr><tr><td align="left">food_do_disease</td><td align="center">食物对什么病有好处</td><td align="center">鹅肉有什么好处？</td></tr><tr><td align="left">disease_drug</td><td align="center">啥病要吃啥药</td><td align="center">肝病要吃啥药？</td></tr><tr><td align="left">drug_disease</td><td align="center">药品能治啥病</td><td align="center">板蓝根颗粒能治啥病？</td></tr><tr><td align="left">disease_check</td><td align="center">疾病需要做什么检查</td><td align="center">脑膜炎怎么才能查出来？</td></tr><tr><td align="left">check_disease</td><td align="center">检查能查什么病</td><td align="center">全血细胞计数能查出啥来？</td></tr><tr><td align="left">disease_prevent</td><td align="center">预防措施</td><td align="center">怎样才能预防肾虚？</td></tr><tr><td align="left">disease_lasttime</td><td align="center">治疗周期</td><td align="center">感冒要多久才能好？</td></tr><tr><td align="left">disease_cureway</td><td align="center">治疗方式</td><td align="center">高血压要怎么治？</td></tr><tr><td align="left">disease_cureprob</td><td align="center">治愈概率</td><td align="center">白血病能治好吗？</td></tr><tr><td align="left">disease_easyget</td><td align="center">疾病易感人群</td><td align="center">什么人容易得高血压？</td></tr><tr><td align="left">disease_desc</td><td align="center">疾病描述</td><td align="center">糖尿病</td></tr></tbody></table><h2 id="代码整理"><a href="#代码整理" class="headerlink" title="代码整理"></a>代码整理</h2><h3 id="知识图谱入库脚本-—-build-medicalgraph-py"><a href="#知识图谱入库脚本-—-build-medicalgraph-py" class="headerlink" title="知识图谱入库脚本 — build_medicalgraph.py"></a>知识图谱入库脚本 — build_medicalgraph.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">from</span> py2neo <span class="token keyword">import</span> Graph<span class="token punctuation">,</span> Node<span class="token punctuation">,</span> Relationship<span class="token keyword">class</span> <span class="token class-name">MedicalGraph</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur_dir <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'data/medical.json'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.g = Graph(</span>        <span class="token comment" spellcheck="true">#     host="127.0.0.1",  # neo4j 搭载服务器的ip地址，ifconfig可获取到</span>        <span class="token comment" spellcheck="true">#     http_port=7687,  # neo4j 服务器监听的端口号</span>        <span class="token comment" spellcheck="true">#     user="neo4j",  # 数据库user name，如果没有更改过，应该是neo4j</span>        <span class="token comment" spellcheck="true">#     password="admin")</span>        self<span class="token punctuation">.</span>g <span class="token operator">=</span> Graph<span class="token punctuation">(</span><span class="token string">"http://localhost:7474"</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"neo4j"</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''读取文件'''</span>    <span class="token keyword">def</span> <span class="token function">read_nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 共8类节点</span>        drugs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># 药品</span>        foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true"># 食物</span>        checks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># 检查</span>        departments <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token comment" spellcheck="true"># 科室</span>        producers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token comment" spellcheck="true"># 药品大类</span>        diseases <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 疾病</span>        symptoms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 症状</span>        disease_infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 疾病信息</span>        <span class="token comment" spellcheck="true"># 构建节点实体关系-11</span>        rels_department <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 科室－科室关系</span>        rels_noteat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 疾病－忌吃食物关系</span>        rels_doeat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true"># 疾病－宜吃食物关系</span>        rels_recommandeat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 疾病－推荐吃食物关系</span>        rels_commonddrug <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 疾病－通用药品关系</span>        rels_recommanddrug <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 疾病－热门药品关系</span>        rels_check <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment" spellcheck="true"># 疾病－检查关系</span>        rels_drug_producer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 厂商－药物关系</span>        rels_symptom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 疾病症状关系</span>        rels_acompany <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 疾病并发关系</span>        rels_category <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 疾病与科室之间的关系</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            disease_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>            data_json <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            disease <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> disease  <span class="token comment" spellcheck="true"># 疾病名字</span>            diseases<span class="token punctuation">.</span>append<span class="token punctuation">(</span>disease<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病名称</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>   <span class="token comment" spellcheck="true"># 疾病的描述</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'prevent'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 疾病的保护措施</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'cause'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>   <span class="token comment" spellcheck="true"># 疾病产生的原因</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'easy_get'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 疾病的易感染人群</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'cure_department'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 疾病的治疗部门</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'cure_way'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 疾病的治疗方式</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'cure_lasttime'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 疾病的治疗周期</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'symptom'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 疾病的症状</span>            disease_dict<span class="token punctuation">[</span><span class="token string">'cured_prob'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true"># 疾病的治愈率</span>            <span class="token keyword">if</span> <span class="token string">'symptom'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的症状</span>                symptoms <span class="token operator">+=</span> data_json<span class="token punctuation">[</span><span class="token string">'symptom'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病症状</span>                <span class="token keyword">for</span> symptom <span class="token keyword">in</span> data_json<span class="token punctuation">[</span><span class="token string">'symptom'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    rels_symptom<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> symptom<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病与症状的对应关系</span>            <span class="token keyword">if</span> <span class="token string">'acompany'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病并发症</span>                <span class="token keyword">for</span> acompany <span class="token keyword">in</span> data_json<span class="token punctuation">[</span><span class="token string">'acompany'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    rels_acompany<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> acompany<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病与并发症的对应关系</span>            <span class="token keyword">if</span> <span class="token string">'desc'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的描述</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病描述</span>            <span class="token keyword">if</span> <span class="token string">'prevent'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的保护措施</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'prevent'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'prevent'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病的保护措施</span>            <span class="token keyword">if</span> <span class="token string">'cause'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病产生的原因</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'cause'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'cause'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病产生的原因</span>            <span class="token keyword">if</span> <span class="token string">'get_prob'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的患病率</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'get_prob'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'get_prob'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病的患病率</span>            <span class="token keyword">if</span> <span class="token string">'easy_get'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的易感染人群</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'easy_get'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'easy_get'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病的易感染人群</span>            <span class="token keyword">if</span> <span class="token string">'cure_department'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的治疗部门</span>                cure_department <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'cure_department'</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>cure_department<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 若此疾病只对应一个治疗科室</span>                     rels_category<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> cure_department<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 直接记录疾病和科室之间的关系</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>cure_department<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 若此疾病对应两个治疗科室</span>                    big <span class="token operator">=</span> cure_department<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    small <span class="token operator">=</span> cure_department<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                    rels_department<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>small<span class="token punctuation">,</span> big<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 记录科室与科室之间的关系</span>                    rels_category<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> small<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病与科室之间的关系</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'cure_department'</span><span class="token punctuation">]</span> <span class="token operator">=</span> cure_department  <span class="token comment" spellcheck="true"># 记录疾病的治疗科室</span>                departments <span class="token operator">+=</span> cure_department  <span class="token comment" spellcheck="true"># 记录科室</span>            <span class="token keyword">if</span> <span class="token string">'cure_way'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的治疗方式</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'cure_way'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'cure_way'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病的治疗方式</span>            <span class="token keyword">if</span> <span class="token string">'cure_lasttime'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病产生的原因</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'cure_lasttime'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'cure_lasttime'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病产生的原因</span>            <span class="token keyword">if</span> <span class="token string">'cured_prob'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的治愈率</span>                disease_dict<span class="token punctuation">[</span><span class="token string">'cured_prob'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'cured_prob'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 记录疾病的治愈率</span>            <span class="token keyword">if</span> <span class="token string">'common_drug'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的常见治疗药物</span>                common_drug <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'common_drug'</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 记录疾病的常见治疗药物</span>                <span class="token keyword">for</span> drug <span class="token keyword">in</span> common_drug<span class="token punctuation">:</span>                    rels_commonddrug<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> drug<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病的常见治疗药物和疾病的关系</span>                drugs <span class="token operator">+=</span> common_drug  <span class="token comment" spellcheck="true"># 记录药品</span>            <span class="token keyword">if</span> <span class="token string">'recommand_drug'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的推荐治疗药物</span>                recommand_drug <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'recommand_drug'</span><span class="token punctuation">]</span>                drugs <span class="token operator">+=</span> recommand_drug                <span class="token keyword">for</span> drug <span class="token keyword">in</span> recommand_drug<span class="token punctuation">:</span>                    rels_recommanddrug<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> drug<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病的推荐治疗药物和疾病的关系</span>            <span class="token keyword">if</span> <span class="token string">'not_eat'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的忌口</span>                not_eat <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'not_eat'</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> _not <span class="token keyword">in</span> not_eat<span class="token punctuation">:</span>                    rels_noteat<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> _not<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病和疾病的忌口的关系</span>                foods <span class="token operator">+=</span> not_eat                do_eat <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'do_eat'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 疾病的宜吃食物</span>                <span class="token keyword">for</span> _do <span class="token keyword">in</span> do_eat<span class="token punctuation">:</span>                    rels_doeat<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> _do<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病和疾病的宜吃食物的关系</span>                foods <span class="token operator">+=</span> do_eat                recommand_eat <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'recommand_eat'</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> _recommand <span class="token keyword">in</span> recommand_eat<span class="token punctuation">:</span>                    rels_recommandeat<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> _recommand<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病和疾病的推荐食物的关系</span>                foods <span class="token operator">+=</span> recommand_eat            <span class="token keyword">if</span> <span class="token string">'check'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病需做的检查</span>                check <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'check'</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> _check <span class="token keyword">in</span> check<span class="token punctuation">:</span>                    rels_check<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>disease<span class="token punctuation">,</span> _check<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录疾病和疾病需做的检查的关系</span>                checks <span class="token operator">+=</span> check            <span class="token keyword">if</span> <span class="token string">'drug_detail'</span> <span class="token keyword">in</span> data_json<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 疾病的药物细节</span>                drug_detail <span class="token operator">=</span> data_json<span class="token punctuation">[</span><span class="token string">'drug_detail'</span><span class="token punctuation">]</span>                producer <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> drug_detail<span class="token punctuation">]</span>                rels_drug_producer <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> drug_detail<span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># 药物与厂商的关系</span>                producers <span class="token operator">+=</span> producer            disease_infos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>disease_dict<span class="token punctuation">)</span>        <span class="token keyword">return</span> set<span class="token punctuation">(</span>drugs<span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>foods<span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>checks<span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>producers<span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>symptoms<span class="token punctuation">)</span><span class="token punctuation">,</span> set<span class="token punctuation">(</span>diseases<span class="token punctuation">)</span><span class="token punctuation">,</span> disease_infos<span class="token punctuation">,</span>\               rels_check<span class="token punctuation">,</span> rels_recommandeat<span class="token punctuation">,</span> rels_noteat<span class="token punctuation">,</span> rels_doeat<span class="token punctuation">,</span> rels_department<span class="token punctuation">,</span> rels_commonddrug<span class="token punctuation">,</span> rels_drug_producer<span class="token punctuation">,</span> rels_recommanddrug<span class="token punctuation">,</span>\               rels_symptom<span class="token punctuation">,</span> rels_acompany<span class="token punctuation">,</span> rels_category    <span class="token triple-quoted-string string">'''建立节点'''</span>    <span class="token keyword">def</span> <span class="token function">create_node</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> label<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># label为节点标签</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> node_name <span class="token keyword">in</span> nodes<span class="token punctuation">:</span>            node <span class="token operator">=</span> Node<span class="token punctuation">(</span>label<span class="token punctuation">,</span> name<span class="token operator">=</span>node_name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 定义节点</span>            self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>create<span class="token punctuation">(</span>node<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建节点</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s - %s: %d / %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>label<span class="token punctuation">,</span> node_name<span class="token punctuation">,</span> count<span class="token punctuation">,</span> len<span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''创建知识图谱中心疾病的节点'''</span>    <span class="token keyword">def</span> <span class="token function">create_diseases_nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> disease_infos<span class="token punctuation">)</span><span class="token punctuation">:</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> disease_dict <span class="token keyword">in</span> disease_infos<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 疾病的节点定义如下属性：</span>            <span class="token comment" spellcheck="true"># name            = disease_dict['name']             # 疾病名字</span>            <span class="token comment" spellcheck="true"># desc            = disease_dict['desc']             # 疾病的描述</span>            <span class="token comment" spellcheck="true"># prevent         = disease_dict['prevent']          # 疾病的保护措施</span>            <span class="token comment" spellcheck="true"># cause           = disease_dict['cause']            # 疾病产生的原因</span>            <span class="token comment" spellcheck="true"># easy_get        = disease_dict['easy_get']         # 疾病的易感染人群</span>            <span class="token comment" spellcheck="true"># cure_lasttime   = disease_dict['cure_lasttime']    # 疾病的治疗周期</span>            <span class="token comment" spellcheck="true"># cure_department = disease_dict['cure_department']  # 疾病的治疗部门</span>            <span class="token comment" spellcheck="true"># cure_way        = disease_dict['cure_way']         # 疾病的治疗方式</span>            <span class="token comment" spellcheck="true"># cured_prob      = disease_dict['cured_prob']       # 疾病的治愈率</span>            node <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">"Disease"</span><span class="token punctuation">,</span> name<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> desc<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        prevent<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'prevent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cause<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'cause'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        easy_get<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'easy_get'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cure_lasttime<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'cure_lasttime'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        cure_department<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'cure_department'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                        cure_way<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'cure_way'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cured_prob<span class="token operator">=</span>disease_dict<span class="token punctuation">[</span><span class="token string">'cured_prob'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>create<span class="token punctuation">(</span>node<span class="token punctuation">)</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> disease_dict<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''创建知识图谱实体节点类型schema'''</span>    <span class="token keyword">def</span> <span class="token function">create_graph_nodes</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Drugs<span class="token punctuation">,</span> Foods<span class="token punctuation">,</span> Checks<span class="token punctuation">,</span> Departments<span class="token punctuation">,</span> Producers<span class="token punctuation">,</span> Symptoms<span class="token punctuation">,</span> Diseases<span class="token punctuation">,</span> disease_infos<span class="token punctuation">,</span> rels_check<span class="token punctuation">,</span> rels_recommandeat<span class="token punctuation">,</span> rels_noteat<span class="token punctuation">,</span> rels_doeat<span class="token punctuation">,</span> rels_department<span class="token punctuation">,</span> rels_commonddrug<span class="token punctuation">,</span> rels_drug_producer<span class="token punctuation">,</span> rels_recommanddrug<span class="token punctuation">,</span>rels_symptom<span class="token punctuation">,</span> rels_acompany<span class="token punctuation">,</span> rels_category <span class="token operator">=</span> self<span class="token punctuation">.</span>read_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_diseases_nodes<span class="token punctuation">(</span>disease_infos<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Drugs         # 药品</span>        <span class="token comment" spellcheck="true"># Foods         # 食物</span>        <span class="token comment" spellcheck="true"># Checks        # 检查</span>        <span class="token comment" spellcheck="true"># Departments   # 科室</span>        <span class="token comment" spellcheck="true"># Producers     # 药品大类，厂家</span>        <span class="token comment" spellcheck="true"># Symptoms      # 症状</span>        self<span class="token punctuation">.</span>create_node<span class="token punctuation">(</span><span class="token string">'Drug'</span><span class="token punctuation">,</span> Drugs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>Drugs<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_node<span class="token punctuation">(</span><span class="token string">'Food'</span><span class="token punctuation">,</span> Foods<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>Foods<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_node<span class="token punctuation">(</span><span class="token string">'Check'</span><span class="token punctuation">,</span> Checks<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>Checks<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_node<span class="token punctuation">(</span><span class="token string">'Department'</span><span class="token punctuation">,</span> Departments<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>Departments<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_node<span class="token punctuation">(</span><span class="token string">'Producer'</span><span class="token punctuation">,</span> Producers<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>Producers<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_node<span class="token punctuation">(</span><span class="token string">'Symptom'</span><span class="token punctuation">,</span> Symptoms<span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''创建实体关系边'''</span>    <span class="token keyword">def</span> <span class="token function">create_graph_relationship</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Drugs<span class="token punctuation">,</span> Foods<span class="token punctuation">,</span> Checks<span class="token punctuation">,</span> Departments<span class="token punctuation">,</span> Producers<span class="token punctuation">,</span> Symptoms<span class="token punctuation">,</span> Diseases<span class="token punctuation">,</span> disease_infos<span class="token punctuation">,</span> rels_check<span class="token punctuation">,</span> rels_recommandeat<span class="token punctuation">,</span> rels_noteat<span class="token punctuation">,</span> rels_doeat<span class="token punctuation">,</span> rels_department<span class="token punctuation">,</span> rels_commonddrug<span class="token punctuation">,</span> rels_drug_producer<span class="token punctuation">,</span> rels_recommanddrug<span class="token punctuation">,</span>rels_symptom<span class="token punctuation">,</span> rels_acompany<span class="token punctuation">,</span> rels_category <span class="token operator">=</span> self<span class="token punctuation">.</span>read_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># rels_recommandeat = [] # 疾病－推荐吃食物关系</span>        <span class="token comment" spellcheck="true"># rels_noteat = []        # 疾病－忌吃食物关系</span>        <span class="token comment" spellcheck="true"># rels_doeat = []         # 疾病－宜吃食物关系</span>        <span class="token comment" spellcheck="true"># rels_department = []    # 科室－科室关系</span>        <span class="token comment" spellcheck="true"># rels_commonddrug = [] # 疾病－通用药品关系</span>        <span class="token comment" spellcheck="true"># rels_drug_producer = [] # 厂商－药物关系</span>        <span class="token comment" spellcheck="true"># rels_recommanddrug = [] # 疾病－热门药品关系</span>        <span class="token comment" spellcheck="true"># rels_check = []         # 疾病－检查关系</span>        <span class="token comment" spellcheck="true"># rels_symptom = []   # 疾病症状关系</span>        <span class="token comment" spellcheck="true"># rels_acompany = []  # 疾病并发关系</span>        <span class="token comment" spellcheck="true"># rels_category = []  # 疾病与科室之间的关系</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Food'</span><span class="token punctuation">,</span> rels_recommandeat<span class="token punctuation">,</span> <span class="token string">'recommand_eat'</span><span class="token punctuation">,</span> <span class="token string">'推荐食谱'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Food'</span><span class="token punctuation">,</span> rels_noteat<span class="token punctuation">,</span> <span class="token string">'no_eat'</span><span class="token punctuation">,</span> <span class="token string">'忌吃'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Food'</span><span class="token punctuation">,</span> rels_doeat<span class="token punctuation">,</span> <span class="token string">'do_eat'</span><span class="token punctuation">,</span> <span class="token string">'宜吃'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Department'</span><span class="token punctuation">,</span> <span class="token string">'Department'</span><span class="token punctuation">,</span> rels_department<span class="token punctuation">,</span> <span class="token string">'belongs_to'</span><span class="token punctuation">,</span> <span class="token string">'属于'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Drug'</span><span class="token punctuation">,</span> rels_commonddrug<span class="token punctuation">,</span> <span class="token string">'common_drug'</span><span class="token punctuation">,</span> <span class="token string">'常用药品'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Producer'</span><span class="token punctuation">,</span> <span class="token string">'Drug'</span><span class="token punctuation">,</span> rels_drug_producer<span class="token punctuation">,</span> <span class="token string">'drugs_of'</span><span class="token punctuation">,</span> <span class="token string">'生产药品'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Drug'</span><span class="token punctuation">,</span> rels_recommanddrug<span class="token punctuation">,</span> <span class="token string">'recommand_drug'</span><span class="token punctuation">,</span> <span class="token string">'好评药品'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Check'</span><span class="token punctuation">,</span> rels_check<span class="token punctuation">,</span> <span class="token string">'need_check'</span><span class="token punctuation">,</span> <span class="token string">'诊断检查'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Symptom'</span><span class="token punctuation">,</span> rels_symptom<span class="token punctuation">,</span> <span class="token string">'has_symptom'</span><span class="token punctuation">,</span> <span class="token string">'症状'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Disease'</span><span class="token punctuation">,</span> rels_acompany<span class="token punctuation">,</span> <span class="token string">'acompany_with'</span><span class="token punctuation">,</span> <span class="token string">'并发症'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_relationship2<span class="token punctuation">(</span><span class="token string">'Disease'</span><span class="token punctuation">,</span> <span class="token string">'Department'</span><span class="token punctuation">,</span> rels_category<span class="token punctuation">,</span> <span class="token string">'belongs_to'</span><span class="token punctuation">,</span> <span class="token string">'所属科室'</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">'''创建实体关联边'''</span>    <span class="token keyword">def</span> <span class="token function">create_relationship2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start_node<span class="token punctuation">,</span> end_node<span class="token punctuation">,</span> edges<span class="token punctuation">,</span> rel_type<span class="token punctuation">,</span> rel_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># start_node 关系的开始节点</span>        <span class="token comment" spellcheck="true"># end_node   关系的终止节点</span>        <span class="token comment" spellcheck="true"># edges      关系数据</span>        <span class="token comment" spellcheck="true"># rel_type   关系的类型</span>        <span class="token comment" spellcheck="true"># rel_name   关系的名字</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 去重处理</span>        set_edges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> edge <span class="token keyword">in</span> edges<span class="token punctuation">:</span>            set_edges<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'###'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>edge<span class="token punctuation">)</span><span class="token punctuation">)</span>        all <span class="token operator">=</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>set_edges<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> edge <span class="token keyword">in</span> set<span class="token punctuation">(</span>set_edges<span class="token punctuation">)</span><span class="token punctuation">:</span>            edge <span class="token operator">=</span> edge<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'###'</span><span class="token punctuation">)</span>            node_name_start <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            node_name_end <span class="token operator">=</span> edge<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 组合所要执行的命令请求</span>            query <span class="token operator">=</span> <span class="token string">"match(p:%s),(q:%s) where p.name='%s'and q.name='%s' create (p)-[rel:%s{name:'%s'}]->(q)"</span> <span class="token operator">%</span>\                    <span class="token punctuation">(</span>start_node<span class="token punctuation">,</span> end_node<span class="token punctuation">,</span> node_name_start<span class="token punctuation">,</span> node_name_end<span class="token punctuation">,</span> rel_type<span class="token punctuation">,</span> rel_name<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>run<span class="token punctuation">(</span>query<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用neo4j数据库执行命令请求</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>rel_type<span class="token punctuation">,</span> count<span class="token punctuation">,</span> all<span class="token punctuation">,</span> node_name_start<span class="token punctuation">,</span> node_name_end<span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># def create_relationship(self, start_node, end_node, edges, rel_type, rel_name):</span>    <span class="token comment" spellcheck="true">#     count = 0</span>    <span class="token comment" spellcheck="true">#     # 未进行去重处理</span>    <span class="token comment" spellcheck="true">#     # edges = list(set(edges))</span>    <span class="token comment" spellcheck="true">#     count_edge = len(edges)</span>    <span class="token comment" spellcheck="true">#     for edge in edges:</span>    <span class="token comment" spellcheck="true">#         node_name_start = edge[0]</span>    <span class="token comment" spellcheck="true">#         node_name_end = edge[1]</span>    <span class="token comment" spellcheck="true">#         query = "match(p:%s),(q:%s) where p.name='%s'and q.name='%s' create (p)-[rel:%s{name:'%s'}]->(q)" % (</span>    <span class="token comment" spellcheck="true">#             start_node, end_node, node_name_start, node_name_end, rel_type, rel_name)</span>    <span class="token comment" spellcheck="true">#         try:</span>    <span class="token comment" spellcheck="true">#             self.g.run(query)</span>    <span class="token comment" spellcheck="true">#             count += 1</span>    <span class="token comment" spellcheck="true">#             print('%s:  %s - %s  %d / %d' % (rel_type, node_name_start, node_name_end, count, count_edge))</span>    <span class="token comment" spellcheck="true">#         except Exception as e:</span>    <span class="token comment" spellcheck="true">#             print(e)</span>    <span class="token comment" spellcheck="true">#     return</span>    <span class="token triple-quoted-string string">'''导出数据'''</span>    <span class="token keyword">def</span> <span class="token function">export_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        Drugs<span class="token punctuation">,</span> Foods<span class="token punctuation">,</span> Checks<span class="token punctuation">,</span> Departments<span class="token punctuation">,</span> Producers<span class="token punctuation">,</span> Symptoms<span class="token punctuation">,</span> Diseases<span class="token punctuation">,</span> disease_infos<span class="token punctuation">,</span> rels_check<span class="token punctuation">,</span> rels_recommandeat<span class="token punctuation">,</span> rels_noteat<span class="token punctuation">,</span> rels_doeat<span class="token punctuation">,</span> rels_department<span class="token punctuation">,</span> rels_commonddrug<span class="token punctuation">,</span> rels_drug_producer<span class="token punctuation">,</span> rels_recommanddrug<span class="token punctuation">,</span> rels_symptom<span class="token punctuation">,</span> rels_acompany<span class="token punctuation">,</span> rels_category <span class="token operator">=</span> self<span class="token punctuation">.</span>read_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_drug <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'drug.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>        f_food <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'food.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>        f_check <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'check.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>        f_department <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'department.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>        f_producer <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'producer.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>        f_symptom <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'symptoms.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>        f_disease <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'disease.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span>        f_drug<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>Drugs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f_food<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>Foods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f_check<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>Checks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f_department<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>Departments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f_producer<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>Producers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f_symptom<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>Symptoms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f_disease<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>Diseases<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        f_drug<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_food<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_check<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_department<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_producer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_symptom<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        f_disease<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    handler <span class="token operator">=</span> MedicalGraph<span class="token punctuation">(</span><span class="token punctuation">)</span>    handler<span class="token punctuation">.</span>create_graph_nodes<span class="token punctuation">(</span><span class="token punctuation">)</span>    handler<span class="token punctuation">.</span>create_graph_relationship<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># handler.export_data()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问句类型分类脚本-—-question-classifier-py"><a href="#问句类型分类脚本-—-question-classifier-py" class="headerlink" title="问句类型分类脚本 — question_classifier.py"></a>问句类型分类脚本 — question_classifier.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">import</span> os<span class="token keyword">import</span> ahocorasick<span class="token keyword">class</span> <span class="token class-name">QuestionClassifier</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur_dir <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print('cur_dir:',cur_dir)</span>        <span class="token comment" spellcheck="true"># 特征词路径</span>        self<span class="token punctuation">.</span>disease_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/disease.txt'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>department_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/department.txt'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>check_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/check.txt'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>drug_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/drug.txt'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>food_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/food.txt'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>producer_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/producer.txt'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>symptom_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/symptom.txt'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>deny_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cur_dir<span class="token punctuation">,</span> <span class="token string">'dict/deny.txt'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 加载特征词</span>        <span class="token comment" spellcheck="true"># .strip()用于移除字符串收尾的空格</span>        self<span class="token punctuation">.</span>disease_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>disease_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>department_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>department_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>check_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>check_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>drug_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>drug_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>food_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>food_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>producer_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>producer_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>symptom_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>symptom_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>region_words <span class="token operator">=</span> set<span class="token punctuation">(</span>self<span class="token punctuation">.</span>department_wds <span class="token operator">+</span> self<span class="token punctuation">.</span>disease_wds <span class="token operator">+</span> self<span class="token punctuation">.</span>check_wds <span class="token operator">+</span> self<span class="token punctuation">.</span>drug_wds <span class="token operator">+</span> self<span class="token punctuation">.</span>food_wds <span class="token operator">+</span> self<span class="token punctuation">.</span>producer_wds <span class="token operator">+</span> self<span class="token punctuation">.</span>symptom_wds<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>deny_words <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>deny_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 构造领域actree</span>        self<span class="token punctuation">.</span>region_tree <span class="token operator">=</span> self<span class="token punctuation">.</span>build_actree<span class="token punctuation">(</span>list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>region_words<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构建词典</span>        self<span class="token punctuation">.</span>wdtype_dict <span class="token operator">=</span> self<span class="token punctuation">.</span>build_wdtype_dict2<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 问句疑问词</span>        self<span class="token punctuation">.</span>symptom_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'症状'</span><span class="token punctuation">,</span> <span class="token string">'表征'</span><span class="token punctuation">,</span> <span class="token string">'现象'</span><span class="token punctuation">,</span> <span class="token string">'症候'</span><span class="token punctuation">,</span> <span class="token string">'表现'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>cause_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'原因'</span><span class="token punctuation">,</span> <span class="token string">'成因'</span><span class="token punctuation">,</span> <span class="token string">'为什么'</span><span class="token punctuation">,</span> <span class="token string">'怎么会'</span><span class="token punctuation">,</span> <span class="token string">'怎样才'</span><span class="token punctuation">,</span> <span class="token string">'咋样才'</span><span class="token punctuation">,</span> <span class="token string">'怎样会'</span><span class="token punctuation">,</span> <span class="token string">'如何会'</span><span class="token punctuation">,</span> <span class="token string">'为啥'</span><span class="token punctuation">,</span> <span class="token string">'为何'</span><span class="token punctuation">,</span> <span class="token string">'如何才会'</span><span class="token punctuation">,</span> <span class="token string">'怎么才会'</span><span class="token punctuation">,</span> <span class="token string">'会导致'</span><span class="token punctuation">,</span> <span class="token string">'会造成'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>acompany_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'并发症'</span><span class="token punctuation">,</span> <span class="token string">'并发'</span><span class="token punctuation">,</span> <span class="token string">'一起发生'</span><span class="token punctuation">,</span> <span class="token string">'一并发生'</span><span class="token punctuation">,</span> <span class="token string">'一起出现'</span><span class="token punctuation">,</span> <span class="token string">'一并出现'</span><span class="token punctuation">,</span> <span class="token string">'一同发生'</span><span class="token punctuation">,</span> <span class="token string">'一同出现'</span><span class="token punctuation">,</span> <span class="token string">'伴随发生'</span><span class="token punctuation">,</span> <span class="token string">'伴随'</span><span class="token punctuation">,</span> <span class="token string">'共现'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>food_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'饮食'</span><span class="token punctuation">,</span> <span class="token string">'饮用'</span><span class="token punctuation">,</span> <span class="token string">'吃'</span><span class="token punctuation">,</span> <span class="token string">'食'</span><span class="token punctuation">,</span> <span class="token string">'伙食'</span><span class="token punctuation">,</span> <span class="token string">'膳食'</span><span class="token punctuation">,</span> <span class="token string">'喝'</span><span class="token punctuation">,</span> <span class="token string">'菜'</span><span class="token punctuation">,</span> <span class="token string">'忌口'</span><span class="token punctuation">,</span> <span class="token string">'补品'</span><span class="token punctuation">,</span> <span class="token string">'保健品'</span><span class="token punctuation">,</span> <span class="token string">'食谱'</span><span class="token punctuation">,</span> <span class="token string">'菜谱'</span><span class="token punctuation">,</span> <span class="token string">'食用'</span><span class="token punctuation">,</span> <span class="token string">'食物'</span><span class="token punctuation">,</span><span class="token string">'补品'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>drug_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'药'</span><span class="token punctuation">,</span> <span class="token string">'药品'</span><span class="token punctuation">,</span> <span class="token string">'用药'</span><span class="token punctuation">,</span> <span class="token string">'胶囊'</span><span class="token punctuation">,</span> <span class="token string">'口服液'</span><span class="token punctuation">,</span> <span class="token string">'炎片'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>prevent_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'预防'</span><span class="token punctuation">,</span> <span class="token string">'防范'</span><span class="token punctuation">,</span> <span class="token string">'抵制'</span><span class="token punctuation">,</span> <span class="token string">'抵御'</span><span class="token punctuation">,</span> <span class="token string">'防止'</span><span class="token punctuation">,</span><span class="token string">'躲避'</span><span class="token punctuation">,</span><span class="token string">'逃避'</span><span class="token punctuation">,</span><span class="token string">'避开'</span><span class="token punctuation">,</span><span class="token string">'免得'</span><span class="token punctuation">,</span><span class="token string">'逃开'</span><span class="token punctuation">,</span><span class="token string">'避开'</span><span class="token punctuation">,</span><span class="token string">'避掉'</span><span class="token punctuation">,</span><span class="token string">'躲开'</span><span class="token punctuation">,</span><span class="token string">'躲掉'</span><span class="token punctuation">,</span><span class="token string">'绕开'</span><span class="token punctuation">,</span>                             <span class="token string">'怎样才能不'</span><span class="token punctuation">,</span> <span class="token string">'怎么才能不'</span><span class="token punctuation">,</span> <span class="token string">'咋样才能不'</span><span class="token punctuation">,</span><span class="token string">'咋才能不'</span><span class="token punctuation">,</span> <span class="token string">'如何才能不'</span><span class="token punctuation">,</span>                             <span class="token string">'怎样才不'</span><span class="token punctuation">,</span> <span class="token string">'怎么才不'</span><span class="token punctuation">,</span> <span class="token string">'咋样才不'</span><span class="token punctuation">,</span><span class="token string">'咋才不'</span><span class="token punctuation">,</span> <span class="token string">'如何才不'</span><span class="token punctuation">,</span>                             <span class="token string">'怎样才可以不'</span><span class="token punctuation">,</span> <span class="token string">'怎么才可以不'</span><span class="token punctuation">,</span> <span class="token string">'咋样才可以不'</span><span class="token punctuation">,</span> <span class="token string">'咋才可以不'</span><span class="token punctuation">,</span> <span class="token string">'如何可以不'</span><span class="token punctuation">,</span>                             <span class="token string">'怎样才可不'</span><span class="token punctuation">,</span> <span class="token string">'怎么才可不'</span><span class="token punctuation">,</span> <span class="token string">'咋样才可不'</span><span class="token punctuation">,</span> <span class="token string">'咋才可不'</span><span class="token punctuation">,</span> <span class="token string">'如何可不'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>lasttime_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'周期'</span><span class="token punctuation">,</span> <span class="token string">'多久'</span><span class="token punctuation">,</span> <span class="token string">'多长时间'</span><span class="token punctuation">,</span> <span class="token string">'多少时间'</span><span class="token punctuation">,</span> <span class="token string">'几天'</span><span class="token punctuation">,</span> <span class="token string">'几年'</span><span class="token punctuation">,</span> <span class="token string">'多少天'</span><span class="token punctuation">,</span> <span class="token string">'多少小时'</span><span class="token punctuation">,</span> <span class="token string">'几个小时'</span><span class="token punctuation">,</span> <span class="token string">'多少年'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>cureway_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'怎么治疗'</span><span class="token punctuation">,</span> <span class="token string">'如何医治'</span><span class="token punctuation">,</span> <span class="token string">'怎么医治'</span><span class="token punctuation">,</span> <span class="token string">'怎么治'</span><span class="token punctuation">,</span> <span class="token string">'怎么医'</span><span class="token punctuation">,</span> <span class="token string">'如何治'</span><span class="token punctuation">,</span> <span class="token string">'医治方式'</span><span class="token punctuation">,</span> <span class="token string">'疗法'</span><span class="token punctuation">,</span> <span class="token string">'咋治'</span><span class="token punctuation">,</span> <span class="token string">'怎么办'</span><span class="token punctuation">,</span> <span class="token string">'咋办'</span><span class="token punctuation">,</span> <span class="token string">'咋治'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>cureprob_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'多大概率能治好'</span><span class="token punctuation">,</span> <span class="token string">'多大几率能治好'</span><span class="token punctuation">,</span> <span class="token string">'治好希望大么'</span><span class="token punctuation">,</span> <span class="token string">'几率'</span><span class="token punctuation">,</span> <span class="token string">'几成'</span><span class="token punctuation">,</span> <span class="token string">'比例'</span><span class="token punctuation">,</span> <span class="token string">'可能性'</span><span class="token punctuation">,</span> <span class="token string">'能治'</span><span class="token punctuation">,</span> <span class="token string">'可治'</span><span class="token punctuation">,</span> <span class="token string">'可以治'</span><span class="token punctuation">,</span> <span class="token string">'可以医'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>easyget_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'易感人群'</span><span class="token punctuation">,</span> <span class="token string">'容易感染'</span><span class="token punctuation">,</span> <span class="token string">'易发人群'</span><span class="token punctuation">,</span> <span class="token string">'什么人'</span><span class="token punctuation">,</span> <span class="token string">'哪些人'</span><span class="token punctuation">,</span> <span class="token string">'感染'</span><span class="token punctuation">,</span> <span class="token string">'染上'</span><span class="token punctuation">,</span> <span class="token string">'得上'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>check_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'检查'</span><span class="token punctuation">,</span> <span class="token string">'检查项目'</span><span class="token punctuation">,</span> <span class="token string">'查出'</span><span class="token punctuation">,</span> <span class="token string">'检查'</span><span class="token punctuation">,</span> <span class="token string">'测出'</span><span class="token punctuation">,</span> <span class="token string">'试出'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>belong_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'属于什么科'</span><span class="token punctuation">,</span> <span class="token string">'属于'</span><span class="token punctuation">,</span> <span class="token string">'什么科'</span><span class="token punctuation">,</span> <span class="token string">'科室'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>cure_qwds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'治疗什么'</span><span class="token punctuation">,</span> <span class="token string">'治啥'</span><span class="token punctuation">,</span> <span class="token string">'治疗啥'</span><span class="token punctuation">,</span> <span class="token string">'医治啥'</span><span class="token punctuation">,</span> <span class="token string">'治愈啥'</span><span class="token punctuation">,</span> <span class="token string">'主治啥'</span><span class="token punctuation">,</span> <span class="token string">'主治什么'</span><span class="token punctuation">,</span> <span class="token string">'有什么用'</span><span class="token punctuation">,</span> <span class="token string">'有何用'</span><span class="token punctuation">,</span> <span class="token string">'用处'</span><span class="token punctuation">,</span> <span class="token string">'用途'</span><span class="token punctuation">,</span>                          <span class="token string">'有什么好处'</span><span class="token punctuation">,</span> <span class="token string">'有什么益处'</span><span class="token punctuation">,</span> <span class="token string">'有何益处'</span><span class="token punctuation">,</span> <span class="token string">'用来'</span><span class="token punctuation">,</span> <span class="token string">'用来做啥'</span><span class="token punctuation">,</span> <span class="token string">'用来作甚'</span><span class="token punctuation">,</span> <span class="token string">'需要'</span><span class="token punctuation">,</span> <span class="token string">'要'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span>    <span class="token triple-quoted-string string">'''分类主函数'''</span>    <span class="token keyword">def</span> <span class="token function">classify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> question<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        medical_dict <span class="token operator">=</span> self<span class="token punctuation">.</span>check_medical<span class="token punctuation">(</span>question<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> medical_dict<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        data<span class="token punctuation">[</span><span class="token string">'args'</span><span class="token punctuation">]</span> <span class="token operator">=</span> medical_dict        <span class="token comment" spellcheck="true"># 收集问句当中所涉及到的实体类型</span>        types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> type_ <span class="token keyword">in</span> medical_dict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            types <span class="token operator">+=</span> type_        question_type <span class="token operator">=</span> <span class="token string">'others'</span>        question_types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 症状</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>symptom_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">)</span><span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_symptom'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>symptom_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token string">'symptom'</span> <span class="token keyword">in</span> types<span class="token punctuation">)</span><span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'symptom_disease'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 原因</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cause_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">)</span><span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_cause'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 并发症</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>acompany_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">)</span><span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_acompany'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 推荐食品</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>food_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            deny_status <span class="token operator">=</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>deny_words<span class="token punctuation">,</span> question<span class="token punctuation">)</span>            <span class="token keyword">if</span> deny_status<span class="token punctuation">:</span>                question_type <span class="token operator">=</span> <span class="token string">'disease_not_food'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                question_type <span class="token operator">=</span> <span class="token string">'disease_do_food'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 药品治啥病</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cure_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'drug'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'drug_disease'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 已知食物找疾病</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>food_qwds<span class="token operator">+</span>self<span class="token punctuation">.</span>cure_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'food'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            deny_status <span class="token operator">=</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>deny_words<span class="token punctuation">,</span> question<span class="token punctuation">)</span>            <span class="token keyword">if</span> deny_status<span class="token punctuation">:</span>                question_type <span class="token operator">=</span> <span class="token string">'food_not_disease'</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                question_type <span class="token operator">=</span> <span class="token string">'food_do_disease'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 推荐药品</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>drug_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_drug'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 疾病接受检查项目</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>check_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_check'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 已知检查项目查相应疾病</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>check_qwds<span class="token operator">+</span>self<span class="token punctuation">.</span>cure_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'check'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'check_disease'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 症状防御</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>prevent_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_prevent'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 疾病医疗周期</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lasttime_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_lasttime'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 疾病治疗方式</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cureway_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_cureway'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 疾病治愈可能性</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cureprob_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_cureprob'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 疾病易感染人群</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_words<span class="token punctuation">(</span>self<span class="token punctuation">.</span>easyget_qwds<span class="token punctuation">,</span> question<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types <span class="token punctuation">:</span>            question_type <span class="token operator">=</span> <span class="token string">'disease_easyget'</span>            question_types<span class="token punctuation">.</span>append<span class="token punctuation">(</span>question_type<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 若没有查到相关的外部查询信息，那么则将该疾病的描述信息返回</span>        <span class="token keyword">if</span> question_types <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token string">'disease'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'disease_desc'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 若没有查到相关的外部查询信息，那么则将该疾病的描述信息返回</span>        <span class="token keyword">if</span> question_types <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token string">'symptom'</span> <span class="token keyword">in</span> types<span class="token punctuation">:</span>            question_types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'symptom_disease'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 将多个分类结果进行合并处理，组装成一个字典</span>        data<span class="token punctuation">[</span><span class="token string">'question_types'</span><span class="token punctuation">]</span> <span class="token operator">=</span> question_types        <span class="token comment" spellcheck="true"># print('data:',data)</span>        <span class="token keyword">return</span> data    <span class="token triple-quoted-string string">'''构造词对应的类型'''</span>    <span class="token comment" spellcheck="true"># def build_wdtype_dict(self):</span>    <span class="token comment" spellcheck="true">#     wd_dict = dict()</span>    <span class="token comment" spellcheck="true">#     for wd in self.region_words:</span>    <span class="token comment" spellcheck="true">#         wd_dict[wd] = []</span>    <span class="token comment" spellcheck="true">#         if wd in self.disease_wds:</span>    <span class="token comment" spellcheck="true">#             wd_dict[wd].append('disease')</span>    <span class="token comment" spellcheck="true">#         if wd in self.department_wds:</span>    <span class="token comment" spellcheck="true">#             wd_dict[wd].append('department')</span>    <span class="token comment" spellcheck="true">#         if wd in self.check_wds:</span>    <span class="token comment" spellcheck="true">#             wd_dict[wd].append('check')</span>    <span class="token comment" spellcheck="true">#         if wd in self.drug_wds:</span>    <span class="token comment" spellcheck="true">#             wd_dict[wd].append('drug')</span>    <span class="token comment" spellcheck="true">#         if wd in self.food_wds:</span>    <span class="token comment" spellcheck="true">#             wd_dict[wd].append('food')</span>    <span class="token comment" spellcheck="true">#         if wd in self.symptom_wds:</span>    <span class="token comment" spellcheck="true">#             wd_dict[wd].append('symptom')</span>    <span class="token comment" spellcheck="true">#         if wd in self.producer_wds:</span>    <span class="token comment" spellcheck="true">#             wd_dict[wd].append('producer')</span>    <span class="token comment" spellcheck="true">#     return wd_dict</span>    <span class="token keyword">def</span> <span class="token function">build_wdtype_dict2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        wd_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 构建字典</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> self<span class="token punctuation">.</span>department_wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> wd_dict<span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'department'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'department'</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># print('wd_dict:',wd_dict)</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> self<span class="token punctuation">.</span>disease_wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> wd_dict<span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'disease'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> self<span class="token punctuation">.</span>check_wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> wd_dict<span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'check'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'check'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> self<span class="token punctuation">.</span>drug_wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> wd_dict<span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'drug'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'drug'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> self<span class="token punctuation">.</span>food_wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> wd_dict<span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'food'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'food'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> self<span class="token punctuation">.</span>producer_wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> wd_dict<span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'producer'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'producer'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> self<span class="token punctuation">.</span>symptom_wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> wd_dict<span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'symptom'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                wd_dict<span class="token punctuation">[</span>wd<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'symptom'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print('final wd_dict:',wd_dict)</span>        <span class="token keyword">return</span> wd_dict    <span class="token triple-quoted-string string">'''构造actree，加速过滤'''</span>    <span class="token keyword">def</span> <span class="token function">build_actree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> wordlist<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 构建词树</span>        actree <span class="token operator">=</span> ahocorasick<span class="token punctuation">.</span>Automaton<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># enumerate()函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> word <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>wordlist<span class="token punctuation">)</span><span class="token punctuation">:</span>            actree<span class="token punctuation">.</span>add_word<span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span>        actree<span class="token punctuation">.</span>make_automaton<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print('实体个数：', len(wordlist))</span>        <span class="token keyword">return</span> actree    <span class="token triple-quoted-string string">'''问句过滤'''</span>    <span class="token keyword">def</span> <span class="token function">check_medical</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> question<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 提取问句中的关键词</span>        region_wds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>region_tree<span class="token punctuation">.</span>iter<span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">:</span>            wd <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            region_wds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wd<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print('region_wds:',region_wds)</span>        inner_wds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> wd1 <span class="token keyword">in</span> region_wds<span class="token punctuation">:</span>            <span class="token keyword">for</span> wd2 <span class="token keyword">in</span> region_wds<span class="token punctuation">:</span>                <span class="token keyword">if</span> wd1 <span class="token keyword">in</span> wd2 <span class="token operator">and</span> wd1 <span class="token operator">!=</span> wd2<span class="token punctuation">:</span>                    inner_wds<span class="token punctuation">.</span>append<span class="token punctuation">(</span>wd1<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('inner_wds:', inner_wds)</span>        final_wds <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> region_wds <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> inner_wds<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># print('final_wds:', final_wds)</span>        final_dict <span class="token operator">=</span> <span class="token punctuation">{</span>i<span class="token punctuation">:</span> self<span class="token punctuation">.</span>wdtype_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> final_wds<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true"># print('final_dict:', final_dict)</span>        <span class="token keyword">return</span> final_dict    <span class="token triple-quoted-string string">'''基于特征词进行分类'''</span>    <span class="token keyword">def</span> <span class="token function">check_words</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> wds<span class="token punctuation">,</span> sent<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> wd <span class="token keyword">in</span> wds<span class="token punctuation">:</span>            <span class="token keyword">if</span> wd <span class="token keyword">in</span> sent<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    handler <span class="token operator">=</span> QuestionClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        question <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'input an question:'</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> handler<span class="token punctuation">.</span>classify<span class="token punctuation">(</span>question<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问句解析脚本-—-question-parser-py"><a href="#问句解析脚本-—-question-parser-py" class="headerlink" title="问句解析脚本 — question_parser.py"></a>问句解析脚本 — question_parser.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token comment" spellcheck="true"># File: question_parser.py</span><span class="token comment" spellcheck="true"># Author: lhy&lt;lhy_in_blcu@126.com,https://huangyong.github.io></span><span class="token comment" spellcheck="true"># Date: 18-10-4</span><span class="token keyword">class</span> <span class="token class-name">QuestionPaser</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''构建实体节点'''</span>    <span class="token keyword">def</span> <span class="token function">build_entitydict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        entity_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> arg<span class="token punctuation">,</span> types <span class="token keyword">in</span> args<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> type <span class="token keyword">in</span> types<span class="token punctuation">:</span>                <span class="token keyword">if</span> type <span class="token operator">not</span> <span class="token keyword">in</span> entity_dict<span class="token punctuation">:</span>                    entity_dict<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arg<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    entity_dict<span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>arg<span class="token punctuation">)</span>        <span class="token keyword">return</span> entity_dict    <span class="token triple-quoted-string string">'''解析主函数'''</span>    <span class="token keyword">def</span> <span class="token function">parser_main</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> res_classify<span class="token punctuation">)</span><span class="token punctuation">:</span>        args <span class="token operator">=</span> res_classify<span class="token punctuation">[</span><span class="token string">'args'</span><span class="token punctuation">]</span>        entity_dict <span class="token operator">=</span> self<span class="token punctuation">.</span>build_entitydict<span class="token punctuation">(</span>args<span class="token punctuation">)</span>        question_types <span class="token operator">=</span> res_classify<span class="token punctuation">[</span><span class="token string">'question_types'</span><span class="token punctuation">]</span>        sqls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> question_type <span class="token keyword">in</span> question_types<span class="token punctuation">:</span>            sql_ <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            sql_<span class="token punctuation">[</span><span class="token string">'question_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> question_type            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> question_type <span class="token operator">==</span> <span class="token string">'disease_symptom'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'symptom_disease'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'symptom'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cause'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_acompany'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_not_food'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_do_food'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_drug'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'drug_disease'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'drug'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'food_not_disease'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'food'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'food_do_disease'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'food'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_check'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'check_disease'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'check'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_prevent'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_lasttime'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cureway'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cureprob'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_easyget'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_desc'</span><span class="token punctuation">:</span>                sql <span class="token operator">=</span> self<span class="token punctuation">.</span>sql_transfer<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> entity_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'disease'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> sql<span class="token punctuation">:</span>                sql_<span class="token punctuation">[</span><span class="token string">'sql'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sql                sqls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sql_<span class="token punctuation">)</span>        <span class="token keyword">return</span> sqls    <span class="token comment" spellcheck="true"># 针对不同的问题，分开进行处理</span>    <span class="token keyword">def</span> <span class="token function">sql_transfer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> question_type<span class="token punctuation">,</span> entities<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> entities<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询语句</span>        sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的原因</span>        <span class="token keyword">if</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cause'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cause"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的防御措施</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_prevent'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.prevent"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的持续时间</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_lasttime'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cure_lasttime"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的治愈概率</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cureprob'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cured_prob"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的治疗方式</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cureway'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.cure_way"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的易发人群</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_easyget'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.easy_get"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的相关介绍</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_desc'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease) where m.name = '{0}' return m.name, m.desc"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病有哪些症状</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_symptom'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:has_symptom]->(n:Symptom) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询症状会导致哪些疾病</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'symptom_disease'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:has_symptom]->(n:Symptom) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病的并发症</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_acompany'</span><span class="token punctuation">:</span>            sql1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:acompany_with]->(n:Disease) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:acompany_with]->(n:Disease) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql <span class="token operator">=</span> sql1 <span class="token operator">+</span> sql2        <span class="token comment" spellcheck="true"># 查询疾病的忌口</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_not_food'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:no_eat]->(n:Food) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 查询疾病建议吃的东西</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_do_food'</span><span class="token punctuation">:</span>            sql1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:do_eat]->(n:Food) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:recommand_eat]->(n:Food) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql <span class="token operator">=</span> sql1 <span class="token operator">+</span> sql2        <span class="token comment" spellcheck="true"># 已知忌口查疾病</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'food_not_disease'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:no_eat]->(n:Food) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 已知推荐查疾病</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'food_do_disease'</span><span class="token punctuation">:</span>            sql1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:do_eat]->(n:Food) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:recommand_eat]->(n:Food) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql <span class="token operator">=</span> sql1 <span class="token operator">+</span> sql2        <span class="token comment" spellcheck="true"># 查询疾病常用药品－药品别名记得扩充</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_drug'</span><span class="token punctuation">:</span>            sql1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:common_drug]->(n:Drug) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:recommand_drug]->(n:Drug) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql <span class="token operator">=</span> sql1 <span class="token operator">+</span> sql2        <span class="token comment" spellcheck="true"># 已知药品查询能够治疗的疾病</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'drug_disease'</span><span class="token punctuation">:</span>            sql1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:common_drug]->(n:Drug) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:recommand_drug]->(n:Drug) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>            sql <span class="token operator">=</span> sql1 <span class="token operator">+</span> sql2        <span class="token comment" spellcheck="true"># 查询疾病应该进行的检查</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_check'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:need_check]->(n:Check) where m.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 已知检查查询疾病</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'check_disease'</span><span class="token punctuation">:</span>            sql <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"MATCH (m:Disease)-[r:need_check]->(n:Check) where n.name = '{0}' return m.name, r.name, n.name"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> entities<span class="token punctuation">]</span>        <span class="token keyword">return</span> sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库查询请求及格式化回答脚本-—-answer-search-py"><a href="#数据库查询请求及格式化回答脚本-—-answer-search-py" class="headerlink" title="数据库查询请求及格式化回答脚本 — answer_search.py"></a>数据库查询请求及格式化回答脚本 — answer_search.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">from</span> py2neo <span class="token keyword">import</span> Graph<span class="token keyword">class</span> <span class="token class-name">AnswerSearcher</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># self.g = Graph(</span>        <span class="token comment" spellcheck="true">#     host="127.0.0.1",</span>        <span class="token comment" spellcheck="true">#     http_port=7474,  #7474</span>        <span class="token comment" spellcheck="true">#     user="neo4j",</span>        <span class="token comment" spellcheck="true">#     password="123456")</span>        self<span class="token punctuation">.</span>g <span class="token operator">=</span> Graph<span class="token punctuation">(</span><span class="token string">"http://localhost:7474"</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">"neo4j"</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'admin'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_limit <span class="token operator">=</span> <span class="token number">20</span>    <span class="token triple-quoted-string string">'''执行cypher查询，并返回相应结果'''</span>    <span class="token keyword">def</span> <span class="token function">search_main</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sqls<span class="token punctuation">)</span><span class="token punctuation">:</span>        final_answers <span class="token operator">=</span> <span class="token string">'数据库。'</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            final_answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> sql_ <span class="token keyword">in</span> sqls<span class="token punctuation">:</span>                question_type <span class="token operator">=</span> sql_<span class="token punctuation">[</span><span class="token string">'question_type'</span><span class="token punctuation">]</span>                queries <span class="token operator">=</span> sql_<span class="token punctuation">[</span><span class="token string">'sql'</span><span class="token punctuation">]</span>                answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> query <span class="token keyword">in</span> queries<span class="token punctuation">:</span>                    results <span class="token operator">=</span> self<span class="token punctuation">.</span>g<span class="token punctuation">.</span>run<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>                    answers <span class="token operator">+=</span> results                final_answer <span class="token operator">=</span> self<span class="token punctuation">.</span>answer_prettify<span class="token punctuation">(</span>question_type<span class="token punctuation">,</span> answers<span class="token punctuation">)</span>                <span class="token keyword">if</span> final_answer<span class="token punctuation">:</span>                    final_answers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>final_answer<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            final_answer <span class="token operator">=</span> <span class="token string">'数据库连接失败。'</span>        <span class="token keyword">return</span> final_answers    <span class="token triple-quoted-string string">'''根据对应的qustion_type，调用相应的回复模板'''</span>    <span class="token keyword">def</span> <span class="token function">answer_prettify</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> question_type<span class="token punctuation">,</span> answers<span class="token punctuation">)</span><span class="token punctuation">:</span>        final_answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> answers<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">''</span>        <span class="token keyword">if</span> question_type <span class="token operator">==</span> <span class="token string">'disease_symptom'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}的症状包括：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'symptom_disease'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'症状{0}可能染上的疾病有：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cause'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.cause'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}可能的成因有：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_prevent'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.prevent'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}的预防措施包括：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_lasttime'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.cure_lasttime'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}治疗可能持续的周期为：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cureway'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">'m.cure_way'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}可以尝试如下治疗：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_cureprob'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.cured_prob'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}治愈的概率为（仅供参考）：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_easyget'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.easy_get'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}的易感人群包括：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_desc'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.desc'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}的知识介绍：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span>  <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_acompany'</span><span class="token punctuation">:</span>            desc1 <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            desc2 <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> desc1 <span class="token operator">+</span> desc2 <span class="token keyword">if</span> i <span class="token operator">!=</span> subject<span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}的症状包括：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_not_food'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}忌食的食物包括有：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_do_food'</span><span class="token punctuation">:</span>            do_desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token string">'r.name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'宜吃'</span><span class="token punctuation">]</span>            recommand_desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers <span class="token keyword">if</span> i<span class="token punctuation">[</span><span class="token string">'r.name'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'推荐食谱'</span><span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}宜食的食物包括有：{1}\n推荐食谱包括有：{2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>do_desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>recommand_desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'food_not_disease'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'患有{0}的人最好不要吃{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subject<span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'food_do_disease'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'患有{0}的人建议多试试{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> subject<span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_drug'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}通常的使用的药品包括：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'drug_disease'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}主治的疾病有{1},可以试试'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'disease_check'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'{0}通常可以通过以下方式检查出来：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> question_type <span class="token operator">==</span> <span class="token string">'check_disease'</span><span class="token punctuation">:</span>            desc <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token string">'m.name'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> answers<span class="token punctuation">]</span>            subject <span class="token operator">=</span> answers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'n.name'</span><span class="token punctuation">]</span>            final_answer <span class="token operator">=</span> <span class="token string">'通常可以通过{0}检查出来的疾病有{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'；'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>num_limit<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> final_answer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问答程序脚本-—chatbot-graph-py"><a href="#问答程序脚本-—chatbot-graph-py" class="headerlink" title="问答程序脚本 —chatbot_graph.py"></a>问答程序脚本 —chatbot_graph.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">from</span> question_classifier <span class="token keyword">import</span> QuestionClassifier<span class="token keyword">from</span> question_parser <span class="token keyword">import</span> QuestionPaser<span class="token keyword">from</span> answer_search <span class="token keyword">import</span> AnswerSearcher<span class="token triple-quoted-string string">'''问答类'''</span><span class="token keyword">class</span> <span class="token class-name">ChatBotGraph</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>classifier <span class="token operator">=</span> QuestionClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>parser <span class="token operator">=</span> QuestionPaser<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>searcher <span class="token operator">=</span> AnswerSearcher<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">chat_main</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> question<span class="token punctuation">)</span><span class="token punctuation">:</span>        answer <span class="token operator">=</span> <span class="token string">'您好，我是医药智能助理“小医”，希望可以帮到您。'</span>        res_classify <span class="token operator">=</span> self<span class="token punctuation">.</span>classifier<span class="token punctuation">.</span>classify<span class="token punctuation">(</span>question<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 进行问句分类</span>        <span class="token keyword">if</span> <span class="token operator">not</span> res_classify<span class="token punctuation">:</span>            <span class="token keyword">return</span> answer        res_sql <span class="token operator">=</span> self<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>parser_main<span class="token punctuation">(</span>res_classify<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 进行问句解析，形成sql语句</span>        final_answers <span class="token operator">=</span> self<span class="token punctuation">.</span>searcher<span class="token punctuation">.</span>search_main<span class="token punctuation">(</span>res_sql<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 查找问句答案</span>        <span class="token keyword">if</span> <span class="token operator">not</span> final_answers<span class="token punctuation">:</span>            <span class="token keyword">return</span> answer        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>final_answers<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    chat_bot <span class="token operator">=</span> ChatBotGraph<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'模型加载完成...'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        question <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请留言:'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> question <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># question is None or question is '':</span>            <span class="token keyword">break</span>        answer <span class="token operator">=</span> chat_bot<span class="token punctuation">.</span>chat_main<span class="token punctuation">(</span>question<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'回答:'</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>１、本项目完成了从无到有，以垂直网站为数据来源，构建起以疾病为中心的医疗知识图谱，实体规模4.4万，实体关系规模30万。并基于此，搭建起了一个可以回答18类问题的自动问答小系统,总共耗时3天。其中，数据采集与整理1天，知识图谱构建与入库0.5天，问答系统组件1.5天。总的来说，还是比较快速。<br>2、本项目以业务驱动，构建医疗知识图谱，知识schema设计基于所采集的结构化数据生成(对网页结构化数据进行xpath解析)。<br>3、本项目以neo4j作为存储，并基于传统规则的方式完成了知识问答，并最终以cypher查询语句作为问答搜索sql，支持了问答服务。<br>4、本项目可以快速部署，数据已经放在data/medical.json当中，本项目的数据，如侵犯相关单位权益，请联系我删除。本数据请勿商用，以免引起不必要的纠纷。在本项目中的部署上，可以遵循项目运行步骤，完成数据库搭建，并提供搜索服务。<br>5、本项目还有不足：关于疾病的起因、预防等，实际返回的是一大段文字，这里其实可以引入事件抽取的概念，进一步将原因结构化表示出来。这个可以后面进行尝试。    </p>]]></content>
      
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04搭建Radius-server</title>
      <link href="/ubuntu16-04-da-jian-radius-server.html"/>
      <url>/ubuntu16-04-da-jian-radius-server.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu16-04搭建Radius-Server"><a href="#ubuntu16-04搭建Radius-Server" class="headerlink" title="ubuntu16.04搭建Radius Server"></a>ubuntu16.04搭建Radius Server</h2><h3 id="安装-FreeRadius"><a href="#安装-FreeRadius" class="headerlink" title="安装 FreeRadius"></a>安装 FreeRadius</h3><pre><code>$&gt; tar –zxvf freeradius-server-3.0.21.tar.gz$&gt; cd ./freeradius-server-3.0.21$&gt; ./configure$&gt; make$&gt; make install</code></pre><h3 id="配置-FreeRadius"><a href="#配置-FreeRadius" class="headerlink" title="配置 FreeRadius"></a>配置 FreeRadius</h3><ul><li>配置client IP 和密码</li></ul><pre><code>sudo vim /usr/local/etc/raddb/clients.conf</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823111915004.png" alt="image-20210823111915004"></p><ul><li>配置用户</li></ul><pre><code>sudo vim /usr/local/etc/raddb/mods-config/files/authorizeadd charles Cleartext-Password := &quot;123456&quot;</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823112006168.png" alt="image-20210823112006168"></p><ul><li>启动FreeRadius</li></ul><pre><code>sudo radiusd -X</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823112010835.png" alt="image-20210823112010835"></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu16.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04搭建dns-server</title>
      <link href="/ubuntu16-04-da-jian-dns-server.html"/>
      <url>/ubuntu16-04-da-jian-dns-server.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu16-04搭建DNS-Server"><a href="#ubuntu16-04搭建DNS-Server" class="headerlink" title="ubuntu16.04搭建DNS Server"></a>ubuntu16.04搭建DNS Server</h2><h3 id="安装bind9"><a href="#安装bind9" class="headerlink" title="安装bind9"></a>安装bind9</h3><pre><code>sudo apt-get install -y bind9</code></pre><h3 id="配置bind9"><a href="#配置bind9" class="headerlink" title="配置bind9"></a>配置bind9</h3><ul><li>编辑named.conf.options</li></ul><pre><code>cd /etc/bindsudo vim /etc/bind/named.conf.options</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/clip_image002.gif" alt="img"></p><ul><li>编辑named.conf.local</li></ul><pre><code>sudo vi /etc/bind/named.conf.local</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/clip_image004.gif" alt="img"></p><ul><li>编辑db.cloud.com</li></ul><pre><code>cd /etc/bindsudo mkdir zonessudo cp db.local zones/db.cloud.comsudo vi /etc/bind/zones/db.cloud.com</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/clip_image006.gif" alt="img"></p><h3 id="重启bind9"><a href="#重启bind9" class="headerlink" title="重启bind9"></a>重启bind9</h3><pre><code>sudo service bind9 restart</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code>nslookup ns.cloud.com</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/clip_image008.gif" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu16.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build server </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法整理</title>
      <link href="/python-ji-chu-yu-fa-zheng-li.html"/>
      <url>/python-ji-chu-yu-fa-zheng-li.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：该笔记基于<a href="https://www.liaoxuefeng.com/wiki/1016959663602400" target="_blank" rel="noopener">廖雪峰python学习教程</a>和<a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a>进行整理记录</p></blockquote><h2 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h2><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>Python提供了一个<code>input()</code>函数，可以让用户输入字符串，并存放到一个变量里。比如输入用户的名字：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>Michael<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当你输入<code>name = input()</code>并按下回车后，Python交互式命令行就在等待你的输入了。这时，你可以输入任意字符，然后按回车后完成输入。</p><p>输入完成后，不会有任何提示，Python交互式命令行又回到<code>&gt;&gt;&gt;</code>状态了。刚才输入的数据则是存放到<code>name</code>变量里了。可以直接输入<code>name</code>查看变量内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name<span class="token string">'Michael'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在计算机程序中，变量不仅可以为整数或浮点数，还可以是字符串，因此，<code>name</code>作为一个变量就是一个字符串。</p><p>要打印出<code>name</code>变量的内容，除了直接写<code>name</code>然后按回车外，还可以用<code>print()</code>函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>Michael<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有了输入和输出，我们就可以把上次打印<code>&#39;hello world&#39;</code>的程序改成有点意义的程序了：</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello,'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行上面的程序，第一行代码会让用户输入任意字符作为自己的名字，然后存入<code>name</code>变量中；第二行代码会根据用户的名字向用户说<code>hello</code>，比如输入<code>Michael</code>：</p><pre class="line-numbers language-python"><code class="language-python">C<span class="token punctuation">:</span>\Workspace<span class="token operator">></span> python hello<span class="token punctuation">.</span>pyMichaelhello<span class="token punctuation">,</span> Michael<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是程序运行的时候，没有任何提示信息告诉用户：“嘿，赶紧输入你的名字”，这样显得很不友好。幸好，<code>input()</code>可以让你显示一个字符串来提示用户，于是我们把代码改成：</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'please enter your name: '</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello,'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次运行这个程序，你会发现，程序一运行，会首先打印出<code>please enter your name:</code>，这样，用户就可以根据提示，输入名字后，得到<code>hello, xxx</code>的输出：</p><pre class="line-numbers language-python"><code class="language-python">C<span class="token punctuation">:</span>\Workspace<span class="token operator">></span> python hello<span class="token punctuation">.</span>pyplease enter your name<span class="token punctuation">:</span> Michaelhello<span class="token punctuation">,</span> Michael<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每次运行该程序，根据用户输入的不同，输出结果也会不同。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>python的基本输出是使用<code>print()</code>函数实现</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>print()</code>函数也可以接受多个字符串，用逗号“,”隔开，就可以实现一组字符的输出</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The quick brown fox'</span><span class="token punctuation">,</span> <span class="token string">'jumps over'</span><span class="token punctuation">,</span> <span class="token string">'the lazy dog'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>print()</code>函数会依次打印每个字符串，遇到逗号“,”则会输出一个空格，因此，输出的字符串是这样拼起来的：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210525153024434.png" alt="image-20210525153024434"></p><p><code>print()</code>也可以打印整数，或者计算结果</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token number">300</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数字类型与字符串"><a href="#数字类型与字符串" class="headerlink" title="数字类型与字符串"></a>数字类型与字符串</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：<code>1</code>，<code>100</code>，<code>-8080</code>，<code>0</code>，等等。</p><p>计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用<code>0x</code>前缀和<code>0-9,a-f</code>表示，例如：<code>0xff00</code>，<code>0xa5b4c3d2</code>，等等。</p><p>对于很大的数，例如<code>10000000000</code>，很难数清楚0的个数。Python允许在数字中间以<code>_</code>分隔，因此，写成<code>10_000_000_000</code>和<code>10000000000</code>是完全一样的。十六进制数也可以写成<code>0xa1b2_c3d4</code>。</p><p>在Python中，有两种除法，一种除法是<code>/</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token number">3.3333333333333335</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>/</code>除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">9</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token number">3.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还有一种除法是<code>//</code>，称为地板除，两个整数的除法仍然是整数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你没有看错，整数的地板除<code>//</code>永远是整数，即使除不尽。要做精确的除法，使用<code>/</code>就可以。</p><p>因为<code>//</code>除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>无论整数做<code>//</code>除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。</p><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x109和12.3x108是完全相等的。浮点数可以用数学写法，如<code>1.23</code>，<code>3.14</code>，<code>-9.01</code>，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是<code>1.23e9</code>，或者<code>12.3e8</code>，<code>0.000012</code>可以写成<code>1.2e-5</code>，等等。</p><p>整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。</p><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><p>布尔值和布尔代数的表示完全一致，一个布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">5</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔值可以用<code>and</code>、<code>or</code>和<code>not</code>运算。</p><p><code>and</code>运算是与运算，只有所有都为<code>True</code>，<code>and</code>运算结果才是<code>True</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">True</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">False</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span> <span class="token operator">and</span> <span class="token boolean">False</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">1</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>or</code>运算是或运算，只要其中有一个为<code>True</code>，<code>or</code>运算结果就是<code>True</code>：</p><pre><code>&gt;&gt;&gt; True or TrueTrue&gt;&gt;&gt; True or FalseTrue&gt;&gt;&gt; False or FalseFalse&gt;&gt;&gt; 5 &gt; 3 or 1 &gt; 3True</code></pre><p><code>not</code>运算是非运算，它是一个单目运算符，把<code>True</code>变成<code>False</code>，<code>False</code>变成<code>True</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">not</span> <span class="token boolean">True</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">not</span> <span class="token boolean">False</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">not</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>布尔值经常用在条件判断中，比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'adult'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'teenager'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h4><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值。</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。请注意，<code>&#39;&#39;</code>或<code>&quot;&quot;</code>本身只是一种表示方式，不是字符串的一部分，因此，字符串<code>&#39;abc&#39;</code>只有<code>a</code>，<code>b</code>，<code>c</code>这3个字符。如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符。</p><p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">'I\'m \"OK\"!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示的字符串内容是：</p><pre class="line-numbers language-python"><code class="language-python">I'm <span class="token string">"OK"</span>!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转义字符<code>\</code>可以转义很多字符，比如<code>\n</code>表示换行，<code>\t</code>表示制表符，字符<code>\</code>本身也要转义，所以<code>\\</code>表示的字符就是<code>\</code>，可以在Python的交互式命令行用<code>print()</code>打印字符串看看：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I\'m ok.'</span><span class="token punctuation">)</span>I'm ok<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I\'m learning\nPython.'</span><span class="token punctuation">)</span>I'm learningPython<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\\n\\'</span><span class="token punctuation">)</span>\\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果字符串里面有很多字符都需要转义，就需要加很多<code>\</code>，为了简化，Python还允许用<code>r&#39;&#39;</code>表示<code>&#39;&#39;</code>内部的字符串默认不转义，可以自己试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\\\t\\'</span><span class="token punctuation">)</span>\       \<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'\\\t\\'</span><span class="token punctuation">)</span>\\\t\\<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果字符串内部有很多换行，用<code>\n</code>写在一行里不好阅读，为了简化，Python允许用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>的格式表示多行内容，可以自己试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''line1... line2... line3'''</span><span class="token punctuation">)</span>line1line2line3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果写成程序并存为<code>.py</code>文件，就是：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''line1line2line3'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多行字符串<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>还可以在前面加上<code>r</code>使用，使用<code>r</code>后则字符串不转义。</p><h4 id="赋值-与多个变量赋值"><a href="#赋值-与多个变量赋值" class="headerlink" title="赋值 与多个变量赋值"></a>赋值 与多个变量赋值</h4><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>等号（=）用来给变量赋值。</p><p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>counter <span class="token operator">=</span> <span class="token number">100</span>          <span class="token comment" spellcheck="true"># 整型变量</span>miles   <span class="token operator">=</span> <span class="token number">1000.0</span>       <span class="token comment" spellcheck="true"># 浮点型变量</span>name    <span class="token operator">=</span> <span class="token string">"runoob"</span>     <span class="token comment" spellcheck="true"># 字符串</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>miles<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span>结果为：<span class="token number">100</span><span class="token number">1000.0</span>runoob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python允许你同时为多个变量赋值。例如：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p><p>您也可以为多个对象指定多个变量。例如：</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"runoob"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上实例，两个整型对象 1 和 2 的分配给变量 a 和 b，字符串对象 “runoob” 分配给变量 c。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Python3 中有六个标准的数据类型：</p><blockquote><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul></blockquote><p>Python3 的六个标准数据类型中：</p><blockquote><ul><li><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</li><li><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</li></ul></blockquote><hr><h4 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h4><p>Python3 支持 <strong>int、float、bool、complex（复数）</strong>。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 <code>type()</code>函数可以用来查询变量所指的对象类型。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此外还可以用 <code>isinstance()</code>来判断数据类型：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token number">111</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>isinstance 和 type 的区别在于：</p><blockquote><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。</li></ul></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A <span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong>在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。</p></blockquote><p>当你指定一个值时，Number 对象就会被创建：</p><pre><code>var1 = 1var2 = 10</code></pre><p>您也可以使用del语句删除一些对象引用。</p><p>del语句的语法是：</p><pre><code>del var1[,var2[,var3[....,varN]]]</code></pre><p>您可以通过使用del语句删除单个或多个对象。例如：</p><pre><code>del vardel var_a, var_b</code></pre><p><strong>数值运算</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># 加法</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4.3</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token comment" spellcheck="true"># 减法</span><span class="token number">2.3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token comment" spellcheck="true"># 乘法</span><span class="token number">21</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># 除法，得到一个浮点数</span><span class="token number">0.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token comment" spellcheck="true"># 除法，得到一个整数</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">17</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># 取余</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">5</span> <span class="token comment" spellcheck="true"># 乘方</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>1、Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>2、一个变量可以通过赋值指向不同类型的对象。</li><li>3、数值的除法包含两个运算符：<strong>/</strong> 返回一个浮点数，<strong>//</strong> 返回一个整数。</li><li>4、在混合计算时，Python会把整型转换成为浮点数。</li></ul><p><strong>数值类型实例</strong></p><table><thead><tr><th align="left">int</th><th align="left">float</th><th align="left">complex</th></tr></thead><tbody><tr><td align="left">10</td><td align="left">0.0</td><td align="left">3.14j</td></tr><tr><td align="left">100</td><td align="left">15.20</td><td align="left">45.j</td></tr><tr><td align="left">-786</td><td align="left">-21.9</td><td align="left">9.322e-36j</td></tr><tr><td align="left">080</td><td align="left">32.3e+18</td><td align="left">.876j</td></tr><tr><td align="left">-0490</td><td align="left">-90.</td><td align="left">-.6545+0J</td></tr><tr><td align="left">-0x260</td><td align="left">-32.54e100</td><td align="left">3e+26J</td></tr><tr><td align="left">0x69</td><td align="left">70.2E-12</td><td align="left">4.53e-7j</td></tr></tbody></table><p>Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p><h5 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h5><table><thead><tr><th align="left">函数</th><th align="left">返回值 ( 描述 )</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-abs.html" target="_blank" rel="noopener">abs(x)</a></td><td align="left">返回数字的绝对值，如abs(-10) 返回 10</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-ceil.html" target="_blank" rel="noopener">ceil(x)</a></td><td align="left">返回数字的上入整数，如math.ceil(4.1) 返回 5</td></tr><tr><td align="left">cmp(x, y)</td><td align="left">如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1。 <strong>Python 3 已废弃，使用 (x&gt;y)-(x&lt;y) 替换</strong>。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-exp.html" target="_blank" rel="noopener">exp(x)</a></td><td align="left">返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-fabs.html" target="_blank" rel="noopener">fabs(x)</a></td><td align="left">返回数字的绝对值，如math.fabs(-10) 返回10.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-floor.html" target="_blank" rel="noopener">floor(x)</a></td><td align="left">返回数字的下舍整数，如math.floor(4.9)返回 4</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log.html" target="_blank" rel="noopener">log(x)</a></td><td align="left">如math.log(math.e)返回1.0,math.log(100,10)返回2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-log10.html" target="_blank" rel="noopener">log10(x)</a></td><td align="left">返回以10为基数的x的对数，如math.log10(100)返回 2.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-max.html" target="_blank" rel="noopener">max(x1, x2,…)</a></td><td align="left">返回给定参数的最大值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-min.html" target="_blank" rel="noopener">min(x1, x2,…)</a></td><td align="left">返回给定参数的最小值，参数可以为序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-modf.html" target="_blank" rel="noopener">modf(x)</a></td><td align="left">返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-pow.html" target="_blank" rel="noopener">pow(x, y)</a></td><td align="left">x**y 运算后的值。</td></tr><tr><td align="left">round(x [,n])</td><td align="left">返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。<strong>其实准确的说是保留值将保留到离上一位更近的一端。</strong></td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sqrt.html" target="_blank" rel="noopener">sqrt(x)</a></td><td align="left">返回数字x的平方根。</td></tr></tbody></table><h5 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h5><p>随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。</p><p>Python包含以下常用随机数函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-choice.html" target="_blank" rel="noopener">choice(seq)</a></td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-randrange.html" target="_blank" rel="noopener">randrange ([start,] stop [,step])</a></td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-random.html" target="_blank" rel="noopener">random()</a></td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">seed([x])</td><td align="left">改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-shuffle.html" target="_blank" rel="noopener">shuffle(lst)</a></td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-uniform.html" target="_blank" rel="noopener">uniform(x, y)</a></td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table><h5 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h5><p>Python包括以下三角函数：</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-acos.html" target="_blank" rel="noopener">acos(x)</a></td><td align="left">返回x的反余弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-asin.html" target="_blank" rel="noopener">asin(x)</a></td><td align="left">返回x的反正弦弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan.html" target="_blank" rel="noopener">atan(x)</a></td><td align="left">返回x的反正切弧度值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-atan2.html" target="_blank" rel="noopener">atan2(y, x)</a></td><td align="left">返回给定的 X 及 Y 坐标值的反正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-cos.html" target="_blank" rel="noopener">cos(x)</a></td><td align="left">返回x的弧度的余弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-hypot.html" target="_blank" rel="noopener">hypot(x, y)</a></td><td align="left">返回欧几里德范数 sqrt(x<em>x + y</em>y)。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-sin.html" target="_blank" rel="noopener">sin(x)</a></td><td align="left">返回的x弧度的正弦值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-tan.html" target="_blank" rel="noopener">tan(x)</a></td><td align="left">返回x弧度的正切值。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-degrees.html" target="_blank" rel="noopener">degrees(x)</a></td><td align="left">将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-number-radians.html" target="_blank" rel="noopener">radians(x)</a></td><td align="left">将角度转换为弧度</td></tr></tbody></table><h5 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h5><table><thead><tr><th align="left">常量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pi</td><td align="left">数学常量 pi（圆周率，一般以π来表示）</td></tr><tr><td align="left">e</td><td align="left">数学常量 e，e即自然常数（自然常数）。</td></tr></tbody></table><hr><h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>Python中的字符串用单引号 <strong>‘</strong> 或双引号 <strong>“</strong> 括起来，同时使用反斜杠 <strong>\</strong> 转义特殊字符。</p><p>字符串的截取的语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">变量<span class="token punctuation">[</span>头下标<span class="token punctuation">:</span>尾下标<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引值以 0 为开始值，-1 为从末尾的开始位置。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/123456-20200923-1.svg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/python-str-runoob.png" alt="img"></p><p>加号 <strong>+</strong> 是字符串的连接符， 星号 ***** 表示复制当前字符串，与之结合的数字为复制的次数。实例如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>str <span class="token operator">=</span> <span class="token string">'Runoob'</span><span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 输出字符串</span><span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出第一个到倒数第二个的所有字符</span><span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出字符串第一个字符</span><span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出从第三个开始到第五个的字符</span><span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出从第三个开始的后的所有字符</span><span class="token keyword">print</span> <span class="token punctuation">(</span>str <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出字符串两次，也可以写成 print (2 * str)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>str <span class="token operator">+</span> <span class="token string">"TEST"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接字符串</span>执行以上程序会输出如下结果：RunoobRunooRnoonoobRunoobRunoobRunoobTEST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python 使用反斜杠 <code>\</code>转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <code>r</code>，表示原始字符串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Ru\noob'</span><span class="token punctuation">)</span>Ruoob<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token string">'Ru\noob'</span><span class="token punctuation">)</span>Ru\noob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，反斜杠<code>\</code>可以作为续行符，表示下一行是上一行的延续。也可以使用 <strong>“””…”””</strong> 或者 <strong>‘’’…’’’</strong> 跨越多行。</p><p>注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> word <span class="token operator">=</span> <span class="token string">'Python'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> word<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>P n<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> word<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n P<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。</p><p><strong>注意：</strong></p><ul><li>1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</li><li>2、字符串可以用+运算符连接在一起，用*运算符重复。</li><li>3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。</li><li>4、Python中的字符串不能改变。</li></ul><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><p>在需要在字符中使用特殊字符时，python 用反斜杠 <code>\</code>转义字符。如下表：</p><table><thead><tr><th align="left">转义字符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">(在行尾时)</td><td align="left">续行符</td><td align="left"><code>&gt;&gt;&gt; print(&quot;line1 \ ... line2 \ ... line3&quot;) line1 line2 line3 &gt;&gt;&gt;</code></td></tr><tr><td align="left">\</td><td align="left">反斜杠符号</td><td align="left"><code>&gt;&gt;&gt; print(&quot;\\&quot;) \</code></td></tr><tr><td align="left">&#39;</td><td align="left">单引号</td><td align="left"><code>&gt;&gt;&gt; print(&#39;\&#39;&#39;) &#39;</code></td></tr><tr><td align="left">&quot;</td><td align="left">双引号</td><td align="left"><code>&gt;&gt;&gt; print(&quot;\&quot;&quot;) &quot;</code></td></tr><tr><td align="left">\a</td><td align="left">响铃</td><td align="left"><code>&gt;&gt;&gt; print(&quot;\a&quot;)</code>执行后电脑有响声。</td></tr><tr><td align="left">\b</td><td align="left">退格(Backspace)</td><td align="left"><code>&gt;&gt;&gt; print(&quot;Hello \b World!&quot;) Hello World!</code></td></tr><tr><td align="left">\000</td><td align="left">空</td><td align="left"><code>&gt;&gt;&gt; print(&quot;\000&quot;) &gt;&gt;&gt;</code></td></tr><tr><td align="left">\n</td><td align="left">换行</td><td align="left"><code>&gt;&gt;&gt; print(&quot;\n&quot;)  &gt;&gt;&gt;</code></td></tr><tr><td align="left">\v</td><td align="left">纵向制表符</td><td align="left"><code>&gt;&gt;&gt; print(&quot;Hello \v World!&quot;) Hello        World! &gt;&gt;&gt;</code></td></tr><tr><td align="left">\t</td><td align="left">横向制表符</td><td align="left"><code>&gt;&gt;&gt; print(&quot;Hello \t World!&quot;) Hello    World! &gt;&gt;&gt;</code></td></tr><tr><td align="left">\r</td><td align="left">回车，将 <strong>\r</strong> 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 <strong>\r</strong> 后面的内容完全替换完成。</td><td align="left"><code>&gt;&gt;&gt; print(&quot;Hello\rWorld!&quot;) World! &gt;&gt;&gt; print(&#39;google runoob taobao\r123456&#39;) 123456 runoob taobao</code></td></tr><tr><td align="left">\f</td><td align="left">换页</td><td align="left"><code>&gt;&gt;&gt; print(&quot;Hello \f World!&quot;) Hello        World! &gt;&gt;&gt;</code></td></tr><tr><td align="left">\yyy</td><td align="left">八进制数，y 代表 0~7 的字符，例如：\012 代表换行。</td><td align="left"><code>&gt;&gt;&gt; print(&quot;\110\145\154\154\157\40\127\157\162\154\144\41&quot;) Hello World!</code></td></tr><tr><td align="left">\xyy</td><td align="left">十六进制数，以 \x 开头，y 代表的字符，例如：\x0a 代表换行</td><td align="left"><code>&gt;&gt;&gt; print(&quot;\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64\x21&quot;) Hello World!</code></td></tr><tr><td align="left">\other</td><td align="left">其它的字符以普通格式输出</td><td align="left"></td></tr></tbody></table><h5 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h5><p>下表实例变量 a 值为字符串 “Hello”，b 变量值为 “Python”：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">字符串连接</td><td align="left">a + b 输出结果： HelloPython</td></tr><tr><td align="left">*</td><td align="left">重复输出字符串</td><td align="left">a*2 输出结果：HelloHello</td></tr><tr><td align="left">[]</td><td align="left">通过索引获取字符串中字符</td><td align="left">a[1] 输出结果 <strong>e</strong></td></tr><tr><td align="left">[ : ]</td><td align="left">截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</td><td align="left">a[1:4] 输出结果 <strong>ell</strong></td></tr><tr><td align="left">in</td><td align="left">成员运算符 - 如果字符串中包含给定的字符返回 True</td><td align="left"><strong>‘H’ in a</strong> 输出结果 True</td></tr><tr><td align="left">not in</td><td align="left">成员运算符 - 如果字符串中不包含给定的字符返回 True</td><td align="left"><strong>‘M’ not in a</strong> 输出结果 True</td></tr><tr><td align="left">r/R</td><td align="left">原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 <strong>r</strong>（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</td><td align="left"><code>print( r&#39;\n&#39; ) print( R&#39;\n&#39; )</code></td></tr><tr><td align="left">%</td><td align="left">格式字符串</td><td align="left"></td></tr></tbody></table><hr><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号<code>[]</code>之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python">变量<span class="token punctuation">[</span>头下标<span class="token punctuation">:</span>尾下标<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>索引值以 <strong>0</strong> 为开始值，<strong>-1</strong> 为从末尾的开始位置。</p><p>当索引超出了范围时，Python会报一个<code>IndexError</code>错误，所以，要确保索引不要越界，记得最后一个元素的索引是<code>len(classmates) - 1</code>。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/list_slicing1_new1.png" alt="img"></p><p>加号 <strong>+</strong> 是列表连接运算符，星号 ***** 是重复操作。如下实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>list <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span> <span class="token punctuation">]</span>tinylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 输出完整列表</span><span class="token keyword">print</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出列表第一个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从第二个开始输出到第三个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出从第三个元素开始的所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinylist <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出两次列表</span><span class="token keyword">print</span> <span class="token punctuation">(</span>list <span class="token operator">+</span> tinylist<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接列表</span>以上实例输出结果：<span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">]</span>abcd<span class="token punctuation">[</span><span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 将对应的元素值设置为 []</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>List 内置了有很多方法，例如 <code>append()</code>、<code>pop()</code> 等等，这在后面会讲到。</p><p><strong>注意：</strong></p><ul><li>1、List写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，List可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/py-dict-1.png" alt="img"></p><p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串：</p><pre><code>def reverseWords(input):  # 通过空格将字符串分隔符，把各个单词分隔为列表  inputWords = input.split(&quot; &quot;)  # 翻转字符串  # 假设列表 list = [1,2,3,4],    # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)  # inputWords[-1::-1] 有三个参数  # 第一个参数 -1 表示最后一个元素  # 第二个参数为空，表示移动到列表末尾  # 第三个参数为步长，-1 表示逆向  inputWords=inputWords[-1::-1]  # 重新组合字符串  output = &#39; &#39;.join(inputWords)  return outputif __name__ == &quot;__main__&quot;:  input = &#39;I like runoob&#39;  rw = reverseWords(input)  print(rw)输出结果为：runoob like I</code></pre><p>list是一个可变的有序表，所以，可以往list中追加元素到末尾：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'Adam'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">[</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以把元素插入到指定的位置，比如索引号为<code>1</code>的位置：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">[</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要删除list末尾的元素，用<code>pop()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Adam'</span><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">[</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要删除指定位置的元素，用<code>pop(i)</code>方法，其中<code>i</code>是索引位置：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">'Jack'</span><span class="token operator">>></span><span class="token operator">></span> classmates<span class="token punctuation">[</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：</p><pre><code>&gt;&gt;&gt; classmates[1] = &#39;Sarah&#39;&gt;&gt;&gt; classmates[&#39;Michael&#39;, &#39;Sarah&#39;, &#39;Tracy&#39;]</code></pre><p>list里面的元素的数据类型也可以不同，比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>list元素也可以是另一个list，比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>要注意<code>s</code>只有4个元素，其中<code>s[2]</code>又是一个list，如果拆开写就更容易理解了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'asp'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token string">'scheme'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要拿到<code>&#39;php&#39;</code>可以写<code>p[1]</code>或者<code>s[2][1]</code>，因此<code>s</code>可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。</p><p>如果一个list中一个元素也没有，就是一个空的list，它的长度为0：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="Python方法"><a href="#Python方法" class="headerlink" title="Python方法:"></a>Python方法:</h5><table><thead><tr><th align="left">序号</th><th align="left">方法</th><th>介绍</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-append.html" target="_blank" rel="noopener">list.append(obj)</a></td><td>在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-count.html" target="_blank" rel="noopener">list.count(obj)</a></td><td>统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html" target="_blank" rel="noopener">list.extend(seq)</a></td><td>在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-index.html" target="_blank" rel="noopener">list.index(obj)</a></td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html" target="_blank" rel="noopener">list.insert(index, obj)</a></td><td>将对象插入列表</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-pop.html" target="_blank" rel="noopener">list.pop([index=-1])</a></td><td>移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html" target="_blank" rel="noopener">list.remove(obj)</a></td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html" target="_blank" rel="noopener">list.reverse()</a></td><td>反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html" target="_blank" rel="noopener">list.sort( key=None, reverse=False)</a></td><td>对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html" target="_blank" rel="noopener">list.clear()</a></td><td>清空列表</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html" target="_blank" rel="noopener">list.copy()</a></td><td>复制列表</td></tr></tbody></table><h5 id="Python函数"><a href="#Python函数" class="headerlink" title="Python函数"></a>Python函数</h5><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-len.html" target="_blank" rel="noopener">len(list)</a> 列表元素个数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-max.html" target="_blank" rel="noopener">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-min.html" target="_blank" rel="noopener">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html" target="_blank" rel="noopener">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><hr><h4 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h4><p>元组（tuple）与列表类似，不同之处在于==元组的元素不能修改==。元组写在<code>小括号()</code>里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>tuple <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span> <span class="token punctuation">)</span>tinytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 输出完整元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 输出元组的第一个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出从第二个元素开始到第三个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出从第三个元素开始的所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinytuple <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出两次元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple <span class="token operator">+</span> tinytuple<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接元组</span>以上实例输出结果：<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span>abcd<span class="token punctuation">(</span><span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取。</p><p>其实，可以把字符串看作一种特殊的元组。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span> <span class="token comment" spellcheck="true"># 修改元组元素的操作是非法的</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span> File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><pre class="line-numbers language-python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 空元组</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 一个元素，需要在元素后添加逗号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>string、list 和 tuple 都属于 sequence（序列）。</p><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><p><strong>删除元组</strong></p><p>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span>tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span>tup<span class="token punctuation">)</span> <span class="token keyword">del</span> tup <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"删除后的元组 tup : "</span><span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例元组被删除后，输出变量会有异常信息，输出如下所示：</p><pre class="line-numbers language-python"><code class="language-python">删除后的元组 tup <span class="token punctuation">:</span> Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>tup<span class="token punctuation">)</span>NameError<span class="token punctuation">:</span> name <span class="token string">'tup'</span> <span class="token keyword">is</span> <span class="token operator">not</span> defined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关于元组是不可变的</strong></p><p>所谓元组的不可变指的是元组所指向的内存中的内容不可变。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'g'</span>   <span class="token comment" spellcheck="true"># 不支持修改元素</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span> File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment<span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>tup<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 查看内存地址</span><span class="token number">4440687904</span><span class="token operator">>></span><span class="token operator">></span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> id<span class="token punctuation">(</span>tup<span class="token punctuation">)</span><span class="token number">4441088800</span>   <span class="token comment" spellcheck="true"># 内存地址不一样了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上实例可以看出，重新赋值的元组 tup，绑定到新的对象了，不是修改了原来的对象。</p><hr><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><p>创建格式：</p><pre class="line-numbers language-python"><code class="language-python">parame <span class="token operator">=</span> <span class="token punctuation">{</span>value01<span class="token punctuation">,</span>value02<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>或者set<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>sites <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">,</span> <span class="token string">'Zhihu'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出集合，重复的元素被自动去掉</span><span class="token comment" spellcheck="true"># 成员测试</span><span class="token keyword">if</span> <span class="token string">'Runoob'</span> <span class="token keyword">in</span> sites <span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob 在集合中'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Runoob 不在集合中'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># set可以进行集合运算</span>a <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># a 和 b 的差集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># a 和 b 的并集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># a 和 b 的交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># a 和 b 中不同时存在的元素</span>以上实例输出结果：<span class="token punctuation">{</span><span class="token string">'Zhihu'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Facebook'</span><span class="token punctuation">}</span>Runoob 在集合中<span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重复元素在set中自动被过滤：</p><pre><code>&gt;&gt;&gt; s = set([1, 1, 2, 2, 3, 3])&gt;&gt;&gt; s{1, 2, 3}</code></pre><p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果：</p><pre><code>&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; s{1, 2, 3, 4}&gt;&gt;&gt; s.add(4)&gt;&gt;&gt; s{1, 2, 3, 4}</code></pre><p>通过<code>remove(key)</code>方法可以删除元素：</p><pre><code>&gt;&gt;&gt; s.remove(4)&gt;&gt;&gt; s{1, 2, 3}</code></pre><p>set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</p><pre><code>&gt;&gt;&gt; s1 = set([1, 2, 3])&gt;&gt;&gt; s2 = set([2, 3, 4])&gt;&gt;&gt; s1 &amp; s2{2, 3}&gt;&gt;&gt; s1 | s2{1, 2, 3, 4}</code></pre><p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。</p><h5 id="集合内置方法完整列表"><a href="#集合内置方法完整列表" class="headerlink" title="集合内置方法完整列表"></a>集合内置方法完整列表</h5><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-add.html" target="_blank" rel="noopener">add()</a></td><td align="left">为集合添加元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-clear.html" target="_blank" rel="noopener">clear()</a></td><td align="left">移除集合中的所有元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-copy.html" target="_blank" rel="noopener">copy()</a></td><td align="left">拷贝一个集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference.html" target="_blank" rel="noopener">difference()</a></td><td align="left">返回多个集合的差集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-difference_update.html" target="_blank" rel="noopener">difference_update()</a></td><td align="left">移除集合中的元素，该元素在指定的集合也存在。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-discard.html" target="_blank" rel="noopener">discard()</a></td><td align="left">删除集合中指定的元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection.html" target="_blank" rel="noopener">intersection()</a></td><td align="left">返回集合的交集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-intersection_update.html" target="_blank" rel="noopener">intersection_update()</a></td><td align="left">返回集合的交集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-isdisjoint.html" target="_blank" rel="noopener">isdisjoint()</a></td><td align="left">判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issubset.html" target="_blank" rel="noopener">issubset()</a></td><td align="left">判断指定集合是否为该方法参数集合的子集。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-issuperset.html" target="_blank" rel="noopener">issuperset()</a></td><td align="left">判断该方法的参数集合是否为指定集合的子集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-pop.html" target="_blank" rel="noopener">pop()</a></td><td align="left">随机移除元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-remove.html" target="_blank" rel="noopener">remove()</a></td><td align="left">移除指定元素</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference.html" target="_blank" rel="noopener">symmetric_difference()</a></td><td align="left">返回两个集合中不重复的元素集合。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-symmetric_difference_update.html" target="_blank" rel="noopener">symmetric_difference_update()</a></td><td align="left">移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-union.html" target="_blank" rel="noopener">union()</a></td><td align="left">返回两个集合的并集</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/ref-set-update.html" target="_blank" rel="noopener">update()</a></td><td align="left">给集合添加元素</td></tr></tbody></table><hr><h4 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h4><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：<code>字典当中的元素是通过键来存取的</code>，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/py-dict-3.png" alt="img"></p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>dict<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1 - 菜鸟教程"</span>dict<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>   <span class="token operator">=</span> <span class="token string">"2 - 菜鸟工具"</span>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">:</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">}</span><span class="token keyword">print</span> <span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 输出键为 'one' 的值</span><span class="token keyword">print</span> <span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 输出键为 2 的值</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 输出完整的字典</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出所有键</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出所有值</span>以上实例输出结果：<span class="token number">1</span> <span class="token operator">-</span> 菜鸟教程<span class="token number">2</span> <span class="token operator">-</span> 菜鸟工具<span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">:</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">}</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> dict<span class="token punctuation">(</span>Runoob<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> Google<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> Taobao<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，字典类型也有一些内置的函数，例如<code>clear()</code>、<code>keys()</code>、<code>values()</code>等。</p><p><strong>注意：</strong></p><ul><li>1、字典是一种映射类型，它的元素是键值对。</li><li>2、字典的关键字必须为不可变类型，且不能重复。</li><li>3、创建空字典使用 <strong>{ }</strong>。</li></ul><p>如果key不存在，dict就会报错：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'Thomas'</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>KeyError<span class="token punctuation">:</span> <span class="token string">'Thomas'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Thomas'</span> <span class="token keyword">in</span> d<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Thomas'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'Thomas'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：返回<code>None</code>的时候Python的交互环境不显示结果。</p><p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token number">75</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'Michael'</span><span class="token punctuation">:</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">'Tracy'</span><span class="token punctuation">:</span> <span class="token number">85</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p><p><strong>删除字典元素</strong></p><p>能删单一的元素也能清空字典，清空只需一项操作。</p><p>显示删除一个字典用del命令，如下实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Class'</span><span class="token punctuation">:</span> <span class="token string">'First'</span><span class="token punctuation">}</span>  <span class="token keyword">del</span> dict<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 删除键 'Name' </span>dict<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 清空字典 </span><span class="token keyword">del</span> dict         <span class="token comment" spellcheck="true"># 删除字典  </span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"dict['Age']: "</span><span class="token punctuation">,</span> dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"dict['School']: "</span><span class="token punctuation">,</span> dict<span class="token punctuation">[</span><span class="token string">'School'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>但这会引发一个异常，因为用执行 <span class="token keyword">del</span> 操作后字典不再存在：Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"dict['Age']: "</span><span class="token punctuation">,</span> dict<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> <span class="token string">'type'</span> object <span class="token keyword">is</span> <span class="token operator">not</span> subscriptable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Python字典内置方法："><a href="#Python字典内置方法：" class="headerlink" title="Python字典内置方法："></a>Python字典内置方法：</h5><table><thead><tr><th align="left">序号</th><th align="left">函数</th><th>描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-clear.html" target="_blank" rel="noopener">radiansdict.clear()</a></td><td>删除字典内所有元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-copy.html" target="_blank" rel="noopener">radiansdict.copy()</a></td><td>返回一个字典的浅复制</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html" target="_blank" rel="noopener">radiansdict.fromkeys()</a></td><td>创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-get.html" target="_blank" rel="noopener">radiansdict.get(key, default=None)</a></td><td>返回指定键的值，如果键不在字典中返回 default 设置的默认值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-in.html" target="_blank" rel="noopener">key in dict</a></td><td>如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-items.html" target="_blank" rel="noopener">radiansdict.items()</a></td><td>以列表返回一个视图对象</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-keys.html" target="_blank" rel="noopener">radiansdict.keys()</a></td><td>返回一个视图对象</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-setdefault.html" target="_blank" rel="noopener">radiansdict.setdefault(key, default=None)</a></td><td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-update.html" target="_blank" rel="noopener">radiansdict.update(dict2)</a></td><td>把字典dict2的键/值对更新到dict里</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-values.html" target="_blank" rel="noopener">radiansdict.values()</a></td><td>返回一个视图对象</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-pop.html" target="_blank" rel="noopener">pop(key[,default])</a></td><td>删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-popitem.html" target="_blank" rel="noopener">popitem()</a></td><td>随机返回并删除字典中的最后一对键和值。</td></tr></tbody></table><hr><h4 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h4><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">int(x [,base])</td><td align="left">将x转换为一个整数</td></tr><tr><td align="left">float(x)</td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">complex(real [,imag])</td><td align="left">创建一个复数</td></tr><tr><td align="left">str(x)</td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left">repr(x)</td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left">eval(str)</td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left">tuple(s)</td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left">list(s)</td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left">set(s)</td><td align="left">转换为可变集合</td></tr><tr><td align="left">dict(d)</td><td align="left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td align="left">frozenset(s)</td><td align="left">转换为不可变集合</td></tr><tr><td align="left">chr(x)</td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left">ord(x)</td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left">hex(x)</td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left">oct(x)</td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table><h3 id="编码与格式化"><a href="#编码与格式化" class="headerlink" title="编码与格式化"></a>编码与格式化</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'包含中文的str'</span><span class="token punctuation">)</span>包含中文的str<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token number">65</span><span class="token operator">>></span><span class="token operator">></span> ord<span class="token punctuation">(</span><span class="token string">'中'</span><span class="token punctuation">)</span><span class="token number">20013</span><span class="token operator">>></span><span class="token operator">></span> chr<span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span><span class="token string">'B'</span><span class="token operator">>></span><span class="token operator">></span> chr<span class="token punctuation">(</span><span class="token number">25991</span><span class="token punctuation">)</span><span class="token string">'文'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果知道字符的整数编码，还可以用十六进制这么写<code>str</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'\u4e2d\u6587'</span><span class="token string">'中文'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两种写法完全是等价的。</p><p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> b<span class="token string">'ABC'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p><h5 id="encode"><a href="#encode" class="headerlink" title="encode()"></a>encode()</h5><p>以Unicode表示的<code>str</code>通过<code>encode()</code>方法可以编码为指定的<code>bytes</code>，例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'ABC'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span>b<span class="token string">'ABC'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>UnicodeEncodeError<span class="token punctuation">:</span> <span class="token string">'ascii'</span> codec can't encode characters <span class="token keyword">in</span> position <span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> ordinal <span class="token operator">not</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>纯英文的<code>str</code>可以用<code>ASCII</code>编码为<code>bytes</code>，内容是一样的，含有中文的<code>str</code>可以用<code>UTF-8</code>编码为<code>bytes</code>。含有中文的<code>str</code>无法用<code>ASCII</code>编码，因为中文编码的范围超过了<code>ASCII</code>编码的范围，Python会报错。</p><p>在<code>bytes</code>中，无法显示为ASCII字符的字节，用<code>\x##</code>显示。</p><h5 id="decode"><a href="#decode" class="headerlink" title="decode()"></a>decode()</h5><p>反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是<code>bytes</code>。要把<code>bytes</code>变为<code>str</code>，就需要用<code>decode()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'ABC'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'ascii'</span><span class="token punctuation">)</span><span class="token string">'ABC'</span><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token string">'中文'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>bytes</code>中包含无法解码的字节，<code>decode()</code>方法会报错：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>UnicodeDecodeError<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> codec can't decode byte <span class="token number">0xff</span> <span class="token keyword">in</span> position <span class="token number">3</span><span class="token punctuation">:</span> invalid start byte<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>bytes</code>中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b<span class="token string">'\xe4\xb8\xad\xff'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token string">'中'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="len"><a href="#len" class="headerlink" title="len()"></a>len()</h5><p>要计算<code>str</code>包含多少个字符，可以用<code>len()</code>函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">)</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>len()</code>函数计算的是<code>str</code>的字符数，如果换成<code>bytes</code>，<code>len()</code>函数就计算字节数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>b<span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p><p>在操作字符串时，我们经常遇到<code>str</code>和<code>bytes</code>的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p><p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p><p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。</p><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><h5 id><a href="#" class="headerlink" title="%"></a>%</h5><p>在Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> <span class="token string">'world'</span><span class="token string">'Hello, world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Hi, %s, you have $%d.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token string">'Hi, Michael, you have $1000000.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p><p>常见的占位符有：</p><table><thead><tr><th align="left">占位符</th><th align="left">替换内容</th></tr></thead><tbody><tr><td align="left">%d</td><td align="left">整数</td></tr><tr><td align="left">%f</td><td align="left">浮点数</td></tr><tr><td align="left">%s</td><td align="left">字符串</td></tr><tr><td align="left">%x</td><td align="left">十六进制整数</td></tr></tbody></table><p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数。</p><p>如果不确定变量类型，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Age: %s. Gender: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token string">'Age: 25. Gender: True'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果字符串里面的<code>%</code>是一个普通字符的话，则需要转义，用<code>%%</code>来表示一个<code>%</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'growth rate: %d %%'</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token string">'growth rate: 7 %'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h5><p>另一种格式化字符串的方法是使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>{0}</code>、<code>{1}</code>……，不过这种方式写起来比%要麻烦得多：</p><pre><code>&gt;&gt;&gt; &#39;Hello, {0}, 成绩提升了 {1:.1f}%&#39;.format(&#39;小明&#39;, 17.125)&#39;Hello, 小明, 成绩提升了 17.1%&#39;</code></pre><h5 id="f-string"><a href="#f-string" class="headerlink" title="f-string"></a>f-string</h5><p>最后一种格式化字符串的方法是使用以<code>f</code>开头的字符串，称之为<code>f-string</code>，它和普通字符串不同之处在于，字符串如果包含<code>{xxx}</code>，就会以对应的变量替换：</p><pre><code>&gt;&gt;&gt; r = 2.5&gt;&gt;&gt; s = 3.14 * r ** 2&gt;&gt;&gt; print(f&#39;The area of a circle with radius {r} is {s:.2f}&#39;)The area of a circle with radius 2.5 is 19.62</code></pre><p>上述代码中，<code>{r}</code>被变量<code>r</code>的值替换，<code>{s:.2f}</code>被变量<code>s</code>的值替换，并且<code>:</code>后面的<code>.2f</code>指定了格式化参数（即保留两位小数），因此，<code>{s:.2f}</code>的替换结果是<code>19.62</code>。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：</p><p>下表中变量 a 为 60，b 为 13二进制格式如下：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">1100</span>b <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">1101</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>a<span class="token operator">&amp;</span>b <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">1100</span>a<span class="token operator">|</span>b <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">1101</span>a<span class="token operator">^</span>b <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">0001</span><span class="token operator">~</span>a  <span class="token operator">=</span> <span class="token number">1100</span> <span class="token number">0011</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。<strong>~x</strong> 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">逻辑表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">and</td><td align="left">x and y</td><td align="left">布尔”与” - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</td><td align="left">(a and b) 返回 20。</td></tr><tr><td align="left">or</td><td align="left">x or y</td><td align="left">布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。</td><td align="left">(a or b) 返回 10。</td></tr><tr><td align="left">not</td><td align="left">not x</td><td align="left">布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td align="left">not(a and b) 返回 False</td></tr></tbody></table><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">in</td><td align="left">如果在指定的序列中找到值返回 True，否则返回 False。</td><td align="left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td align="left">not in</td><td align="left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td align="left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td></tr></tbody></table><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><p>身份运算符用于比较两个对象的存储单元</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">is</td><td align="left">is 是判断两个标识符是不是引用自一个对象</td><td align="left"><strong>x is y</strong>, 类似 <strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回 True，否则返回 False</td></tr><tr><td align="left">is not</td><td align="left">is not 是判断两个标识符是不是引用自不同对象</td><td align="left"><strong>x is not y</strong> ， 类似 <strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td></tr></tbody></table><p><strong>注：</strong> <a href="https://www.runoob.com/python/python-func-id.html" target="_blank" rel="noopener">id()</a> 函数用于获取对象内存地址。</p><p><strong>is 与 == 区别：</strong></p><p>is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a <span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">is</span> a  <span class="token boolean">True</span> <span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">==</span> a <span class="token boolean">True</span> <span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> b <span class="token keyword">is</span> a <span class="token boolean">False</span> <span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">==</span> a <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h3><p>Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。</p><p>可以通过下图来简单了解条件语句的执行过程:</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/if-condition.jpg" alt="img"></p><p>代码执行过程：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/python-if.webp" alt="img"></p><p>Python中if语句的一般形式如下所示：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> condition_1<span class="token punctuation">:</span>    statement_block_1 <span class="token keyword">elif</span> condition_2<span class="token punctuation">:</span>    statement_block_2 <span class="token keyword">else</span><span class="token punctuation">:</span>        statement_block_3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li><li>如果 “condition_1” 为False，将判断 “condition_2”</li><li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li><li>如果 “condition_2” 为False，将执行”statement_block_3”块语句</li></ul><p>Python 中用 <strong>elif</strong> 代替了 <strong>else if</strong>，所以if语句的关键字为：<strong>if – elif – else</strong>。</p><p><strong>注意：</strong></p><ul><li>1、每个条件后面要使用冒号 <strong>:</strong>，表示接下来是满足条件后要执行的语句块。</li><li>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。</li><li>3、在Python中<code>没有switch – case语句</code>。</li></ul><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><p>Python 中 while 语句的一般形式：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> 判断条件<span class="token punctuation">(</span>condition<span class="token punctuation">)</span>：    执行语句<span class="token punctuation">(</span>statements<span class="token punctuation">)</span>……<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行流程图如下：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/886A6E10-58F1-4A9B-8640-02DBEFF0EF9A.jpg" alt="img"></p><p><strong>while 循环使用 else 语句</strong></p><p>如果 while 后面的条件语句为 false 时，则执行 else 的语句块。</p><p>语法格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>expr<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>additional_statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。</p><h4 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h4><p>Python for 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。</p><p>for循环的一般格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>variable<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>sequence<span class="token operator">></span><span class="token punctuation">:</span>        <span class="token operator">&lt;</span>statements<span class="token operator">></span> <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token operator">&lt;</span>statements<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>流程图：</strong></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/A71EC47E-BC53-4923-8F88-B027937EE2FF.jpg" alt="img"></p><h4 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h4><p>如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> 结果：    <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以使用range指定区间的值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  结果：<span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做’步长’):</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> 结果：<span class="token number">0</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">9</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>负数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>   结果<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">40</span> <span class="token operator">-</span><span class="token number">70</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>您可以结合range()和len()函数以遍历一个序列的索引,如下所示:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">,</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'QQ'</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> 结果：   <span class="token number">0</span> Google <span class="token number">1</span> Baidu <span class="token number">2</span> Runoob <span class="token number">3</span> Taobao <span class="token number">4</span> QQ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以使用range()函数来创建一个列表：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 结果：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="break-和-continue-语句及循环中的-else-子句"><a href="#break-和-continue-语句及循环中的-else-子句" class="headerlink" title="break 和 continue 语句及循环中的 else 子句"></a>break 和 continue 语句及循环中的 else 子句</h4><p><strong>break 执行流程图：</strong></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/E5A591EF-6515-4BCB-AEAA-A97ABEFC5D7D.jpg" alt="img"></p><p><strong>continue 执行流程图：</strong></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/8962A4F1-B78C-4877-B328-903366EA1470.jpg" alt="img"></p><p>while 语句代码执行过程：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/python-while.webp" alt="img"></p><p>for 语句代码执行过程：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/break-continue-536.png" alt="img"></p><p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p><p><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><h4 id="pass-语句"><a href="#pass-语句" class="headerlink" title="pass 语句"></a>pass 语句</h4><p>Python pass是空语句，是为了保持程序结构的完整性。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 <strong>()</strong>。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号 <strong>:</strong> 起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/py-tup-10-26-1.png" alt="img"></p><p><strong>语法</strong></p><p>Python 定义函数使用 def 关键字，一般格式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> 函数名（参数列表）<span class="token punctuation">:</span>    函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。</p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>在 python 中，类型属于对象，变量是没有类型的：</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>a<span class="token operator">=</span><span class="token string">"Runoob"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上代码中，<strong>[1,2,3]</strong> 是 List 类型，<strong>“Runoob”</strong> 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。</p><p><strong>可更改(mutable)与不可更改(immutable)对象</strong></p><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li><strong>不可变类型：</strong>变量赋值 <strong>a=5</strong> 后再赋值 <strong>a=10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</li><li><strong>可变类型：</strong>变量赋值 <strong>la=[1,2,3,4]</strong> 后再赋值 <strong>la[2]=5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><p>python 函数的参数传递：</p><ul><li><strong>不可变类型：</strong>类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li><li><strong>可变类型：</strong>类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li></ul><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>以下是调用函数时可使用的正式参数类型：</p><ul><li>必需参数</li><li>关键字参数</li><li>默认参数</li><li>不定长参数</li></ul><h4 id="必需参数"><a href="#必需参数" class="headerlink" title="必需参数"></a>必需参数</h4><p>必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。</p><p>调用 printme() 函数，你必须传入一个参数，不然会出现语法错误：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true">#可写函数说明 </span><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token string">"打印任何传入的字符串"</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span>       <span class="token keyword">return</span>  <span class="token comment" spellcheck="true"># 调用 printme 函数，不加参数会报错 </span>printme<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre class="line-numbers language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"test.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    printme<span class="token punctuation">(</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> printme<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">'str'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h4><p>关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。</p><p>使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。</p><p>以下实例在函数 printme() 调用时使用参数名：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token comment" spellcheck="true">#可写函数说明 </span><span class="token keyword">def</span> <span class="token function">printme</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token string">"打印任何传入的字符串"</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span>       <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">#调用printme函数 </span>printme<span class="token punctuation">(</span> str <span class="token operator">=</span> <span class="token string">"菜鸟教程"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre><code>菜鸟教程</code></pre><p>以下实例中演示了函数参数的使用不需要使用指定顺序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token comment" spellcheck="true">#可写函数说明 </span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token string">"打印任何传入的字符串"</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>       <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">#调用printinfo函数 </span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre class="line-numbers language-python"><code class="language-python">名字<span class="token punctuation">:</span>  runoob年龄<span class="token punctuation">:</span>  <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token comment" spellcheck="true">#可写函数说明 </span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">35</span> <span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token string">"打印任何传入的字符串"</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"名字: "</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"年龄: "</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span>       <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">#调用printinfo函数 </span>printinfo<span class="token punctuation">(</span> age<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span> printinfo<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">"runoob"</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre><code>名字:  runoob年龄:  50------------------------名字:  runoob年龄:  35</code></pre><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><p>你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">functionname</span><span class="token punctuation">(</span><span class="token punctuation">[</span>formal_args<span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">*</span>var_args_tuple <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token string">"函数_文档字符串"</span>   function_suite   <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>加了星号 ***** 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token comment" spellcheck="true"># 可写函数说明 </span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token string">"打印任何传入的参数"</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span>vartuple<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用printinfo 函数 </span>printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre><code>输出: 70(60, 50)</code></pre><p>如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token comment" spellcheck="true"># 可写函数说明</span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">*</span>vartuple <span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token string">"打印任何传入的参数"</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>       <span class="token keyword">for</span> var <span class="token keyword">in</span> vartuple<span class="token punctuation">:</span>              <span class="token keyword">print</span> <span class="token punctuation">(</span>var<span class="token punctuation">)</span>       <span class="token keyword">return</span>  <span class="token comment" spellcheck="true"># 调用printinfo 函数 </span>printinfo<span class="token punctuation">(</span> <span class="token number">10</span> <span class="token punctuation">)</span> printinfo<span class="token punctuation">(</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">50</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre><code>输出:10输出:706050</code></pre><p>还有一种就是参数带两个星号 <strong><em>\</em></strong>基本语法如下：</p><pre><code>def functionname([formal_args,] **var_args_dict ):   &quot;函数_文档字符串&quot;   function_suite   return [expression]</code></pre><p>加了两个星号 <strong><em>\</em></strong> 的参数会以字典的形式导入。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3   </span><span class="token comment" spellcheck="true"># 可写函数说明 </span><span class="token keyword">def</span> <span class="token function">printinfo</span><span class="token punctuation">(</span> arg1<span class="token punctuation">,</span> <span class="token operator">**</span>vardict <span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token string">"打印任何传入的参数"</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"输出: "</span><span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">)</span>       <span class="token keyword">print</span> <span class="token punctuation">(</span>vardict<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用printinfo 函数 </span>printinfo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre><code>输出: 1{&#39;a&#39;: 2, &#39;b&#39;: 3}</code></pre><p>声明函数时，参数中星号 ***** 可以单独出现，例如:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果单独出现星号 ***** 后的参数必须用<code>关键字</code>传入。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 报错</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> f<span class="token punctuation">(</span><span class="token punctuation">)</span> takes <span class="token number">2</span> positional arguments but <span class="token number">3</span> were given<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 正常</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>python 使用 lambda 来创建匿名函数。</p><p>所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。</p><ul><li>lambda 只是一个表达式，函数体比 def 简单很多。</li><li>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</li><li>lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。</li><li>虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</li></ul><p><strong>语法</strong></p><p>lambda 函数的语法只包含一个语句，如下：</p><pre><code>lambda [arg1 [,arg2,.....argn]]:expression</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token comment" spellcheck="true"># 可写函数说明 </span>sum <span class="token operator">=</span> <span class="token keyword">lambda</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">:</span> arg1 <span class="token operator">+</span> arg2  <span class="token comment" spellcheck="true"># 调用sum函数 </span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"相加后的值为 : "</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre><code>相加后的值为 :  30相加后的值为 :  40</code></pre><h3 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h3><p><strong>return [表达式]</strong> 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。</p><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>如果给定一个<code>list</code>或<code>tuple</code>，我们可以通过<code>for</code>循环来遍历这个<code>list</code>或<code>tuple</code>，这种遍历我们称为迭代（Iteration）。</p><p>在Python中，迭代是通过<code>for ... in</code>来完成的，而很多语言比如C语言，迭代<code>list</code>是通过下标完成的，比如C代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看出，Python的<code>for</code>循环抽象程度要高于C的<code>for</code>循环，因为Python的<code>for</code>循环不仅可以用在<code>list</code>或<code>tuple</code>上，还可以作用在其他可迭代对象上。</p><p><code>list</code>这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如<code>dict</code>就可以迭代：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> key <span class="token keyword">in</span> d<span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>acb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>dict</code>的存储不是按照<code>list</code>的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</p><p>默认情况下，<code>dict</code>迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</p><p>由于字符串也是可迭代对象，因此，也可以作用于<code>for</code>循环：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">'ABC'</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ABC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，当我们使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行，而我们不太关心该对象究竟是<code>list</code>还是其他数据类型。</p><p>那么，如何判断一个对象是可迭代对象呢？方法是通过<code>collections.abc</code>模块的<code>Iterable</code>类型判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># str是否可迭代</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># list是否可迭代</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 整数是否可迭代</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个小问题，如果要对<code>list</code>实现类似Java那样的下标循环怎么办？Python内置的<code>enumerate</code>函数可以把一个<code>list</code>变成索引-元素对，这样就可以在<code>for</code>循环中同时迭代索引和元素本身：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">0</span> A<span class="token number">1</span> B<span class="token number">2</span> C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的<code>for</code>循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">4</span><span class="token number">3</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p><p>举个例子，要生成list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>可以用<code>list(range(1, 11))</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？方法一是循环：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>写列表生成式时，把要生成的元素<code>x * x</code>放到前面，后面跟<code>for</code>循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p><p>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token operator">*</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>还可以使用两层循环，可以生成全排列：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>m <span class="token operator">+</span> n <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token string">'ABC'</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token string">'XYZ'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'AX'</span><span class="token punctuation">,</span> <span class="token string">'AY'</span><span class="token punctuation">,</span> <span class="token string">'AZ'</span><span class="token punctuation">,</span> <span class="token string">'BX'</span><span class="token punctuation">,</span> <span class="token string">'BY'</span><span class="token punctuation">,</span> <span class="token string">'BZ'</span><span class="token punctuation">,</span> <span class="token string">'CX'</span><span class="token punctuation">,</span> <span class="token string">'CY'</span><span class="token punctuation">,</span> <span class="token string">'CZ'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>三层和三层以上的循环就很少用到了。</p><p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os <span class="token comment" spellcheck="true"># 导入os模块，模块的概念后面讲到</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>d <span class="token keyword">for</span> d <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># os.listdir可以列出文件和目录</span><span class="token punctuation">[</span><span class="token string">'.emacs.d'</span><span class="token punctuation">,</span> <span class="token string">'.ssh'</span><span class="token punctuation">,</span> <span class="token string">'.Trash'</span><span class="token punctuation">,</span> <span class="token string">'Adlm'</span><span class="token punctuation">,</span> <span class="token string">'Applications'</span><span class="token punctuation">,</span> <span class="token string">'Desktop'</span><span class="token punctuation">,</span> <span class="token string">'Documents'</span><span class="token punctuation">,</span> <span class="token string">'Downloads'</span><span class="token punctuation">,</span> <span class="token string">'Library'</span><span class="token punctuation">,</span> <span class="token string">'Movies'</span><span class="token punctuation">,</span> <span class="token string">'Music'</span><span class="token punctuation">,</span> <span class="token string">'Pictures'</span><span class="token punctuation">,</span> <span class="token string">'Public'</span><span class="token punctuation">,</span> <span class="token string">'VirtualBox VMs'</span><span class="token punctuation">,</span> <span class="token string">'Workspace'</span><span class="token punctuation">,</span> <span class="token string">'XCode'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>for</code>循环其实可以同时使用两个甚至多个变量，比如<code>dict</code>的<code>items()</code>可以同时迭代key和value：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>y <span class="token operator">=</span> Bx <span class="token operator">=</span> Az <span class="token operator">=</span> C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，列表生成式也可以使用两个变量来生成list：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token string">'C'</span> <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> v <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'y=B'</span><span class="token punctuation">,</span> <span class="token string">'x=A'</span><span class="token punctuation">,</span> <span class="token string">'z=C'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后把一个list中所有的字符串变成小写：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">,</span> <span class="token string">'IBM'</span><span class="token punctuation">,</span> <span class="token string">'Apple'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> L<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'ibm'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用列表生成式的时候，有些童鞋经常搞不清楚<code>if...else</code>的用法。</p><p>例如，以下代码正常输出偶数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是，我们不能在最后的<code>if</code>加上<code>else</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">]</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>    <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span><span class="token punctuation">]</span>                                              <span class="token operator">^</span>SyntaxError<span class="token punctuation">:</span> invalid syntax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code>，否则如何筛选？</p><p>另一些童鞋发现把<code>if</code>写在<code>for</code>前面必须加<code>else</code>，否则报错：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>    <span class="token punctuation">[</span>x <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                       <span class="token operator">^</span>SyntaxError<span class="token punctuation">:</span> invalid syntax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果。因此，考察表达式：<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token operator">-</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述<code>for</code>前面的表达式<code>x if x % 2 == 0 else -x</code>才能根据<code>x</code>计算出确定的结果。</p><p>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代是Python最强大的功能之一，是访问集合元素的一种方式。</p><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。</p><p>字符串，列表或元组对象都可用于创建迭代器：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 创建迭代器对象</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出迭代器的下一个元素</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器对象可以使用常规for语句进行遍历：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span>list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象 </span><span class="token keyword">for</span> x <span class="token keyword">in</span> it<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以上程序，输出结果如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用 next() 函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token keyword">import</span> sys         <span class="token comment" spellcheck="true"># 引入 sys 模块  </span>list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象 </span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>                sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以上程序，输出结果如下：</p><pre><code>1234</code></pre><h4 id="创建一个迭代器"><a href="#创建一个迭代器" class="headerlink" title="创建一个迭代器"></a>创建一个迭代器</h4><p>把一个类作为一个迭代器使用需要在类中实现两个方法 <strong>iter</strong>() 与 <strong>next</strong>() 。</p><p>如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 <strong>init</strong>(), 它会在对象初始化的时候执行。</p><p>更多内容查阅：<a href="https://www.runoob.com/python3/python3-class.html" target="_blank" rel="noopener">Python3 面向对象</a></p><p><strong>iter</strong>() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 <strong>next</strong>() 方法并通过 StopIteration 异常标识迭代的完成。</p><p><strong>next</strong>() 方法（Python 2 里是 next()）会返回下一个迭代器对象。</p><p>创建一个返回数字的迭代器，初始值为 1，逐步递增 1：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">return</span> self      <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>a            self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">return</span> x  myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span> myiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>myclass<span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>myiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行输出结果为：</p><pre><code>12345</code></pre><h4 id="StopIteration"><a href="#StopIteration" class="headerlink" title="StopIteration"></a>StopIteration</h4><p>StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 <strong>next</strong>() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。</p><p>在 20 次迭代后停止执行：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyNumbers</span><span class="token punctuation">:</span>      <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">return</span> self       <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">:</span>                  x <span class="token operator">=</span> self<span class="token punctuation">.</span>a                  self<span class="token punctuation">.</span>a <span class="token operator">+=</span> <span class="token number">1</span>                  <span class="token keyword">return</span> x            <span class="token keyword">else</span><span class="token punctuation">:</span>                  <span class="token keyword">raise</span> StopIteration  myclass <span class="token operator">=</span> MyNumbers<span class="token punctuation">(</span><span class="token punctuation">)</span> myiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>myclass<span class="token punctuation">)</span>  <span class="token keyword">for</span> x <span class="token keyword">in</span> myiter<span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行输出结果为：</p><pre><code>1234567891011121314151617181920</code></pre><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。</p><p>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。</p><p>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。</p><p>调用一个生成器函数，返回的是一个迭代器对象。</p><p>以下实例使用 yield 实现斐波那契数列：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3  </span><span class="token keyword">import</span> sys  <span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 生成器函数 - 斐波那契    </span>    a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                         <span class="token keyword">return</span>               <span class="token keyword">yield</span> a               a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b                counter <span class="token operator">+=</span> <span class="token number">1</span> f <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># f 是一个迭代器，由生成器返回生成  </span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>                sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行以上程序，输出结果如下：</p><pre><code>0 1 1 2 3 5 8 13 21 34 55</code></pre><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><h4 id="变量可以指向函数"><a href="#变量可以指向函数" class="headerlink" title="变量可以指向函数"></a>变量可以指向函数</h4><p>结论：函数本身也可以赋值给变量，即：变量可以指向函数。</p><p>如果一个变量指向了一个函数，那么，可否通过该变量来调用这个函数？用代码验证一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> abs<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功！说明变量<code>f</code>现在已经指向了<code>abs</code>函数本身。直接调用<code>abs()</code>函数和调用变量<code>f()</code>完全相同。</p><h4 id="传入函数"><a href="#传入函数" class="headerlink" title="传入函数"></a>传入函数</h4><p>既然变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。</p><p>一个最简单的高阶函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们调用<code>add(-5, 6, abs)</code>时，参数<code>x</code>，<code>y</code>和<code>f</code>分别接收<code>-5</code>，<code>6</code>和<code>abs</code>，根据函数定义，我们可以推导计算过程为：</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>y <span class="token operator">=</span> <span class="token number">6</span>f <span class="token operator">=</span> absf<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> f<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token number">11</span><span class="token keyword">return</span> <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h4><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p><p>举例说明，比如我们有一个函数f(x)=x2，要把这个函数作用在一个list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>上，就可以用<code>map()</code>实现如下：</p><pre class="line-numbers language-ascii"><code class="language-ascii">            f(x) = x * x                  │                  │  ┌──┬──┬──┬─┼──┬──┬─—┬─┐  │   │   │   │   │   │   │   │   │  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼[ 1   2   3   4   5   6   7   8   9 ]  │   │   │   │   │   │   │   │   │  │   │   │   │   │   │   │   │   │  ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼[ 1   4   9  16  25  36  49  64  81 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们用Python代码实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> r <span class="token operator">=</span> map<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>map()</code>传入的第一个参数是<code>f</code>，即函数对象本身。由于结果<code>r</code>是一个<code>Iterator</code>，<code>Iterator</code>是惰性序列，因此通过<code>list()</code>函数让它把整个序列都计算出来并返回一个list。</p><p>你可能会想，不需要<code>map()</code>函数，写一个循环，也可以计算出结果：</p><pre class="line-numbers language-python"><code class="language-python">L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>的确可以，但是，从上面的循环代码，能一眼看明白“把f(x)作用在list的每一个元素并把结果生成一个新的list”吗？</p><p>所以，<code>map()</code>作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的f(x)=x2，还可以计算任意复杂的函数，比如，把这个list所有数字转为字符串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>==reduce函数==</p><p><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p><pre class="line-numbers language-python"><code class="language-python">reduce<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> x4<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>f<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> x3<span class="token punctuation">)</span><span class="token punctuation">,</span> x4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比方说对一个序列求和，就可以用<code>reduce</code>实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> reduce<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> reduce<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然求和运算可以直接用Python内建函数<code>sum()</code>，没必要动用<code>reduce</code>。</p><p>但是如果要把序列<code>[1, 3, 5, 7, 9]</code>变换成整数<code>13579</code>，<code>reduce</code>就可以派上用场：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> reduce<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> reduce<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">13579</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子本身没多大用处，但是，如果考虑到字符串<code>str</code>也是一个序列，对上面的例子稍加改动，配合<code>map()</code>，我们就可以写出把<code>str</code>转换为<code>int</code>的函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> functools <span class="token keyword">import</span> reduce<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     digits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> digits<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> reduce<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> map<span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> <span class="token string">'13579'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">13579</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整理成一个<code>str2int</code>的函数就是：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceDIGITS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y    <span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span>    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> map<span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以用lambda函数进一步简化成：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduceDIGITS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">char2num</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> DIGITS<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> y<span class="token punctuation">,</span> map<span class="token punctuation">(</span>char2num<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，假设Python没有提供<code>int()</code>函数，你完全可以自己写一个把字符串转化为整数的函数，而且只需要几行代码！</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>Python内建的<code>filter()</code>函数用于过滤序列。</p><p>和<code>map()</code>类似，<code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p><p>例如，在一个list中，删掉偶数，只保留奇数，可以这么写：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果: [1, 5, 9, 15]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把一个序列中的空字符串删掉，可以这么写：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">not_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token operator">and</span> s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>not_empty<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 结果: ['A', 'B', 'C']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见用<code>filter()</code>这个高阶函数，关键在于正确实现一个“筛选”函数。</p><p>注意到<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list。</p><h5 id="用filter求素数"><a href="#用filter求素数" class="headerlink" title="用filter求素数"></a>用filter求素数</h5><p>计算<a href="http://baike.baidu.com/view/10626.htm" target="_blank" rel="noopener">素数</a>的一个方法是<a href="http://baike.baidu.com/view/3784258.htm" target="_blank" rel="noopener">埃氏筛法</a>，它的算法理解起来非常简单：</p><p>首先，列出从<code>2</code>开始的所有自然数，构造一个序列：</p><p>2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, …</p><p>取序列的第一个数<code>2</code>，它一定是素数，然后用<code>2</code>把序列的<code>2</code>的倍数筛掉：</p><p>3, <del>4</del>, 5, <del>6</del>, 7, <del>8</del>, 9, <del>10</del>, 11, <del>12</del>, 13, <del>14</del>, 15, <del>16</del>, 17, <del>18</del>, 19, <del>20</del>, …</p><p>取新序列的第一个数<code>3</code>，它一定是素数，然后用<code>3</code>把序列的<code>3</code>的倍数筛掉：</p><p>5, <del>6</del>, 7, <del>8</del>, <del>9</del>, <del>10</del>, 11, <del>12</del>, 13, <del>14</del>, <del>15</del>, <del>16</del>, 17, <del>18</del>, 19, <del>20</del>, …</p><p>取新序列的第一个数<code>5</code>，然后用<code>5</code>把序列的<code>5</code>的倍数筛掉：</p><p>7, <del>8</del>, <del>9</del>, <del>10</del>, 11, <del>12</del>, 13, <del>14</del>, <del>15</del>, <del>16</del>, 17, <del>18</del>, 19, <del>20</del>, …</p><p>不断筛下去，就可以得到所有的素数。</p><p>用Python来实现这个算法，可以先构造一个从<code>3</code>开始的奇数序列：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_odd_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">2</span>        <span class="token keyword">yield</span> n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这是一个生成器，并且是一个无限序列。</p><p>然后定义一个筛选函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_not_divisible</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> n <span class="token operator">></span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后，定义一个生成器，不断返回下一个素数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token number">2</span>    it <span class="token operator">=</span> _odd_iter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 初始序列</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> next<span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 返回序列的第一个数</span>        <span class="token keyword">yield</span> n        it <span class="token operator">=</span> filter<span class="token punctuation">(</span>_not_divisible<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 构造新序列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个生成器先返回第一个素数<code>2</code>，然后，利用<code>filter()</code>不断产生筛选后的新的序列。</p><p>由于<code>primes()</code>也是一个无限序列，所以调用时需要设置一个退出循环的条件：</p><pre><code># 打印1000以内的素数:for n in primes():    if n &lt; 1000:        print(n)    else:        break</code></pre><p>注意到<code>Iterator</code>是惰性计算的序列，所以我们可以用Python表示“全体自然数”，“全体素数”这样的序列，而代码非常简洁。</p><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>排序算法</p><p>排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，但如果是字符串或者两个dict呢？直接比较数学上的大小是没有意义的，因此，比较的过程必须通过函数抽象出来。</p><p>Python内置的<code>sorted()</code>函数就可以对list进行排序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此外，<code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序，例如按绝对值大小排序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span>abs<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过<code>key=abs</code>处理过的list：</p><pre class="line-numbers language-python"><code class="language-python">list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">]</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">21</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后<code>sorted()</code>函数按照keys进行排序，并按照对应关系返回list相应的元素：</p><pre class="line-numbers language-ascii"><code class="language-ascii">keys排序结果 => [5, 9,  12,  21, 36]                |  |    |    |   |最终结果     => [5, 9, -12, -21, 36]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们再看一个字符串排序的例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Credit'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认情况下，对字符串排序，是按照ASCII的大小比较的，由于<code>&#39;Z&#39; &lt; &#39;a&#39;</code>，结果，大写字母<code>Z</code>会排在小写字母<code>a</code>的前面。</p><p>现在，我们提出排序应该忽略大小写，按照字母序排序。要实现这个算法，不必对现有代码大加改动，只要我们能用一个key函数把字符串映射为忽略大小写排序即可。忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。</p><p>这样，我们给<code>sorted</code>传入key函数，即可实现忽略大小写的排序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span>str<span class="token punctuation">.</span>lower<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要进行反向排序，不必改动key函数，可以传入第三个参数<code>reverse=True</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">,</span> <span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token operator">=</span>str<span class="token punctuation">.</span>lower<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Zoo'</span><span class="token punctuation">,</span> <span class="token string">'Credit'</span><span class="token punctuation">,</span> <span class="token string">'bob'</span><span class="token punctuation">,</span> <span class="token string">'about'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上述例子可以看出，高阶函数的抽象能力是非常强大的，而且，核心代码可以保持得非常简洁。</p><h4 id="返回函数"><a href="#返回函数" class="headerlink" title="返回函数"></a>返回函数</h4><h5 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h5><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p><p>我们来实现一个可变参数的求和。通常情况下，求和的函数是这样定义的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>        ax <span class="token operator">=</span> ax <span class="token operator">+</span> n    <span class="token keyword">return</span> ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lazy_sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ax <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>            ax <span class="token operator">=</span> ax <span class="token operator">+</span> n        <span class="token keyword">return</span> ax    <span class="token keyword">return</span> sum<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们调用<code>lazy_sum()</code>时，返回的并不是求和结果，而是求和函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">&lt;</span>function lazy_sum<span class="token punctuation">.</span><span class="token operator">&lt;</span>locals<span class="token operator">></span><span class="token punctuation">.</span>sum at <span class="token number">0x101c6ed90</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用函数<code>f</code>时，才真正计算求和的结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p><p>请再注意一点，当我们调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f1 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f2 <span class="token operator">=</span> lazy_sum<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token operator">==</span>f2<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>f1()</code>和<code>f2()</code>的调用结果互不影响。</p><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><p>注意到返回的函数在其定义内部引用了局部变量<code>args</code>，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p><p>另一个需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行。我们来看一个例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> i<span class="token operator">*</span>i        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> fsf1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都返回了。</p><p>你可能认为调用<code>f1()</code>，<code>f2()</code>和<code>f3()</code>结果应该是<code>1</code>，<code>4</code>，<code>9</code>，但实际结果是：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全部都是<code>9</code>！原因就在于返回的函数引用了变量<code>i</code>，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量<code>i</code>已经变成了<code>3</code>，因此最终结果为<code>9</code>。</p><blockquote><p>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p></blockquote><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j<span class="token operator">*</span>j        <span class="token keyword">return</span> g    fs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># f(i)立刻被执行，因此i的当前值被传入f()</span>    <span class="token keyword">return</span> fs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看看结果：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3 <span class="token operator">=</span> count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4</span><span class="token operator">>></span><span class="token operator">></span> f3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点是代码较长，可利用lambda函数缩短代码。</p><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>由于函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> now<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">.</span>__name__<span class="token string">'now'</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>__name__<span class="token string">'now'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。</p><p>本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator，可以定义如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call %s():'</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察上面的<code>log</code>，因为它是一个decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助Python的@语法，把decorator置于函数的定义处：</p><pre class="line-numbers language-python"><code class="language-python">@log<span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用<code>now()</code>函数，不仅会运行<code>now()</code>函数本身，还会在运行<code>now()</code>函数前打印一行日志：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">(</span><span class="token punctuation">)</span>call now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p><pre class="line-numbers language-python"><code class="language-python">now <span class="token operator">=</span> log<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于<code>log()</code>是一个decorator，返回一个函数，所以，原来的<code>now()</code>函数仍然存在，只是现在同名的<code>now</code>变量指向了新的函数，于是调用<code>now()</code>将执行新函数，即在<code>log()</code>函数中返回的<code>wrapper()</code>函数。</p><p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。在<code>wrapper()</code>函数内，首先打印日志，再紧接着调用原始函数。</p><p>如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。比如，要自定义log的文本：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s %s():'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> decorator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个3层嵌套的decorator用法如下：</p><pre class="line-numbers language-python"><code class="language-python">@log<span class="token punctuation">(</span><span class="token string">'execute'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2015-3-25'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">(</span><span class="token punctuation">)</span>execute now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>和两层嵌套的decorator相比，3层嵌套的效果是这样的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now <span class="token operator">=</span> log<span class="token punctuation">(</span><span class="token string">'execute'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们来剖析上面的语句，首先执行<code>log(&#39;execute&#39;)</code>，返回的是<code>decorator</code>函数，再调用返回的函数，参数是<code>now</code>函数，返回值最终是<code>wrapper</code>函数。</p><p>以上两种decorator的定义都没有问题，但还差最后一步。因为我们讲了函数也是对象，它有<code>__name__</code>等属性，但你去看经过decorator装饰之后的函数，它们的<code>__name__</code>已经从原来的<code>&#39;now&#39;</code>变成了<code>&#39;wrapper&#39;</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> now<span class="token punctuation">.</span>__name__<span class="token string">'wrapper'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为返回的那个<code>wrapper()</code>函数名字就是<code>&#39;wrapper&#39;</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>wrapper()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。</p><p>不需要编写<code>wrapper.__name__ = func.__name__</code>这样的代码，Python内置的<code>functools.wraps</code>就是干这个事的，所以，一个完整的decorator的写法如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call %s():'</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者针对带参数的decorator：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> functools<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>        @functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s %s():'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>text<span class="token punctuation">,</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        <span class="token keyword">return</span> wrapper    <span class="token keyword">return</span> decorator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>import functools</code>是导入<code>functools</code>模块。模块的概念稍候讲解。现在，只需记住在定义<code>wrapper()</code>的前面加上<code>@functools.wraps(func)</code>即可。</p><h4 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h4><p>Python的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。</p><p>在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下：</p><p><code>int()</code>函数可以把字符串转换为整数，当仅传入字符串时，<code>int()</code>函数默认按十进制转换：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> int<span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">)</span><span class="token number">12345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但<code>int()</code>函数还提供额外的<code>base</code>参数，默认值为<code>10</code>。如果传入<code>base</code>参数，就可以做N进制的转换：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> int<span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token number">5349</span><span class="token operator">>></span><span class="token operator">></span> int<span class="token punctuation">(</span><span class="token string">'12345'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token number">74565</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">int2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>x<span class="token punctuation">,</span> base<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，我们转换二进制就非常方便了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">)</span><span class="token number">64</span><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1010101'</span><span class="token punctuation">)</span><span class="token number">85</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> functools<span class="token operator">>></span><span class="token operator">></span> int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>int<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">)</span><span class="token number">64</span><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1010101'</span><span class="token punctuation">)</span><span class="token number">85</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，简单总结<code>functools.partial</code>的作用就是，把一个函数的某些参数给<code>固定住（也就是设置默认值）</code>，返回一个新的函数，调用这个新函数会更简单。</p><p>注意到上面的新的<code>int2</code>函数，仅仅是把<code>base</code>参数重新设定默认值为<code>2</code>，但也可以在函数调用时传入其他值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">1000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后，创建偏函数时，实际上可以接收函数对象、<code>*args</code>和<code>**kw</code>这3个参数，当传入：</p><pre class="line-numbers language-python"><code class="language-python">int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>int<span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上固定了int()函数的关键字参数<code>base</code>，也就是：</p><pre class="line-numbers language-python"><code class="language-python">int2<span class="token punctuation">(</span><span class="token string">'10010'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于：</p><pre class="line-numbers language-python"><code class="language-python">kw <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'base'</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span>int<span class="token punctuation">(</span><span class="token string">'10010'</span><span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当传入：</p><pre class="line-numbers language-python"><code class="language-python">max2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际上会把<code>10</code>作为<code>*args</code>的一部分自动加到左边，也就是：</p><pre class="line-numbers language-python"><code class="language-python">max2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于：</p><pre class="line-numbers language-python"><code class="language-python">args <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>max<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果为<code>10</code>。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）。</p><p>举个例子，一个<code>abc.py</code>的文件就是一个名字叫<code>abc</code>的模块，一个<code>xyz.py</code>的文件就是一个名字叫<code>xyz</code>的模块。</p><p>现在，假设我们的<code>abc</code>和<code>xyz</code>这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如<code>mycompany</code>，按照如下目录存放：</p><pre class="line-numbers language-ascii"><code class="language-ascii">mycompany├─ __init__.py├─ abc.py└─ xyz.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，<code>abc.py</code>模块的名字就变成了<code>mycompany.abc</code>，类似的，<code>xyz.py</code>的模块名变成了<code>mycompany.xyz</code>。</p><p>请注意，每一个包目录下面都会有一个<code>__init__.py</code>的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。<code>__init__.py</code>可以是空文件，也可以有Python代码，因为<code>__init__.py</code>本身就是一个模块，而它的模块名就是<code>mycompany</code>。</p><p>类似的，可以有多级目录，组成多级层次的包结构。比如如下的目录结构：</p><pre class="line-numbers language-ascii"><code class="language-ascii">mycompany ├─ web │  ├─ __init__.py │  ├─ utils.py │  └─ www.py ├─ __init__.py ├─ abc.py └─ utils.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件<code>www.py</code>的模块名就是<code>mycompany.web.www</code>，两个文件<code>utils.py</code>的模块名分别是<code>mycompany.utils</code>和<code>mycompany.web.utils</code>。</p><blockquote><p> 自己创建模块时要注意命名，不能和Python自带的模块名称冲突。例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块。</p></blockquote><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>Python本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。</p><p>我们以内建的<code>sys</code>模块为例，编写一个<code>hello</code>的模块：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token string">' a test module '</span>__author__ <span class="token operator">=</span> <span class="token string">'Michael Liao'</span><span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv    <span class="token keyword">if</span> len<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> len<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s!'</span> <span class="token operator">%</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Too many arguments!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第1行和第2行是标准注释，第1行注释可以让这个<code>hello.py</code>文件直接在Unix/Linux/Mac上运行，第2行注释表示.py文件本身使用标准UTF-8编码；</p><p>第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</p><p>第6行使用<code>__author__</code>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；</p><p>以上就是Python模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</p><p>后面开始就是真正的代码部分。</p><p>你可能注意到了，使用<code>sys</code>模块的第一步，就是导入该模块：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入<code>sys</code>模块后，我们就有了变量<code>sys</code>指向该模块，利用<code>sys</code>这个变量，就可以访问<code>sys</code>模块的所有功能。</p><p><code>sys</code>模块有一个<code>argv</code>变量，用list存储了命令行的所有参数。<code>argv</code>至少有一个元素，因为第一个参数永远是该.py文件的名称，例如：</p><p>运行<code>python3 hello.py</code>获得的<code>sys.argv</code>就是<code>[&#39;hello.py&#39;]</code>；</p><p>运行<code>python3 hello.py Michael</code>获得的<code>sys.argv</code>就是<code>[&#39;hello.py&#39;, &#39;Michael&#39;]</code>。</p><p>最后，注意到这两行代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们在命令行运行<code>hello</code>模块文件时，Python解释器把一个特殊变量<code>__name__</code>置为<code>__main__</code>，而如果在其他地方导入该<code>hello</code>模块时，<code>if</code>判断将失败，因此，这种<code>if</code>测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p><p>我们可以用命令行运行<code>hello.py</code>看看效果：</p><pre class="line-numbers language-python"><code class="language-python">$ python3 hello<span class="token punctuation">.</span>pyHello<span class="token punctuation">,</span> world!$ python hello<span class="token punctuation">.</span>py MichaelHello<span class="token punctuation">,</span> Michael!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果启动Python交互环境，再导入<code>hello</code>模块：</p><pre class="line-numbers language-python"><code class="language-python">$ python3Python <span class="token number">3.4</span><span class="token punctuation">.</span><span class="token number">3</span> <span class="token punctuation">(</span>v3<span class="token number">.4</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">9b73f1c3e601</span><span class="token punctuation">,</span> Feb <span class="token number">23</span> <span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">52</span><span class="token punctuation">:</span><span class="token number">03</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>GCC <span class="token number">4.2</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token punctuation">(</span>Apple Inc<span class="token punctuation">.</span> build <span class="token number">5666</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dot <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> on darwinType <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token operator">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> hello<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入时，没有打印<code>Hello, word!</code>，因为没有执行<code>test()</code>函数。</p><p>调用<code>hello.test()</code>时，才能打印出<code>Hello, word!</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span> world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过<code>_</code>前缀来实现的。</p><p>正常的函数和变量名是公开的（public），可以被直接引用，比如：<code>abc</code>，<code>x123</code>，<code>PI</code>等；</p><p>类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的<code>__author__</code>，<code>__name__</code>就是特殊变量，<code>hello</code>模块定义的文档注释也可以用特殊变量<code>__doc__</code>访问，我们自己的变量一般不要用这种变量名；</p><p>类似<code>_xxx</code>和<code>__xxx</code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如<code>_abc</code>，<code>__abc</code>等；</p><p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p><p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_private_1</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">_private_2</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hi, %s'</span> <span class="token operator">%</span> name<span class="token keyword">def</span> <span class="token function">greeting</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_1<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> _private_2<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在模块里公开<code>greeting()</code>函数，而把内部逻辑用private函数隐藏起来了，这样，调用<code>greeting()</code>函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p><p>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="面向对象技术简介"><a href="#面向对象技术简介" class="headerlink" title="面向对象技术简介"></a>面向对象技术简介</h3><blockquote><ul><li><strong>类(Class):</strong> 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li><li><strong>方法：</strong>类中定义的函数。</li><li><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li><li><strong>数据成员：</strong>类变量或者实例变量用于处理类及其实例对象的相关的数据。</li><li><strong>方法重写：</strong>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li><li><strong>局部变量：</strong>定义在方法中的变量，只作用于当前实例的类。</li><li><strong>实例变量：</strong>在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。</li><li><strong>继承：</strong>即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟”是一个（is-a）”关系（例图，Dog是一个Animal）。</li><li><strong>实例化：</strong>创建一个类的实例，类的具体对象。</li><li><strong>对象：</strong>通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li></ul></blockquote><p>面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p><p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p><p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p><p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p><p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p><p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个dict表示：</p><pre class="line-numbers language-python"><code class="language-python">std1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">98</span> <span class="token punctuation">}</span>std2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">81</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> std<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是<code>Student</code>这种数据类型应该被视为一个对象，这个对象拥有<code>name</code>和<code>score</code>这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个<code>print_score</code>消息，让对象自己把自己的数据打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。面向对象的程序写出来就像这样：</p><pre class="line-numbers language-python"><code class="language-python">bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span>lisa <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Lisa Simpson'</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span>bart<span class="token punctuation">.</span>print_score<span class="token punctuation">(</span><span class="token punctuation">)</span>lisa<span class="token punctuation">.</span>print_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。Class是一种抽象概念，比如我们定义的Class——Student，是指学生这个概念，而实例（Instance）则是一个个具体的Student，比如，Bart Simpson和Lisa Simpson是两个具体的Student。</p><p>所以，面向对象的设计思想是抽象出Class，根据Class创建Instance。</p><p>面向对象的抽象程度又比函数要高，因为一个Class既包含数据，又包含操作数据的方法。</p><blockquote><p>数据封装、继承和多态是面向对象的三大特点</p></blockquote><h3 id="类和实例"><a href="#类和实例" class="headerlink" title="类和实例"></a>类和实例</h3><p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><p>仍以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p><p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过类名+()实现的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student object at <span class="token number">0x10a67a590</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> Student<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Student'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，变量<code>bart</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x10a67a590</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p><p>可以自由地给一个实例变量绑定属性，比如，给实例<code>bart</code>绑定一个<code>name</code>属性：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Bart Simpson'</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>name<span class="token string">'Bart Simpson'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 注意：特殊方法“<strong>init</strong>”前后分别有两个下划线！！！</p></blockquote><p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p><p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>name<span class="token string">'Bart Simpson'</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">59</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p><h3 id="类的专有方法："><a href="#类的专有方法：" class="headerlink" title="类的专有方法："></a>类的专有方法：</h3><blockquote><ul><li><strong><strong>init</strong> :</strong> 构造函数，在生成对象时调用</li><li><strong><strong>del</strong> :</strong> 析构函数，释放对象时使用</li><li><strong><strong>repr</strong> :</strong> 打印，转换</li><li><strong><strong>setitem</strong> :</strong> 按照索引赋值</li><li><strong><strong>getitem</strong>:</strong> 按照索引获取值</li><li><strong><strong>len</strong>:</strong> 获得长度</li><li><strong><strong>cmp</strong>:</strong> 比较运算</li><li><strong><strong>call</strong>:</strong> 函数调用</li><li><strong><strong>add</strong>:</strong> 加运算</li><li><strong><strong>sub</strong>:</strong> 减运算</li><li><strong><strong>mul</strong>:</strong> 乘运算</li><li><strong><strong>truediv</strong>:</strong> 除运算</li><li><strong><strong>mod</strong>:</strong> 求余运算</li><li><strong><strong>pow</strong>:</strong> 乘方</li></ul></blockquote><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">.</span>name<span class="token punctuation">,</span> std<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> print_score<span class="token punctuation">(</span>bart<span class="token punctuation">)</span>Bart Simpson<span class="token punctuation">:</span> <span class="token number">59</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>print_score<span class="token punctuation">(</span><span class="token punctuation">)</span>Bart Simpson<span class="token punctuation">:</span> <span class="token number">59</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p><p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_grade</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">90</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'A'</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>score <span class="token operator">>=</span> <span class="token number">60</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'B'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'C'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>类是创建实例的模板，而实例则是一个一个具体的对象，各个实例拥有的数据都互相独立，互不影响；</p><p>方法就是与实例绑定的函数，和普通函数不同，方法可以直接访问实例的数据；</p><p>通过在实例上调用方法，我们就直接操作了对象内部的数据，但无需知道方法内部的实现细节。</p><p>和静态语言不同，Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同。</p></blockquote><h3 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h3><p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p><p>但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的<code>name</code>、<code>score</code>属性：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">59</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">99</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>score<span class="token number">99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score    <span class="token keyword">def</span> <span class="token function">print_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__score<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__nameTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> object has no attribute <span class="token string">'__name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p><p>但是如果外部代码要获取name和score怎么办？可以给Student类增加<code>get_name</code>和<code>get_score</code>这样的方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__name    <span class="token keyword">def</span> <span class="token function">get_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果又要允许外部代码修改score怎么办？可以再给Student类增加<code>set_score</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也许会问，原先那种直接通过<code>bart.score = 99</code>也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'bad score'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p><p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p><p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>_Student__name<span class="token string">'Bart Simpson'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p><p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p><p>最后注意下面的这种<em>错误写法</em>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bart Simpson'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Bart Simpson'</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__name <span class="token operator">=</span> <span class="token string">'New Name'</span> <span class="token comment" spellcheck="true"># 设置__name变量！</span><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>__name<span class="token string">'New Name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和class内部的<code>__name</code>变量<em>不是</em>一个变量！内部的<code>__name</code>变量已经被Python解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。不信试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> bart<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># get_name()内部返回self.__name</span><span class="token string">'Bart Simpson'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="继承和多态"><a href="#继承和多态" class="headerlink" title="继承和多态"></a>继承和多态</h3><p>在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p><p>比如，我们已经编写了一个名为<code>Animal</code>的class，有一个<code>run()</code>方法可以直接打印：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们需要编写<code>Dog</code>和<code>Cat</code>类时，就可以直接从<code>Animal</code>类继承：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>Dog</code>来说，<code>Animal</code>就是它的父类，对于<code>Animal</code>来说，<code>Dog</code>就是它的子类。<code>Cat</code>和<code>Dog</code>类似。</p><p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于<code>Animial</code>实现了<code>run()</code>方法，因此，<code>Dog</code>和<code>Cat</code>作为它的子类，什么事也没干，就自动拥有了<code>run()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python">dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-python"><code class="language-python">Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然，也可以对子类增加一些方法，比如Dog类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">eat</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Eating meat...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是<code>Dog</code>还是<code>Cat</code>，它们<code>run()</code>的时候，显示的都是<code>Animal is running...</code>，符合逻辑的做法是分别显示<code>Dog is running...</code>和<code>Cat is running...</code>，因此，对<code>Dog</code>和<code>Cat</code>类改进如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次运行，结果如下：</p><pre class="line-numbers language-python"><code class="language-python">Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。这样，我们就获得了继承的另一个好处：多态。</p><p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># a是list类型</span>b <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># b是Animal类型</span>c <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># c是Dog类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>b<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>c<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看来<code>a</code>、<code>b</code>、<code>c</code>确实对应着<code>list</code>、<code>Animal</code>、<code>Dog</code>这3种类型。</p><p>但是等等，试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>c<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看来<code>c</code>不仅仅是<code>Dog</code>，<code>c</code>还是<code>Animal</code>！</p><p>不过仔细想想，这是有道理的，因为<code>Dog</code>是从<code>Animal</code>继承下来的，当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p><p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>b<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p><p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Animal <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Dog <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Cat <span class="token keyword">is</span> running<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tortoise</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Tortoise is running slowly...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> run_twice<span class="token punctuation">(</span>Tortoise<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Tortoise <span class="token keyword">is</span> running slowly<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Tortoise <span class="token keyword">is</span> running slowly<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p><p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p><p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p><p>对扩展开放：允许新增<code>Animal</code>子类；</p><p>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</p><p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210706110616211.png" alt="image-20210706110616211"></p><p>==静态语言 vs 动态语言==</p><p>对于静态语言（例如Java）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p><p>对于Python这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Start...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p><blockquote><p>继承可以把父类的所有功能都直接拿过来，这样就不必重零做起，子类只需要新增自己特有的方法，也可以把父类不适合的方法覆盖重写。</p><p>动态语言的鸭子类型特点决定了继承不像静态语言那样是必须的。</p></blockquote><h3 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h3><p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p><h4 id="使用type"><a href="#使用type" class="headerlink" title="使用type()"></a>使用type()</h4><p>首先，我们来判断对象类型，使用<code>type()</code>函数：</p><p>基本类型都可以用<code>type()</code>判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token operator">&lt;</span>type<span class="token punctuation">(</span>None<span class="token punctuation">)</span> <span class="token string">'NoneType'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个变量指向函数或者类，也可以用<code>type()</code>判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>abs<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'builtin_function_or_method'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Animal'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是<code>type()</code>函数返回的是什么类型呢？它返回对应的Class类型。如果我们要在<code>if</code>语句中判断，就需要比较两个变量的type类型是否相同：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token operator">==</span>type<span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token operator">==</span>int<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token operator">==</span>type<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token operator">==</span>str<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token operator">==</span>type<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断基本数据类型可以直接写<code>int</code>，<code>str</code>等，但如果要判断一个对象是否是函数怎么办？可以使用<code>types</code>模块中定义的常量：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> types<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>FunctionType<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>abs<span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>BuiltinFunctionType<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>LambdaType<span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>types<span class="token punctuation">.</span>GeneratorType<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用isinstance"><a href="#使用isinstance" class="headerlink" title="使用isinstance()"></a>使用isinstance()</h4><p>对于class的继承关系来说，使用<code>type()</code>就很不方便。我们要判断class的类型，可以使用<code>isinstance()</code>函数。</p><p>我们回顾上次的例子，如果继承关系是：</p><pre class="line-numbers language-python"><code class="language-python">object <span class="token operator">-</span><span class="token operator">></span> Animal <span class="token operator">-</span><span class="token operator">></span> Dog <span class="token operator">-</span><span class="token operator">></span> Husky<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么，<code>isinstance()</code>就可以告诉我们，一个对象是否是某种类型。先创建3种类型的对象：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> h <span class="token operator">=</span> Husky<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后，判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>h<span class="token punctuation">,</span> Husky<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>没有问题，因为<code>h</code>变量指向的就是Husky对象。</p><p>再判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>h<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>h</code>虽然自身是Husky类型，但由于Husky是从Dog继承下来的，所以，<code>h</code>也还是Dog类型。换句话说，<code>isinstance()</code>判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</p><p>因此，我们可以确信，<code>h</code>还是Animal类型：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>h<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同理，实际类型是Dog的<code>d</code>也是Animal类型：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>d<span class="token punctuation">,</span> Dog<span class="token punctuation">)</span> <span class="token operator">and</span> isinstance<span class="token punctuation">(</span>d<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是，<code>d</code>不是Husky类型：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>d<span class="token punctuation">,</span> Husky<span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>能用<code>type()</code>判断的基本类型也可以用<code>isinstance()</code>判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span>b<span class="token string">'a'</span><span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> isinstance<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。</p><h4 id="使用dir"><a href="#使用dir" class="headerlink" title="使用dir()"></a>使用dir()</h4><p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dir<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'__add__'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'capitalize'</span><span class="token punctuation">,</span> <span class="token string">'casefold'</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token string">'zfill'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>类似<code>__xxx__</code>的属性和方法在Python中都是有特殊用途的，比如<code>__len__</code>方法返回长度。在Python中，如果你调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法，所以，下面的代码是等价的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span><span class="token string">'ABC'</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'ABC'</span><span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们自己写的类，如果也想用<code>len(myObj)</code>的话，就自己写一个<code>__len__()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">MyDog</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> dog <span class="token operator">=</span> MyDog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> len<span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的都是普通属性或方法，比如<code>lower()</code>返回小写的字符串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'ABC'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'abc'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>仅仅把属性和方法列出来是不够的，配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">MyObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token operator">*</span> self<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> obj <span class="token operator">=</span> MyObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着，可以测试该对象的属性：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> hasattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有属性'x'吗？</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> obj<span class="token punctuation">.</span>x<span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> hasattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有属性'y'吗？</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> setattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 设置一个属性'y'</span><span class="token operator">>></span><span class="token operator">></span> hasattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有属性'y'吗？</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取属性'y'</span><span class="token number">19</span><span class="token operator">>></span><span class="token operator">></span> obj<span class="token punctuation">.</span>y <span class="token comment" spellcheck="true"># 获取属性'y'</span><span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果试图获取不存在的属性，会抛出AttributeError的错误：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取属性'z'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'MyObject'</span> object has no attribute <span class="token string">'z'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以传入一个default参数，如果属性不存在，就返回默认值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取属性'z'，如果不存在，返回默认值404</span><span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以获得对象的方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> hasattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'power'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 有属性'power'吗？</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'power'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取属性'power'</span><span class="token operator">&lt;</span>bound method MyObject<span class="token punctuation">.</span>power of <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>MyObject object at <span class="token number">0x10077a6a0</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> fn <span class="token operator">=</span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'power'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取属性'power'并赋值到变量fn</span><span class="token operator">>></span><span class="token operator">></span> fn <span class="token comment" spellcheck="true"># fn指向obj.power</span><span class="token operator">&lt;</span>bound method MyObject<span class="token punctuation">.</span>power of <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>MyObject object at <span class="token number">0x10077a6a0</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span> fn<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 调用fn()与调用obj.power()是一样的</span><span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过内置的一系列函数，我们可以对任意一个Python对象进行剖析，拿到其内部的数据。要注意的是，只有在不知道对象信息的时候，我们才会去获取对象信息。如果可以直接写：</p><pre class="line-numbers language-python"><code class="language-python">sum <span class="token operator">=</span> obj<span class="token punctuation">.</span>x <span class="token operator">+</span> obj<span class="token punctuation">.</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就不要写：</p><pre class="line-numbers language-python"><code class="language-python">sum <span class="token operator">=</span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span> <span class="token operator">+</span> getattr<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个正确的用法的例子如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">readImage</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">'read'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> readData<span class="token punctuation">(</span>fp<span class="token punctuation">)</span>    <span class="token keyword">return</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>假设我们希望从文件流fp中读取图像，我们首先要判断该fp对象是否存在read方法，如果存在，则该对象是一个流，如果不存在，则无法读取。<code>hasattr()</code>就派上了用场。</p><p>请注意，在Python这类动态语言中，根据鸭子类型，有<code>read()</code>方法，不代表该fp对象就是一个文件流，它也可能是网络流，也可能是内存中的一个字节流，但只要<code>read()</code>方法返回的是有效的图像数据，就不影响读取图像的功能。</p><h3 id="实例属性和类属性"><a href="#实例属性和类属性" class="headerlink" title="实例属性和类属性"></a>实例属性和类属性</h3><p>由于Python是动态语言，根据类创建的实例可以任意绑定属性。</p><p>给实例绑定属性的方法是通过实例变量，或者通过<code>self</code>变量：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> names <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">90</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果<code>Student</code>类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归<code>Student</code>类所有：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'Student'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     name <span class="token operator">=</span> <span class="token string">'Student'</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建实例s</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span>Student<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印类的name属性</span>Student<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span> <span class="token comment" spellcheck="true"># 给实例绑定name属性</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span>Michael<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 但是类属性并未消失，用Student.name仍然可以访问</span>Student<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> s<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true"># 如果删除实例的name属性</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span>Student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的例子可以看出，在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p><h2 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h2><h3 id="使用slots"><a href="#使用slots" class="headerlink" title="使用slots"></a>使用<strong>slots</strong></h3><p>正常情况下，当我们定义了一个class，创建了一个class的实例后，我们可以给该实例绑定任何属性和方法，这就是动态语言的灵活性。先定义class：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，尝试给实例绑定一个属性：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span> <span class="token comment" spellcheck="true"># 动态给实例绑定一个属性</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>Michael<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以尝试给实例绑定一个方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">set_age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 定义一个函数作为实例方法</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> types <span class="token keyword">import</span> MethodType<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_age <span class="token operator">=</span> MethodType<span class="token punctuation">(</span>set_age<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 给实例绑定一个方法</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 调用实例方法</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age <span class="token comment" spellcheck="true"># 测试结果</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，给一个实例绑定的方法，对另一个实例是不起作用的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建新的实例</span><span class="token operator">>></span><span class="token operator">></span> s2<span class="token punctuation">.</span>set_age<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 尝试调用方法</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> object has no attribute <span class="token string">'set_age'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了给所有实例都绑定方法，可以给class绑定方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     self<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> Student<span class="token punctuation">.</span>set_score <span class="token operator">=</span> set_score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给class绑定方法后，所有实例均可调用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score<span class="token number">100</span><span class="token operator">>></span><span class="token operator">></span> s2<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s2<span class="token punctuation">.</span>score<span class="token number">99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常情况下，上面的<code>set_score</code>方法可以直接定义在class中，但动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现。</p><h4 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h4><p>但是，如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加<code>name</code>和<code>age</code>属性。</p><p>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 用tuple定义允许绑定的属性名称</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后，我们试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建新的实例</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span> <span class="token comment" spellcheck="true"># 绑定属性'name'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span> <span class="token comment" spellcheck="true"># 绑定属性'age'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">99</span> <span class="token comment" spellcheck="true"># 绑定属性'score'</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> object has no attribute <span class="token string">'score'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>&#39;score&#39;</code>没有被放到<code>__slots__</code>中，所以不能绑定<code>score</code>属性，试图绑定<code>score</code>将得到<code>AttributeError</code>的错误。</p><p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">GraduateStudent</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> g <span class="token operator">=</span> GraduateStudent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> g<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p><h3 id="使用-property"><a href="#使用-property" class="headerlink" title="使用@property"></a>使用@property</h3><p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：</p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这显然不合逻辑。为了限制score的范围，可以通过一个<code>set_score()</code>方法来设置成绩，再通过一个<code>get_score()</code>来获取成绩，这样，在<code>set_score()</code>方法里，就可以检查参数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>_score    <span class="token keyword">def</span> <span class="token function">set_score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>value<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must be an integer!'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> value <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must between 0 ~ 100!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_score <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，对任意的Student实例进行操作，就不能随心所欲地设置score了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ok!</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>get_score<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">60</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>set_score<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ValueError<span class="token punctuation">:</span> score must between <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">100</span>!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p><p>有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！</p><p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @property    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_score    @score<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>value<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must be an integer!'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> value <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'score must between 0 ~ 100!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_score <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@property</code>的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">60</span> <span class="token comment" spellcheck="true"># OK，实际转化为s.set_score(60)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token comment" spellcheck="true"># OK，实际转化为s.get_score()</span><span class="token number">60</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">9999</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ValueError<span class="token punctuation">:</span> score must between <span class="token number">0</span> <span class="token operator">~</span> <span class="token number">100</span>!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到这个神奇的<code>@property</code>，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。</p><p>还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @property    <span class="token keyword">def</span> <span class="token function">birth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_birth    @birth<span class="token punctuation">.</span>setter    <span class="token keyword">def</span> <span class="token function">birth</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_birth <span class="token operator">=</span> value    @property    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2015</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>_birth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的<code>birth</code>是可读写属性，而<code>age</code>就是一个<em>只读</em>属性，因为<code>age</code>可以根据<code>birth</code>和当前时间计算出来。</p><p>要特别注意：属性的方法名不要和实例变量重名。例如，以下的代码是错误的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 方法名称和实例变量均为birth:</span>    @property    <span class="token keyword">def</span> <span class="token function">birth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>birth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为调用<code>s.birth</code>时，首先转换为方法调用，在执行<code>return self.birth</code>时，又视为访问<code>self</code>的属性，于是又转换为方法调用，造成无限递归，最终导致栈溢出报错<code>RecursionError</code>。</p><p><code>@property</code>广泛应用在类的定义中，可以让调用者写出简短的代码，同时保证对参数进行必要的检查，这样，程序运行时就减少了出错的可能性。</p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>采用多重继承。首先，主要的类层次仍按照哺乳类和鸟类设计：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 大类:</span><span class="token keyword">class</span> <span class="token class-name">Mammal</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 各种动物:</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Mammal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Bat</span><span class="token punctuation">(</span>Mammal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Parrot</span><span class="token punctuation">(</span>Bird<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Ostrich</span><span class="token punctuation">(</span>Bird<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，我们要给动物再加上<code>Runnable</code>和<code>Flyable</code>的功能，只需要先定义好<code>Runnable</code>和<code>Flyable</code>的类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Flyable</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Flying...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于需要<code>Runnable</code>功能的动物，就多继承一个<code>Runnable</code>，例如<code>Dog</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Mammal<span class="token punctuation">,</span> Runnable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于需要<code>Flyable</code>功能的动物，就多继承一个<code>Flyable</code>，例如<code>Bat</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Bat</span><span class="token punctuation">(</span>Mammal<span class="token punctuation">,</span> Flyable<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p><p>==MixIn==</p><p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<code>Ostrich</code>继承自<code>Bird</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Ostrich</code>除了继承自<code>Bird</code>外，再同时继承<code>Runnable</code>。这种设计通常称之为MixIn。</p><p>为了更好地看出继承关系，我们把<code>Runnable</code>和<code>Flyable</code>改为<code>RunnableMixIn</code>和<code>FlyableMixIn</code>。类似的，你还可以定义出肉食动物<code>CarnivorousMixIn</code>和植食动物<code>HerbivoresMixIn</code>，让某个动物同时拥有好几个MixIn：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Mammal<span class="token punctuation">,</span> RunnableMixIn<span class="token punctuation">,</span> CarnivorousMixIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。</p><p>Python自带的很多库也使用了MixIn。举个例子，Python自带了<code>TCPServer</code>和<code>UDPServer</code>这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由<code>ForkingMixIn</code>和<code>ThreadingMixIn</code>提供。通过组合，我们就可以创造出合适的服务来。</p><p>比如，编写一个多进程模式的TCP服务，定义如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyTCPServer</span><span class="token punctuation">(</span>TCPServer<span class="token punctuation">,</span> ForkingMixIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编写一个多线程模式的UDP服务，定义如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyUDPServer</span><span class="token punctuation">(</span>UDPServer<span class="token punctuation">,</span> ThreadingMixIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果你打算搞一个更先进的协程模型，可以编写一个<code>CoroutineMixIn</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyTCPServer</span><span class="token punctuation">(</span>TCPServer<span class="token punctuation">,</span> CoroutineMixIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。</p><h3 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h3><p>看到类似<code>__slots__</code>这种形如<code>__xxx__</code>的变量或者函数名就要注意，这些在Python中是有特殊用途的。</p><p><code>__slots__</code>我们已经知道怎么用了，<code>__len__()</code>方法我们也知道是为了能让class作用于<code>len()</code>函数。</p><p>除此之外，Python的class中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p><h4 id="str"><a href="#str" class="headerlink" title="__str__"></a><code>__str__</code></h4><p>我们先定义一个<code>Student</code>类，打印一个实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student object at <span class="token number">0x109afb190</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印出一堆<code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p><p>怎么才能打印得好看呢？只需要定义好<code>__str__()</code>方法，返回一个好看的字符串就可以了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> <span class="token string">'Student object (name: %s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Student object <span class="token punctuation">(</span>name<span class="token punctuation">:</span> Michael<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p><p>但是细心的朋友会发现直接敲变量不用<code>print</code>，打印出来的实例还是不好看：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student object at <span class="token number">0x109afb310</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是因为直接显示变量调用的不是<code>__str__()</code>，而是<code>__repr__()</code>，两者的区别是<code>__str__()</code>返回用户看到的字符串，而<code>__repr__()</code>返回程序开发者看到的字符串，也就是说，<code>__repr__()</code>是为调试服务的。</p><p>解决办法是再定义一个<code>__repr__()</code>。但是通常<code>__str__()</code>和<code>__repr__()</code>代码都是一样的，所以，有个偷懒的写法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Student object (name=%s)'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name    __repr__ <span class="token operator">=</span> __str__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iter"><a href="#iter" class="headerlink" title="__iter__"></a><code>__iter__</code></h4><p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p><p>我们以斐波那契数列为例，写一个Fib类，可以作用于for循环：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 初始化两个计数器a，b</span>    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self <span class="token comment" spellcheck="true"># 实例本身就是迭代对象，故返回自己</span>    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a<span class="token punctuation">,</span> self<span class="token punctuation">.</span>b <span class="token operator">=</span> self<span class="token punctuation">.</span>b<span class="token punctuation">,</span> self<span class="token punctuation">.</span>a <span class="token operator">+</span> self<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true"># 计算下一个值</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>a <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 退出循环的条件</span>            <span class="token keyword">raise</span> StopIteration<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true"># 返回下一个值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，试试把Fib实例作用于for循环：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> n <span class="token keyword">in</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">46368</span><span class="token number">75025</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a><code>__getitem__</code></h4><p>Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> <span class="token string">'Fib'</span> object does <span class="token operator">not</span> support indexing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>要表现得像list那样按照下标取出元素，需要实现<code>__getitem__()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，就可以按下标访问数列的任意一项了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token number">89</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token number">573147844013817084101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是list有个神奇的切片方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对于Fib却报错。原因是<code>__getitem__()</code>传入的参数可能是一个int，也可能是一个切片对象<code>slice</code>，所以要做判断：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>n<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># n是索引</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b            <span class="token keyword">return</span> a        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>n<span class="token punctuation">,</span> slice<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># n是切片</span>            start <span class="token operator">=</span> n<span class="token punctuation">.</span>start            stop <span class="token operator">=</span> n<span class="token punctuation">.</span>stop            <span class="token keyword">if</span> start <span class="token keyword">is</span> None<span class="token punctuation">:</span>                start <span class="token operator">=</span> <span class="token number">0</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>            L <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> x <span class="token operator">>=</span> start<span class="token punctuation">:</span>                    L<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>                a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b            <span class="token keyword">return</span> L<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在试试Fib的切片：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> Fib<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是没有对step参数作处理：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也没有对负数作处理，所以，要正确实现一个<code>__getitem__()</code>还是有很多工作要做的。</p><p>此外，如果把对象看成<code>dict</code>，<code>__getitem__()</code>的参数也可能是一个可以作key的object，例如<code>str</code>。</p><p>与之对应的是<code>__setitem__()</code>方法，把对象视作list或dict来对集合赋值。最后，还有一个<code>__delitem__()</code>方法，用于删除某个元素。</p><p>总之，通过上面的方法，我们自己定义的类表现得和Python自带的list、tuple、dict没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p><h4 id="getattr"><a href="#getattr" class="headerlink" title="__getattr__"></a><code>__getattr__</code></h4><p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义<code>Student</code>类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>name</code>属性，没问题，但是，调用不存在的<code>score</code>属性，就有问题了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span>Michael<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>score<span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> object has no attribute <span class="token string">'score'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误信息很清楚地告诉我们，没有找到<code>score</code>这个attribute。</p><p>要避免这个错误，除了可以加上一个<code>score</code>属性外，Python还有另一个机制，那就是写一个<code>__getattr__()</code>方法，动态返回一个属性。修改如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Michael'</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">'score'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用不存在的属性时，比如<code>score</code>，Python解释器会试图调用<code>__getattr__(self, &#39;score&#39;)</code>来尝试获得属性，这样，我们就有机会返回<code>score</code>的值：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name<span class="token string">'Michael'</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score<span class="token number">99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回函数也是完全可以的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">'age'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是调用方式要变为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意，只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已有的属性，比如<code>name</code>，不会在<code>__getattr__</code>中查找。</p><p>此外，注意到任意调用如<code>s.abc</code>都会返回<code>None</code>，这是因为我们定义的<code>__getattr__</code>默认返回就是<code>None</code>。要让class只响应特定的几个属性，我们就要按照约定，抛出<code>AttributeError</code>的错误：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> attr<span class="token operator">==</span><span class="token string">'age'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token number">25</span>        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">'\'Student\' object has no attribute \'%s\''</span> <span class="token operator">%</span> attr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p><p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p><p>举个例子：</p><p>现在很多网站都搞REST API，比如新浪微博、豆瓣啥的，调用API的URL类似：</p><ul><li><a href="http://api.server/user/friends" target="_blank" rel="noopener">http://api.server/user/friends</a></li><li><a href="http://api.server/user/timeline/list" target="_blank" rel="noopener">http://api.server/user/timeline/list</a></li></ul><p>如果要写SDK，给每个URL对应的API都写一个方法，那得累死，而且，API一旦改动，SDK也要改。</p><p>利用完全动态的<code>__getattr__</code>，我们可以写出一个链式调用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_path <span class="token operator">=</span> path    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Chain<span class="token punctuation">(</span><span class="token string">'%s/%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>_path<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_path    __repr__ <span class="token operator">=</span> __str__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>status<span class="token punctuation">.</span>user<span class="token punctuation">.</span>timeline<span class="token punctuation">.</span>list<span class="token string">'/status/user/timeline/list'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变！</p><p>还有些REST API会把参数放到URL中，比如GitHub的API：</p><pre class="line-numbers language-python"><code class="language-python">GET <span class="token operator">/</span>users<span class="token operator">/</span><span class="token punctuation">:</span>user<span class="token operator">/</span>repos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用时，需要把<code>:user</code>替换为实际用户名。如果我们能写出这样的链式调用：</p><pre class="line-numbers language-python"><code class="language-python">Chain<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>users<span class="token punctuation">(</span><span class="token string">'michael'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>repos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以非常方便地调用API了。有兴趣的童鞋可以试试写出来。</p><h4 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h4><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用<code>instance.method()</code>来调用。能不能直接在实例本身上调用呢？在Python中，答案是肯定的。</p><p>任何类，只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。请看示例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is %s.'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方式如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Michael'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># self参数不要传入</span>My name <span class="token keyword">is</span> Michael<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>__call__()</code>还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p><p>如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p><p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个<code>Callable</code>对象，比如函数和我们上面定义的带有<code>__call__()</code>的类实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> callable<span class="token punctuation">(</span>Student<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> callable<span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> callable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> callable<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> callable<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>callable()</code>函数，我们就可以判断一个对象是否是“可调用”对象。</p><h3 id="使用枚举类"><a href="#使用枚举类" class="headerlink" title="使用枚举类"></a>使用枚举类</h3><p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份：</p><pre class="line-numbers language-python"><code class="language-python">JAN <span class="token operator">=</span> <span class="token number">1</span>FEB <span class="token operator">=</span> <span class="token number">2</span>MAR <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>NOV <span class="token operator">=</span> <span class="token number">11</span>DEC <span class="token operator">=</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好处是简单，缺点是类型是<code>int</code>，并且仍然是变量。</p><p>更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了<code>Enum</code>类来实现这个功能：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> EnumMonth <span class="token operator">=</span> Enum<span class="token punctuation">(</span><span class="token string">'Month'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Jan'</span><span class="token punctuation">,</span> <span class="token string">'Feb'</span><span class="token punctuation">,</span> <span class="token string">'Mar'</span><span class="token punctuation">,</span> <span class="token string">'Apr'</span><span class="token punctuation">,</span> <span class="token string">'May'</span><span class="token punctuation">,</span> <span class="token string">'Jun'</span><span class="token punctuation">,</span> <span class="token string">'Jul'</span><span class="token punctuation">,</span> <span class="token string">'Aug'</span><span class="token punctuation">,</span> <span class="token string">'Sep'</span><span class="token punctuation">,</span> <span class="token string">'Oct'</span><span class="token punctuation">,</span> <span class="token string">'Nov'</span><span class="token punctuation">,</span> <span class="token string">'Dec'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样我们就获得了<code>Month</code>类型的枚举类，可以直接使用<code>Month.Jan</code>来引用一个常量，或者枚举它的所有成员：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> name<span class="token punctuation">,</span> member <span class="token keyword">in</span> Month<span class="token punctuation">.</span>__members__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'=>'</span><span class="token punctuation">,</span> member<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> member<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>value</code>属性则是自动赋给成员的<code>int</code>常量，默认从<code>1</code>开始计数。</p><p>如果需要更精确地控制枚举类型，可以从<code>Enum</code>派生出自定义类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> enum <span class="token keyword">import</span> Enum<span class="token punctuation">,</span> unique@unique<span class="token keyword">class</span> <span class="token class-name">Weekday</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    Sun <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># Sun的value被设定为0</span>    Mon <span class="token operator">=</span> <span class="token number">1</span>    Tue <span class="token operator">=</span> <span class="token number">2</span>    Wed <span class="token operator">=</span> <span class="token number">3</span>    Thu <span class="token operator">=</span> <span class="token number">4</span>    Fri <span class="token operator">=</span> <span class="token number">5</span>    Sat <span class="token operator">=</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@unique</code>装饰器可以帮助我们检查保证没有重复值。</p><p>访问这些枚举类型可以有若干种方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> day1 <span class="token operator">=</span> Weekday<span class="token punctuation">.</span>Mon<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>day1<span class="token punctuation">)</span>Weekday<span class="token punctuation">.</span>Mon<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span>Tue<span class="token punctuation">)</span>Weekday<span class="token punctuation">.</span>Tue<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">[</span><span class="token string">'Tue'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Weekday<span class="token punctuation">.</span>Tue<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">.</span>Tue<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>day1 <span class="token operator">==</span> Weekday<span class="token punctuation">.</span>Mon<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>day1 <span class="token operator">==</span> Weekday<span class="token punctuation">.</span>Tue<span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Weekday<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Weekday<span class="token punctuation">.</span>Mon<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>day1 <span class="token operator">==</span> Weekday<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> Weekday<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ValueError<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token keyword">is</span> <span class="token operator">not</span> a valid Weekday<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> name<span class="token punctuation">,</span> member <span class="token keyword">in</span> Weekday<span class="token punctuation">.</span>__members__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'=>'</span><span class="token punctuation">,</span> member<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Sun <span class="token operator">=</span><span class="token operator">></span> Weekday<span class="token punctuation">.</span>SunMon <span class="token operator">=</span><span class="token operator">></span> Weekday<span class="token punctuation">.</span>MonTue <span class="token operator">=</span><span class="token operator">></span> Weekday<span class="token punctuation">.</span>TueWed <span class="token operator">=</span><span class="token operator">></span> Weekday<span class="token punctuation">.</span>WedThu <span class="token operator">=</span><span class="token operator">></span> Weekday<span class="token punctuation">.</span>ThuFri <span class="token operator">=</span><span class="token operator">></span> Weekday<span class="token punctuation">.</span>FriSat <span class="token operator">=</span><span class="token operator">></span> Weekday<span class="token punctuation">.</span>Sat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。</p><h3 id="使用元类"><a href="#使用元类" class="headerlink" title="使用元类"></a>使用元类</h3><h4 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h4><p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。</p><p>比方说我们要定义一个<code>Hello</code>的class，就写一个<code>hello.py</code>模块：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s.'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当Python解释器载入<code>hello</code>模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个<code>Hello</code>的class对象，测试如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> hello <span class="token keyword">import</span> Hello<span class="token operator">>></span><span class="token operator">></span> h <span class="token operator">=</span> Hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> h<span class="token punctuation">.</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span> world<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>Hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'hello.Hello'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>type()</code>函数可以查看一个类型或变量的类型，<code>Hello</code>是一个class，它的类型就是<code>type</code>，而<code>h</code>是一个实例，它的类型就是class <code>Hello</code>。</p><p>我们说class的定义是运行时动态创建的，而创建class的方法就是使用<code>type()</code>函数。</p><p><code>type()</code>函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过<code>type()</code>函数创建出<code>Hello</code>类，而无需通过<code>class Hello(object)...</code>的定义：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 先定义函数</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s.'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> Hello <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">(</span>hello<span class="token operator">=</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 创建Hello class</span><span class="token operator">>></span><span class="token operator">></span> h <span class="token operator">=</span> Hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> h<span class="token punctuation">.</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span>Hello<span class="token punctuation">,</span> world<span class="token punctuation">.</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>Hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'type'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'__main__.Hello'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要创建一个class对象，<code>type()</code>函数依次传入3个参数：</p><ol><li>class的名称；</li><li>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</li><li>class的方法名称与函数绑定，这里我们把函数<code>fn</code>绑定到方法名<code>hello</code>上。</li></ol><p>通过<code>type()</code>函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用<code>type()</code>函数创建出class。</p><p>正常情况下，我们都用<code>class Xxx...</code>来定义类，但是，<code>type()</code>函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。</p><h4 id="metaclass"><a href="#metaclass" class="headerlink" title="metaclass"></a>metaclass</h4><p>除了使用<code>type()</code>动态创建类以外，要控制类的创建行为，还可以使用metaclass。</p><p>metaclass，直译为元类，简单的解释就是：</p><p>当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。</p><p>但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。</p><p>连接起来就是：先定义metaclass，就可以创建类，最后创建实例。</p><p>所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。</p><p>metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。正常情况下，你不会碰到需要使用metaclass的情况，所以，以下内容看不懂也没关系，因为基本上你不会用到。</p><p>我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个<code>add</code>方法：</p><p>定义<code>ListMetaclass</code>，按照默认习惯，metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># metaclass是类的模板，所以必须从`type`类型派生：</span><span class="token keyword">class</span> <span class="token class-name">ListMetaclass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs<span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> self<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        <span class="token keyword">return</span> type<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了ListMetaclass，我们在定义类的时候还要指示使用ListMetaclass来定制类，传入关键字参数<code>metaclass</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> metaclass<span class="token operator">=</span>ListMetaclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当我们传入关键字参数<code>metaclass</code>时，魔术就生效了，它指示Python解释器在创建<code>MyList</code>时，要通过<code>ListMetaclass.__new__()</code>来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p><p><code>__new__()</code>方法接收到的参数依次是：</p><ol><li>当前准备创建的类的对象；</li><li>类的名字；</li><li>类继承的父类集合；</li><li>类的方法集合。</li></ol><p>测试一下<code>MyList</code>是否可以调用<code>add()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> L <span class="token operator">=</span> MyList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> L<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span> L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而普通的<code>list</code>没有<code>add()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> L2 <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> L2<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'list'</span> object has no attribute <span class="token string">'add'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态修改有什么意义？直接在<code>MyList</code>定义中写上<code>add()</code>方法不是更简单吗？正常情况下，确实应该直接写，通过metaclass修改纯属变态。</p><p>但是，总会遇到需要通过metaclass修改类定义的。ORM就是一个典型的例子。</p><p>ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。</p><p>要编写一个ORM框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p><p>让我们来尝试编写一个ORM框架。</p><p>编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个ORM框架，想定义一个<code>User</code>类来操作对应的数据库表<code>User</code>，我们期待他写出这样的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 定义类的属性到列的映射：</span>    id <span class="token operator">=</span> IntegerField<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    email <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'email'</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个实例：</span>u <span class="token operator">=</span> User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">12345</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">'test@orm.org'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'my-pwd'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存到数据库：</span>u<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，父类<code>Model</code>和属性类型<code>StringField</code>、<code>IntegerField</code>是由ORM框架提供的，剩下的魔术方法比如<code>save()</code>全部由父类<code>Model</code>自动完成。虽然metaclass的编写会比较复杂，但ORM的使用者用起来却异常简单。</p><p>现在，我们就按上面的接口来实现该ORM。</p><p>首先来定义<code>Field</code>类，它负责保存数据库表的字段名和字段类型：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Field</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> column_type<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>column_type <span class="token operator">=</span> column_type    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;%s:%s>'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Field</code>的基础上，进一步定义各种类型的<code>Field</code>，比如<code>StringField</code>，<code>IntegerField</code>等等：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StringField</span><span class="token punctuation">(</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>StringField<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'varchar(100)'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IntegerField</span><span class="token punctuation">(</span>Field<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>IntegerField<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'bigint'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一步，就是编写最复杂的<code>ModelMetaclass</code>了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ModelMetaclass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name<span class="token operator">==</span><span class="token string">'Model'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> type<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Found model: %s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>        mappings <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> attrs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>v<span class="token punctuation">,</span> Field<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Found mapping: %s ==> %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>                mappings<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v        <span class="token keyword">for</span> k <span class="token keyword">in</span> mappings<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            attrs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>k<span class="token punctuation">)</span>        attrs<span class="token punctuation">[</span><span class="token string">'__mappings__'</span><span class="token punctuation">]</span> <span class="token operator">=</span> mappings <span class="token comment" spellcheck="true"># 保存属性和列的映射关系</span>        attrs<span class="token punctuation">[</span><span class="token string">'__table__'</span><span class="token punctuation">]</span> <span class="token operator">=</span> name <span class="token comment" spellcheck="true"># 假设表名和类名一致</span>        <span class="token keyword">return</span> type<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> bases<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以及基类<code>Model</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>dict<span class="token punctuation">,</span> metaclass<span class="token operator">=</span>ModelMetaclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Model<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>r<span class="token string">"'Model' object has no attribute '%s'"</span> <span class="token operator">%</span> key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        params <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> self<span class="token punctuation">.</span>__mappings__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fields<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">.</span>name<span class="token punctuation">)</span>            params<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span>            args<span class="token punctuation">.</span>append<span class="token punctuation">(</span>getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">'insert into %s (%s) values (%s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__table__<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'SQL: %s'</span> <span class="token operator">%</span> sql<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ARGS: %s'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户定义一个<code>class User(Model)</code>时，Python解释器首先在当前类<code>User</code>的定义中查找<code>metaclass</code>，如果没有找到，就继续在父类<code>Model</code>中查找<code>metaclass</code>，找到了，就使用<code>Model</code>中定义的<code>metaclass</code>的<code>ModelMetaclass</code>来创建<code>User</code>类，也就是说，metaclass可以隐式地继承到子类，但子类自己却感觉不到。</p><p>在<code>ModelMetaclass</code>中，一共做了几件事情：</p><ol><li>排除掉对<code>Model</code>类的修改；</li><li>在当前类（比如<code>User</code>）中查找定义的类的所有属性，如果找到一个Field属性，就把它保存到一个<code>__mappings__</code>的dict中，同时从类属性中删除该Field属性，否则，容易造成运行时错误（实例的属性会遮盖类的同名属性）；</li><li>把表名保存到<code>__table__</code>中，这里简化为表名默认为类名。</li></ol><p>在<code>Model</code>类中，就可以定义各种操作数据库的方法，比如<code>save()</code>，<code>delete()</code>，<code>find()</code>，<code>update</code>等等。</p><p>我们实现了<code>save()</code>方法，把一个实例保存到数据库中。因为有表名，属性到字段的映射和属性值的集合，就可以构造出<code>INSERT</code>语句。</p><p>编写代码试试：</p><pre class="line-numbers language-python"><code class="language-python">u <span class="token operator">=</span> User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">12345</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Michael'</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">'test@orm.org'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'my-pwd'</span><span class="token punctuation">)</span>u<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-python"><code class="language-python">Found model<span class="token punctuation">:</span> UserFound mapping<span class="token punctuation">:</span> email <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">&lt;</span>StringField<span class="token punctuation">:</span>email<span class="token operator">></span>Found mapping<span class="token punctuation">:</span> password <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">&lt;</span>StringField<span class="token punctuation">:</span>password<span class="token operator">></span>Found mapping<span class="token punctuation">:</span> id <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">&lt;</span>IntegerField<span class="token punctuation">:</span>uid<span class="token operator">></span>Found mapping<span class="token punctuation">:</span> name <span class="token operator">==</span><span class="token operator">></span> <span class="token operator">&lt;</span>StringField<span class="token punctuation">:</span>username<span class="token operator">></span>SQL<span class="token punctuation">:</span> insert into User <span class="token punctuation">(</span>password<span class="token punctuation">,</span>email<span class="token punctuation">,</span>username<span class="token punctuation">,</span>id<span class="token punctuation">)</span> values <span class="token punctuation">(</span>?<span class="token punctuation">,</span>?<span class="token punctuation">,</span>?<span class="token punctuation">,</span>?<span class="token punctuation">)</span>ARGS<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'my-pwd'</span><span class="token punctuation">,</span> <span class="token string">'test@orm.org'</span><span class="token punctuation">,</span> <span class="token string">'Michael'</span><span class="token punctuation">,</span> <span class="token number">12345</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>save()</code>方法已经打印出了可执行的SQL语句，以及参数列表，只需要真正连接到数据库，执行该SQL语句，就可以完成真正的功能。</p><h2 id="错误、调试和测试"><a href="#错误、调试和测试" class="headerlink" title="错误、调试和测试"></a>错误、调试和测试</h2><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>高级语言通常都内置了一套<code>try...except...finally...</code>的错误处理机制</p><h4 id="try"><a href="#try" class="headerlink" title="try"></a>try</h4><p>让我们用一个例子来看看<code>try</code>的机制：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try...'</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'except:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们认为某些代码可能会出错时，就可以用<code>try</code>来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即<code>except</code>语句块，执行完<code>except</code>后，如果有<code>finally</code>语句块，则执行<code>finally</code>语句块，至此，执行完毕。</p><p>上面的代码在计算<code>10 / 0</code>时会产生一个除法运算错误：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">except</span><span class="token punctuation">:</span> division by zero<span class="token keyword">finally</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>从输出可以看到，当错误发生时，后续语句<code>print(&#39;result:&#39;, r)</code>不会被执行，<code>except</code>由于捕获到<code>ZeroDivisionError</code>，因此被执行。最后，<code>finally</code>语句被执行。然后，程序继续按照流程往下走。</p><p>如果把除数<code>0</code>改成<code>2</code>，则执行结果如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>result<span class="token punctuation">:</span> <span class="token number">5</span><span class="token keyword">finally</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于没有错误发生，所以<code>except</code>语句块不会被执行，但是<code>finally</code>如果有，则一定会被执行（可以没有<code>finally</code>语句）。</p><p>你还可以猜测，错误应该有很多种类，如果发生了不同类型的错误，应该由不同的<code>except</code>语句块处理。没错，可以有多个<code>except</code>来捕获不同类型的错误：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try...'</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ZeroDivisionError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>int()</code>函数可能会抛出<code>ValueError</code>，所以我们用一个<code>except</code>捕获<code>ValueError</code>，用另一个<code>except</code>捕获<code>ZeroDivisionError</code>。</p><p>此外，如果没有错误发生，可以在<code>except</code>语句块后面加一个<code>else</code>，当没有错误发生时，会自动执行<code>else</code>语句：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try...'</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ZeroDivisionError:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'no error!'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python的错误其实也是class，所有的错误类型都继承自<code>BaseException</code>，所以在使用<code>except</code>时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    foo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError'</span><span class="token punctuation">)</span><span class="token keyword">except</span> UnicodeError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'UnicodeError'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个<code>except</code>永远也捕获不到<code>UnicodeError</code>，因为<code>UnicodeError</code>是<code>ValueError</code>的子类，如果有，也被第一个<code>except</code>给捕获了。</p><p>Python所有的错误都是从<code>BaseException</code>类派生的，常见的错误类型和继承关系看这里：</p><p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" target="_blank" rel="noopener">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p><p>使用<code>try...except</code>捕获错误还有一个巨大的好处，就是可以跨越多层调用，比如函数<code>main()</code>调用<code>bar()</code>，<code>bar()</code>调用<code>foo()</code>，结果<code>foo()</code>出错了，这时，只要<code>main()</code>捕获到了，就可以处理：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> foo<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        bar<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，不需要在每个可能出错的地方去捕获错误，只要在合适的层次去捕获错误就可以了。这样一来，就大大减少了写<code>try...except...finally</code>的麻烦。</p><h4 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h4><p>如果错误没有被捕获，它就会一直往上抛，最后被Python解释器捕获，打印一个错误信息，然后程序退出。来看看<code>err.py</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># err.py:</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> foo<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bar<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行，结果如下：</p><pre class="line-numbers language-python"><code class="language-python">$ python3 err<span class="token punctuation">.</span>pyTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> main    bar<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">in</span> bar    <span class="token keyword">return</span> foo<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">in</span> foo    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>ZeroDivisionError<span class="token punctuation">:</span> division by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出错并不可怕，可怕的是不知道哪里出错了。解读错误信息是定位错误的关键。我们从上往下可以看到整个错误的调用函数链：</p><p>错误信息第1行：</p><pre class="line-numbers language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>告诉我们这是错误的跟踪信息。</p><p>第2~3行：</p><pre class="line-numbers language-python"><code class="language-python">  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用<code>main()</code>出错了，在代码文件<code>err.py</code>的第11行代码，但原因是第9行：</p><pre class="line-numbers language-python"><code class="language-python">  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> main    bar<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用<code>bar(&#39;0&#39;)</code>出错了，在代码文件<code>err.py</code>的第9行代码，但原因是第6行：</p><pre class="line-numbers language-python"><code class="language-python">  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">in</span> bar    <span class="token keyword">return</span> foo<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原因是<code>return foo(s) * 2</code>这个语句出错了，但这还不是最终原因，继续往下看：</p><pre class="line-numbers language-python"><code class="language-python">  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">in</span> foo    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>原因是<code>return 10 / int(s)</code>这个语句出错了，这是错误产生的源头，因为下面打印了：</p><pre class="line-numbers language-python"><code class="language-python">ZeroDivisionError<span class="token punctuation">:</span> integer division <span class="token operator">or</span> modulo by zero<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据错误类型<code>ZeroDivisionError</code>，我们判断，<code>int(s)</code>本身并没有出错，但是<code>int(s)</code>返回<code>0</code>，在计算<code>10 / 0</code>时出错，至此，找到错误源头。</p><blockquote><p> 出错的时候，一定要分析错误的调用栈信息，才能定位错误的位置。</p></blockquote><h4 id="记录错误"><a href="#记录错误" class="headerlink" title="记录错误"></a>记录错误</h4><p>如果不捕获错误，自然可以让Python解释器来打印出错误堆栈，但程序也被结束了。既然我们能捕获错误，就可以把错误堆栈打印出来，然后分析错误原因，同时，让程序继续执行下去。</p><p>Python内置的<code>logging</code>模块可以非常容易地记录错误信息：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># err_logging.py</span><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> foo<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        bar<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'END'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样是出错，但程序打印完错误信息后会继续执行，并正常退出：</p><pre class="line-numbers language-python"><code class="language-python">$ python3 err_logging<span class="token punctuation">.</span>pyERROR<span class="token punctuation">:</span>root<span class="token punctuation">:</span>division by zeroTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"err_logging.py"</span><span class="token punctuation">,</span> line <span class="token number">13</span><span class="token punctuation">,</span> <span class="token keyword">in</span> main    bar<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>  File <span class="token string">"err_logging.py"</span><span class="token punctuation">,</span> line <span class="token number">9</span><span class="token punctuation">,</span> <span class="token keyword">in</span> bar    <span class="token keyword">return</span> foo<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>  File <span class="token string">"err_logging.py"</span><span class="token punctuation">,</span> line <span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">in</span> foo    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>ZeroDivisionError<span class="token punctuation">:</span> division by zeroEND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过配置，<code>logging</code>还可以把错误记录到日志文件里，方便事后排查。</p><h4 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h4><p>因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此，错误并不是凭空产生的，而是有意创建并抛出的。Python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。</p><p>如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用<code>raise</code>语句抛出一个错误的实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># err_raise.py</span><span class="token keyword">class</span> <span class="token class-name">FooError</span><span class="token punctuation">(</span>ValueError<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> FooError<span class="token punctuation">(</span><span class="token string">'invalid value: %s'</span> <span class="token operator">%</span> s<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> nfoo<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行，可以最后跟踪到我们自己定义的错误：</p><pre class="line-numbers language-python"><code class="language-python">$ python3 err_raise<span class="token punctuation">.</span>py Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"err_throw.py"</span><span class="token punctuation">,</span> line <span class="token number">11</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    foo<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>  File <span class="token string">"err_throw.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> foo    <span class="token keyword">raise</span> FooError<span class="token punctuation">(</span><span class="token string">'invalid value: %s'</span> <span class="token operator">%</span> s<span class="token punctuation">)</span>__main__<span class="token punctuation">.</span>FooError<span class="token punctuation">:</span> invalid value<span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有在必要的时候才定义我们自己的错误类型。如果可以选择Python已有的内置的错误类型（比如<code>ValueError</code>，<code>TypeError</code>），尽量使用Python内置的错误类型。</p><p>最后，我们来看另一种错误处理的方式：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># err_reraise.py</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'invalid value: %s'</span> <span class="token operator">%</span> s<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> n<span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        foo<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ValueError!'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span>bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>bar()</code>函数中，我们明明已经捕获了错误，但是，打印一个<code>ValueError!</code>后，又把错误通过<code>raise</code>语句抛出去了，这不有病么？</p><p>其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。好比一个员工处理不了一个问题时，就把问题抛给他的老板，如果他的老板也处理不了，就一直往上抛，最终会抛给CEO去处理。</p><p><code>raise</code>语句如果不带参数，就会把当前错误原样抛出。此外，在<code>except</code>中<code>raise</code>一个Error，还可以把一种类型的错误转化成另一种类型：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'input error!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只要是合理的转换逻辑就可以，但是，决不应该把一个<code>IOError</code>转换成毫不相干的<code>ValueError</code>。</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><p>第一种方法简单直接粗暴有效，就是用<code>print()</code>把可能有问题的变量打印出来看看：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'>>> n = %d'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> n<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    foo<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后在输出中查找打印的变量值：</p><pre class="line-numbers language-python"><code class="language-python">$ python err<span class="token punctuation">.</span>py<span class="token operator">>></span><span class="token operator">></span> n <span class="token operator">=</span> <span class="token number">0</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ZeroDivisionError<span class="token punctuation">:</span> integer division <span class="token operator">or</span> modulo by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>print()</code>最大的坏处是将来还得删掉它，想想程序里到处都是<code>print()</code>，运行结果也会包含很多垃圾信息。所以，我们又有第二种方法。</p><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p>凡是用<code>print()</code>来辅助查看的地方，都可以用断言（assert）来替代：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token keyword">assert</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'n is zero!'</span>    <span class="token keyword">return</span> <span class="token number">10</span> <span class="token operator">/</span> n<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    foo<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>assert</code>的意思是，表达式<code>n != 0</code>应该是<code>True</code>，否则，根据程序运行的逻辑，后面的代码肯定会出错。</p><p>如果断言失败，<code>assert</code>语句本身就会抛出<code>AssertionError</code>：</p><pre class="line-numbers language-python"><code class="language-python">$ python err<span class="token punctuation">.</span>pyTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AssertionError<span class="token punctuation">:</span> n <span class="token keyword">is</span> zero!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>程序中如果到处充斥着<code>assert</code>，和<code>print()</code>相比也好不到哪去。不过，启动Python解释器时可以用<code>-O</code>参数来关闭<code>assert</code>：</p><pre class="line-numbers language-python"><code class="language-python">$ python <span class="token operator">-</span>O err<span class="token punctuation">.</span>pyTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>ZeroDivisionError<span class="token punctuation">:</span> division by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 注意：断言的开关“-O”是英文大写字母O，不是数字0。</p></blockquote><p>关闭后，你可以把所有的<code>assert</code>语句当成<code>pass</code>来看。</p><h4 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h4><p>把<code>print()</code>替换为<code>logging</code>是第3种方式，和<code>assert</code>比，<code>logging</code>不会抛出错误，而且可以输出到文件：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> loggings <span class="token operator">=</span> <span class="token string">'0'</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'n = %d'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>logging.info()</code>就可以输出一段文本。运行，发现除了<code>ZeroDivisionError</code>，没有任何信息。怎么回事？</p><p>别急，在<code>import logging</code>之后添加一行配置再试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logginglogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>看到输出了：</p><pre class="line-numbers language-python"><code class="language-python">$ python err<span class="token punctuation">.</span>pyINFO<span class="token punctuation">:</span>root<span class="token punctuation">:</span>n <span class="token operator">=</span> <span class="token number">0</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">8</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span>ZeroDivisionError<span class="token punctuation">:</span> division by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是<code>logging</code>的好处，它允许你指定记录信息的级别，有<code>debug</code>，<code>info</code>，<code>warning</code>，<code>error</code>等几个级别，当我们指定<code>level=INFO</code>时，<code>logging.debug</code>就不起作用了。同理，指定<code>level=WARNING</code>后，<code>debug</code>和<code>info</code>就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</p><p><code>logging</code>的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</p><h4 id="pdb"><a href="#pdb" class="headerlink" title="pdb"></a>pdb</h4><p>第4种方式是启动Python的调试器pdb，让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># err.py</span>s <span class="token operator">=</span> <span class="token string">'0'</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后启动：</p><pre class="line-numbers language-python"><code class="language-python">$ python <span class="token operator">-</span>m pdb err<span class="token punctuation">.</span>py<span class="token operator">></span> <span class="token operator">/</span>Users<span class="token operator">/</span>michael<span class="token operator">/</span>Github<span class="token operator">/</span>learn<span class="token operator">-</span>python3<span class="token operator">/</span>samples<span class="token operator">/</span>debug<span class="token operator">/</span>err<span class="token punctuation">.</span>py<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'0'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以参数<code>-m pdb</code>启动后，pdb定位到下一步要执行的代码<code>-&gt; s = &#39;0&#39;</code>。输入命令<code>l</code>来查看代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> l  <span class="token number">1</span>     <span class="token comment" spellcheck="true"># err.py</span>  <span class="token number">2</span>  <span class="token operator">-</span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'0'</span>  <span class="token number">3</span>     n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>  <span class="token number">4</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入命令<code>n</code>可以单步执行代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> n<span class="token operator">></span> <span class="token operator">/</span>Users<span class="token operator">/</span>michael<span class="token operator">/</span>Github<span class="token operator">/</span>learn<span class="token operator">-</span>python3<span class="token operator">/</span>samples<span class="token operator">/</span>debug<span class="token operator">/</span>err<span class="token punctuation">.</span>py<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> n<span class="token operator">></span> <span class="token operator">/</span>Users<span class="token operator">/</span>michael<span class="token operator">/</span>Github<span class="token operator">/</span>learn<span class="token operator">-</span>python3<span class="token operator">/</span>samples<span class="token operator">/</span>debug<span class="token operator">/</span>err<span class="token punctuation">.</span>py<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任何时候都可以输入命令<code>p 变量名</code>来查看变量：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> p s<span class="token string">'0'</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> p n<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入命令<code>q</code>结束调试，退出程序：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。</p><h4 id="pdb-set-trace"><a href="#pdb-set-trace" class="headerlink" title="pdb.set_trace()"></a>pdb.set_trace()</h4><p>这个方法也是用pdb，但是不需要单步执行，我们只需要<code>import pdb</code>，然后，在可能出错的地方放一个<code>pdb.set_trace()</code>，就可以设置一个断点：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># err.py</span><span class="token keyword">import</span> pdbs <span class="token operator">=</span> <span class="token string">'0'</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>s<span class="token punctuation">)</span>pdb<span class="token punctuation">.</span>set_trace<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 运行到这里会自动暂停</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码，程序会自动在<code>pdb.set_trace()</code>暂停并进入pdb调试环境，可以用命令<code>p</code>查看变量，或者用命令<code>c</code>继续运行：</p><pre class="line-numbers language-python"><code class="language-python">$ python err<span class="token punctuation">.</span>py <span class="token operator">></span> <span class="token operator">/</span>Users<span class="token operator">/</span>michael<span class="token operator">/</span>Github<span class="token operator">/</span>learn<span class="token operator">-</span>python3<span class="token operator">/</span>samples<span class="token operator">/</span>debug<span class="token operator">/</span>err<span class="token punctuation">.</span>py<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> p n<span class="token number">0</span><span class="token punctuation">(</span>Pdb<span class="token punctuation">)</span> cTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"err.py"</span><span class="token punctuation">,</span> line <span class="token number">7</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">/</span> n<span class="token punctuation">)</span>ZeroDivisionError<span class="token punctuation">:</span> division by zero<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。</p><h4 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h4><p>如果要比较爽地设置断点、单步执行，就需要一个支持调试功能的IDE。目前比较好的Python IDE有：</p><p>Visual Studio Code：<a href="https://code.visualstudio.com/，需要安装Python插件。" target="_blank" rel="noopener">https://code.visualstudio.com/，需要安装Python插件。</a></p><p>PyCharm：<a href="http://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">http://www.jetbrains.com/pycharm/</a></p><p>另外，<a href="http://www.eclipse.org/" target="_blank" rel="noopener">Eclipse</a>加上<a href="http://pydev.org/" target="_blank" rel="noopener">pydev</a>插件也可以调试Python程序。</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。</p><p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p><p>比如对函数<code>abs()</code>，我们可以编写出以下几个测试用例：</p><ol><li>输入正数，比如<code>1</code>、<code>1.2</code>、<code>0.99</code>，期待返回值与输入相同；</li><li>输入负数，比如<code>-1</code>、<code>-1.2</code>、<code>-0.99</code>，期待返回值与输入相反；</li><li>输入<code>0</code>，期待返回<code>0</code>；</li><li>输入非数值类型，比如<code>None</code>、<code>[]</code>、<code>{}</code>，期待抛出<code>TypeError</code>。</li></ol><p>把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。</p><p>如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。</p><p>单元测试通过后有什么意义呢？如果我们对<code>abs()</code>函数代码做了修改，只需要再跑一遍单元测试，如果通过，说明我们的修改不会对<code>abs()</code>函数原有的行为造成影响，如果测试不通过，说明我们的修改与原有行为不一致，要么修改代码，要么修改测试。</p><p>这种以测试为驱动的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的测试用例。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的。</p><p>我们来编写一个<code>Dict</code>类，这个类的行为和<code>dict</code>一致，但是可以通过属性来访问，用起来就像下面这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> Dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>a<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mydict.py</code>代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dict</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>r<span class="token string">"'Dict' object has no attribute '%s'"</span> <span class="token operator">%</span> key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了编写单元测试，我们需要引入Python自带的<code>unittest</code>模块，编写<code>mydict_test.py</code>如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> unittest<span class="token keyword">from</span> mydict <span class="token keyword">import</span> Dict<span class="token keyword">class</span> <span class="token class-name">TestDict</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">test_init</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> Dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>d<span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>d<span class="token punctuation">.</span>b<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>d<span class="token punctuation">,</span> dict<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> Dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        d<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'value'</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>d<span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_attr</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> Dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        d<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token string">'value'</span>        self<span class="token punctuation">.</span>assertTrue<span class="token punctuation">(</span><span class="token string">'key'</span> <span class="token keyword">in</span> d<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_keyerror</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> Dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token string">'empty'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">test_attrerror</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> Dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>AttributeError<span class="token punctuation">)</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> d<span class="token punctuation">.</span>empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写单元测试时，我们需要编写一个测试类，从<code>unittest.TestCase</code>继承。</p><p>以<code>test</code>开头的方法就是测试方法，不以<code>test</code>开头的方法不被认为是测试方法，测试的时候不会被执行。</p><p>对每一类测试都需要编写一个<code>test_xxx()</code>方法。由于<code>unittest.TestCase</code>提供了很多内置的条件判断，我们只需要调用这些方法就可以断言输出是否是我们所期望的。最常用的断言就是<code>assertEqual()</code>：</p><pre class="line-numbers language-python"><code class="language-python">self<span class="token punctuation">.</span>assertEqual<span class="token punctuation">(</span>abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 断言函数返回的结果与1相等</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种重要的断言就是期待抛出指定类型的Error，比如通过<code>d[&#39;empty&#39;]</code>访问不存在的key时，断言会抛出<code>KeyError</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>KeyError<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> d<span class="token punctuation">[</span><span class="token string">'empty'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>而通过<code>d.empty</code>访问不存在的key时，我们期待抛出<code>AttributeError</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> self<span class="token punctuation">.</span>assertRaises<span class="token punctuation">(</span>AttributeError<span class="token punctuation">)</span><span class="token punctuation">:</span>    value <span class="token operator">=</span> d<span class="token punctuation">.</span>empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="运行单元测试"><a href="#运行单元测试" class="headerlink" title="运行单元测试"></a>运行单元测试</h4><p>一旦编写好单元测试，我们就可以运行单元测试。最简单的运行方式是在<code>mydict_test.py</code>的最后加上两行代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    unittest<span class="token punctuation">.</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以把<code>mydict_test.py</code>当做正常的python脚本运行：</p><pre class="line-numbers language-python"><code class="language-python">$ python mydict_test<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一种方法是在命令行通过参数<code>-m unittest</code>直接运行单元测试：</p><pre class="line-numbers language-python"><code class="language-python">$ python <span class="token operator">-</span>m unittest mydict_test<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>Ran <span class="token number">5</span> tests <span class="token keyword">in</span> <span class="token number">0.</span>000sOK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是推荐的做法，因为这样可以一次批量运行很多单元测试，并且，有很多工具可以自动来运行这些单元测试。</p><h4 id="setUp与tearDown"><a href="#setUp与tearDown" class="headerlink" title="setUp与tearDown"></a>setUp与tearDown</h4><p>可以在单元测试中编写两个特殊的<code>setUp()</code>和<code>tearDown()</code>方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。</p><p><code>setUp()</code>和<code>tearDown()</code>方法有什么用呢？设想你的测试需要启动一个数据库，这时，就可以在<code>setUp()</code>方法中连接数据库，在<code>tearDown()</code>方法中关闭数据库，这样，不必在每个测试方法中重复相同的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestDict</span><span class="token punctuation">(</span>unittest<span class="token punctuation">.</span>TestCase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'setUp...'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'tearDown...'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以再次运行测试看看每个测试方法调用前后是否会打印出<code>setUp...</code>和<code>tearDown...</code>。</p><h3 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h3><p>如果你经常阅读Python的官方文档，可以看到很多文档都有示例代码。比如<a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">re模块</a>就带了很多示例代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> re<span class="token operator">>></span><span class="token operator">></span> m <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'(?&lt;=abc)def'</span><span class="token punctuation">,</span> <span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token string">'def'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以把这些示例代码在Python的交互式环境下输入并执行，结果与文档中的示例代码显示的一致。</p><p>这些代码与其他说明可以写在注释中，然后，由一些工具来自动生成文档。既然这些代码本身就可以粘贴出来直接运行，那么，可不可以自动执行写在注释中的这些代码呢？</p><p>答案是肯定的。</p><p>当我们编写注释时，如果写上这样的注释：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    Function to get absolute value of number.    Example:    >>> abs(1)    1    >>> abs(-1)    1    >>> abs(0)    0    '''</span>    <span class="token keyword">return</span> n <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无疑更明确地告诉函数的调用者该函数的期望输入和输出。</p><p>并且，Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p><p>doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用<code>...</code>表示中间一大段烦人的输出。</p><p>让我们用doctest来测试上次编写的<code>Dict</code>类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># mydict2.py</span><span class="token keyword">class</span> <span class="token class-name">Dict</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    Simple dict but also support access as x.y style.    >>> d1 = Dict()    >>> d1['x'] = 100    >>> d1.x    100    >>> d1.y = 200    >>> d1['y']    200    >>> d2 = Dict(a=1, b=2, c='3')    >>> d2.c    '3'    >>> d2['empty']    Traceback (most recent call last):        ...    KeyError: 'empty'    >>> d2.empty    Traceback (most recent call last):        ...    AttributeError: 'Dict' object has no attribute 'empty'    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Dict<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span>r<span class="token string">"'Dict' object has no attribute '%s'"</span> <span class="token operator">%</span> key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> doctest    doctest<span class="token punctuation">.</span>testmod<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行<code>python mydict2.py</code>：</p><pre class="line-numbers language-python"><code class="language-python">$ python mydict2<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>什么输出也没有。这说明我们编写的doctest运行都是正确的。如果程序有问题，比如把<code>__getattr__()</code>方法注释掉，再运行就会报错：</p><pre class="line-numbers language-python"><code class="language-python">$ python mydict2<span class="token punctuation">.</span>py<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>File <span class="token string">"/Users/michael/Github/learn-python3/samples/debug/mydict2.py"</span><span class="token punctuation">,</span> line <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __main__<span class="token punctuation">.</span>DictFailed example<span class="token punctuation">:</span>    d1<span class="token punctuation">.</span>xException raised<span class="token punctuation">:</span>    Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    AttributeError<span class="token punctuation">:</span> <span class="token string">'Dict'</span> object has no attribute <span class="token string">'x'</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>File <span class="token string">"/Users/michael/Github/learn-python3/samples/debug/mydict2.py"</span><span class="token punctuation">,</span> line <span class="token number">16</span><span class="token punctuation">,</span> <span class="token keyword">in</span> __main__<span class="token punctuation">.</span>DictFailed example<span class="token punctuation">:</span>    d2<span class="token punctuation">.</span>cException raised<span class="token punctuation">:</span>    Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    AttributeError<span class="token punctuation">:</span> <span class="token string">'Dict'</span> object has no attribute <span class="token string">'c'</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token number">1</span> items had failures<span class="token punctuation">:</span>   <span class="token number">2</span> of   <span class="token number">9</span> <span class="token keyword">in</span> __main__<span class="token punctuation">.</span>Dict<span class="token operator">**</span><span class="token operator">*</span>Test Failed<span class="token operator">**</span><span class="token operator">*</span> <span class="token number">2</span> failures<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到最后3行代码。当模块正常导入时，doctest不会被执行。只有在命令行直接运行时，才执行doctest。所以，不必担心doctest会在非测试环境下执行。</p><h2 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h2><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><h4 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h4><p>要以读文件的模式打开一个文件对象，使用Python内置的<code>open()</code>函数，传入文件名和标示符：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标示符’r’表示读，这样，我们就成功地打开了一个文件。</p><p>如果文件不存在，<code>open()</code>函数就会抛出一个<code>IOError</code>的错误，并且给出错误码和详细的信息告诉你文件不存在：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'/Users/michael/notfound.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>FileNotFoundError<span class="token punctuation">:</span> <span class="token punctuation">[</span>Errno <span class="token number">2</span><span class="token punctuation">]</span> No such file <span class="token operator">or</span> directory<span class="token punctuation">:</span> <span class="token string">'/Users/michael/notfound.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果文件打开成功，接下来，调用<code>read()</code>方法可以一次读取文件的全部内容，Python把内容读到内存，用一个<code>str</code>对象表示：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'Hello, world!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后一步是调用<code>close()</code>方法关闭文件。文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件数量也是有限的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于文件读写时都有可能产生<code>IOError</code>，一旦出错，后面的<code>f.close()</code>就不会调用。所以，为了保证无论是否出错都能正确地关闭文件，我们可以使用<code>try ... finally</code>来实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是每次都这么写实在太繁琐，所以，Python引入了<code>with</code>语句来自动帮我们调用<code>close()</code>方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这和前面的<code>try ... finally</code>是一样的，但是代码更佳简洁，并且不必调用<code>f.close()</code>方法。</p><p>调用<code>read()</code>会一次性读取文件的全部内容，如果文件有10G，内存就爆了，所以，要保险起见，可以反复调用<code>read(size)</code>方法，每次最多读取size个字节的内容。另外，调用<code>readline()</code>可以每次读取一行内容，调用<code>readlines()</code>一次读取所有内容并按行返回<code>list</code>。因此，要根据需要决定怎么调用。</p><p>如果文件很小，<code>read()</code>一次性读取最方便；如果不能确定文件大小，反复调用<code>read(size)</code>比较保险；如果是配置文件，调用<code>readlines()</code>最方便：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 把末尾的'\n'删掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h4><p>像<code>open()</code>函数返回的这种有个<code>read()</code>方法的对象，在Python中统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等。file-like Object不要求从特定类继承，只要写个<code>read()</code>方法就行。</p><p><code>StringIO</code>就是在内存中创建的file-like Object，常用作临时缓冲。</p><h4 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h4><p>前面讲的默认都是读取文本文件，并且是UTF-8编码的文本文件。要读取二进制文件，比如图片、视频等等，用<code>&#39;rb&#39;</code>模式打开文件即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'/Users/michael/test.jpg'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token string">'\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...'</span> <span class="token comment" spellcheck="true"># 十六进制表示的字节</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>要读取非UTF-8编码的文本文件，需要给<code>open()</code>函数传入<code>encoding</code>参数，例如，读取GBK编码的文件：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'/Users/michael/gbk.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token string">'测试'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>遇到有些编码不规范的文件，你可能会遇到<code>UnicodeDecodeError</code>，因为在文本文件中可能夹杂了一些非法编码的字符。遇到这种情况，<code>open()</code>函数还接收一个<code>errors</code>参数，表示如果遇到编码错误后如何处理。最简单的方式是直接忽略：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'/Users/michael/gbk.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'gbk'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h4><p>写文件和读文件是一样的，唯一区别是调用<code>open()</code>函数时，传入标识符<code>&#39;w&#39;</code>或者<code>&#39;wb&#39;</code>表示写文本文件或写二进制文件：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你可以反复调用<code>write()</code>来写入文件，但是务必要调用<code>f.close()</code>来关闭文件。当我们写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用<code>close()</code>方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用<code>close()</code>的后果是数据可能只写了一部分到磁盘，剩下的丢失了。所以，还是用<code>with</code>语句来得保险：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/Users/michael/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello, world!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要写入特定编码的文本文件，请给<code>open()</code>函数传入<code>encoding</code>参数，将字符串自动转换成指定编码。</p><p>细心的童鞋会发现，以<code>&#39;w&#39;</code>模式写入文件时，如果文件已存在，会直接覆盖（相当于删掉后新写入一个文件）。如果我们希望追加到文件末尾怎么办？可以传入<code>&#39;a&#39;</code>以追加（append）模式写入。</p><p>所有模式的定义及含义可以参考Python的<a href="https://docs.python.org/3/library/functions.html#open" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="StringIO和BytesIO"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h3><h4 id="StringIO"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h4><p>很多时候，数据读写不一定是文件，也可以在内存中读写。</p><p>StringIO顾名思义就是在内存中读写str。</p><p>要把str写入StringIO，我们需要先创建一个StringIO，然后，像文件一样写入即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'world!'</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getvalue()</code>方法用于获得写入后的str。</p><p>要读取StringIO，可以用一个str初始化StringIO，然后，像读文件一样读取：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token string">'Hello!\nHi!\nGoodbye!'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     s <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">break</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Hello!Hi!Goodbye!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BytesIO"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h4><p>StringIO操作的只能是str，如果要操作二进制数据，就需要使用BytesIO。</p><p>BytesIO实现了在内存中读写bytes，我们创建一个BytesIO，然后写入一些bytes：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'中文'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，写入的不是str，而是经过UTF-8编码的bytes。</p><p>和StringIO类似，可以用一个bytes初始化BytesIO，然后，像读文件一样读取：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token string">'\xe4\xb8\xad\xe6\x96\x87'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作文件和目录"><a href="#操作文件和目录" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h3><p>如果我们要操作文件、目录，可以在命令行下面输入操作系统提供的各种命令来完成。比如<code>dir</code>、<code>cp</code>等命令。</p><p>如果要在Python程序中执行这些目录和文件的操作怎么办？其实操作系统提供的命令只是简单地调用了操作系统提供的接口函数，Python内置的<code>os</code>模块也可以直接调用操作系统提供的接口函数。</p><p>打开Python交互式命令行，我们来看看如何使用<code>os</code>模块的基本功能：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>name <span class="token comment" spellcheck="true"># 操作系统类型</span><span class="token string">'posix'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是<code>posix</code>，说明系统是<code>Linux</code>、<code>Unix</code>或<code>Mac OS X</code>，如果是<code>nt</code>，就是<code>Windows</code>系统。</p><p>要获取详细的系统信息，可以调用<code>uname()</code>函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>uname<span class="token punctuation">(</span><span class="token punctuation">)</span>posix<span class="token punctuation">.</span>uname_result<span class="token punctuation">(</span>sysname<span class="token operator">=</span><span class="token string">'Darwin'</span><span class="token punctuation">,</span> nodename<span class="token operator">=</span><span class="token string">'MichaelMacPro.local'</span><span class="token punctuation">,</span> release<span class="token operator">=</span><span class="token string">'14.3.0'</span><span class="token punctuation">,</span> version<span class="token operator">=</span><span class="token string">'Darwin Kernel Version 14.3.0: Mon Mar 23 11:59:05 PDT 2015; root:xnu-2782.20.48~5/RELEASE_X86_64'</span><span class="token punctuation">,</span> machine<span class="token operator">=</span><span class="token string">'x86_64'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意<code>uname()</code>函数在Windows上不提供，也就是说，<code>os</code>模块的某些函数是跟操作系统相关的。</p><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>在操作系统中定义的环境变量，全部保存在<code>os.environ</code>这个变量中，可以直接查看：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>environenviron<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'VERSIONER_PYTHON_PREFER_32_BIT'</span><span class="token punctuation">:</span> <span class="token string">'no'</span><span class="token punctuation">,</span> <span class="token string">'TERM_PROGRAM_VERSION'</span><span class="token punctuation">:</span> <span class="token string">'326'</span><span class="token punctuation">,</span> <span class="token string">'LOGNAME'</span><span class="token punctuation">:</span> <span class="token string">'michael'</span><span class="token punctuation">,</span> <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'michael'</span><span class="token punctuation">,</span> <span class="token string">'PATH'</span><span class="token punctuation">:</span> <span class="token string">'/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要获取某个环境变量的值，可以调用<code>os.environ.get(&#39;key&#39;)</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PATH'</span><span class="token punctuation">)</span><span class="token string">'/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/opt/X11/bin:/usr/local/mysql/bin'</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">)</span><span class="token string">'default'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作文件和目录-1"><a href="#操作文件和目录-1" class="headerlink" title="操作文件和目录"></a>操作文件和目录</h4><p>操作文件和目录的函数一部分放在<code>os</code>模块中，一部分放在<code>os.path</code>模块中，这一点要注意一下。查看、创建和删除目录可以这么调用：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查看当前目录的绝对路径:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token string">'/Users/michael'</span><span class="token comment" spellcheck="true"># 在某个目录下创建一个新目录，首先把新目录的完整路径表示出来:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'/Users/michael'</span><span class="token punctuation">,</span> <span class="token string">'testdir'</span><span class="token punctuation">)</span><span class="token string">'/Users/michael/testdir'</span><span class="token comment" spellcheck="true"># 然后创建一个目录:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删掉一个目录:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把两个路径合成一个时，不要直接拼字符串，而要通过<code>os.path.join()</code>函数，这样可以正确处理不同操作系统的路径分隔符。在Linux/Unix/Mac下，<code>os.path.join()</code>返回这样的字符串：</p><pre class="line-numbers language-python"><code class="language-python">part<span class="token number">-1</span><span class="token operator">/</span>part<span class="token number">-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而Windows下会返回这样的字符串：</p><pre class="line-numbers language-python"><code class="language-python">part<span class="token number">-1</span>\part<span class="token number">-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样的道理，要拆分路径时，也不要直接去拆字符串，而要通过<code>os.path.split()</code>函数，这样可以把一个路径拆分为两部分，后一部分总是最后级别的目录或文件名：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/Users/michael/testdir'</span><span class="token punctuation">,</span> <span class="token string">'file.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>os.path.splitext()</code>可以直接让你得到文件扩展名，很多时候非常方便：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token string">'/path/to/file.txt'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'/path/to/file'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这些合并、拆分路径的函数并不要求目录和文件要真实存在，它们只对字符串进行操作。</p><p>文件操作使用下面的函数。假定当前目录下有一个<code>test.txt</code>文件：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 对文件重命名:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'test.py'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删掉文件:</span><span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'test.py'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是复制文件的函数居然在<code>os</code>模块中不存在！原因是复制文件并非由操作系统提供的系统调用。理论上讲，我们通过上一节的读写文件可以完成文件复制，只不过要多写很多代码。</p><p>幸运的是<code>shutil</code>模块提供了<code>copyfile()</code>的函数，你还可以在<code>shutil</code>模块中找到很多实用函数，它们可以看做是<code>os</code>模块的补充。</p><p>最后看看如何利用Python的特性来过滤文件。比如我们要列出当前目录下的所有目录，只需要一行代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'.lein'</span><span class="token punctuation">,</span> <span class="token string">'.local'</span><span class="token punctuation">,</span> <span class="token string">'.m2'</span><span class="token punctuation">,</span> <span class="token string">'.npm'</span><span class="token punctuation">,</span> <span class="token string">'.ssh'</span><span class="token punctuation">,</span> <span class="token string">'.Trash'</span><span class="token punctuation">,</span> <span class="token string">'.vim'</span><span class="token punctuation">,</span> <span class="token string">'Applications'</span><span class="token punctuation">,</span> <span class="token string">'Desktop'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要列出所有的<code>.py</code>文件，也只需一行代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">and</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'.py'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'apis.py'</span><span class="token punctuation">,</span> <span class="token string">'config.py'</span><span class="token punctuation">,</span> <span class="token string">'models.py'</span><span class="token punctuation">,</span> <span class="token string">'pymonitor.py'</span><span class="token punctuation">,</span> <span class="token string">'test_db.py'</span><span class="token punctuation">,</span> <span class="token string">'urls.py'</span><span class="token punctuation">,</span> <span class="token string">'wsgiapp.py'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>在程序运行的过程中，所有的变量都是在内存中，比如，定义一个dict：</p><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> dict<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以随时修改变量，比如把<code>name</code>改成<code>&#39;Bill&#39;</code>，但是一旦程序结束，变量所占用的内存就被操作系统全部回收。如果没有把修改后的<code>&#39;Bill&#39;</code>存储到磁盘上，下次重新运行程序，变量又被初始化为<code>&#39;Bob&#39;</code>。</p><p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。</p><p>序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。</p><p>反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling。</p><p>Python提供了<code>pickle</code>模块来实现序列化。</p><p>首先，我们尝试把一个对象序列化并写入文件：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pickle<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> dict<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span>b<span class="token string">'\x80\x03}q\x00(X\x03\x00\x00\x00ageq\x01K\x14X\x05\x00\x00\x00scoreq\x02KXX\x04\x00\x00\x00nameq\x03X\x03\x00\x00\x00Bobq\x04u.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>pickle.dumps()</code>方法把任意对象序列化成一个<code>bytes</code>，然后，就可以把这个<code>bytes</code>写入文件。或者用另一个方法<code>pickle.dump()</code>直接把对象序列化后写入一个file-like Object：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'dump.txt'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看看写入的<code>dump.txt</code>文件，一堆乱七八糟的内容，这些都是Python保存的对象内部信息。</p><p>当我们要把对象从磁盘读到内存时，可以先把内容读到一个<code>bytes</code>，然后用<code>pickle.loads()</code>方法反序列化出对象，也可以直接用<code>pickle.load()</code>方法从一个<code>file-like Object</code>中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'dump.txt'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量的内容又回来了！</p><p>当然，这个变量和原来的变量是完全不相干的对象，它们只是内容相同而已。</p><p>Pickle的问题和所有其他编程语言特有的序列化问题一样，就是它只能用于Python，并且可能不同版本的Python彼此都不兼容，因此，只能用Pickle保存那些不重要的数据，不能成功地反序列化也没关系。</p><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。</p><p>JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</p><table><thead><tr><th align="left">JSON类型</th><th align="left">Python类型</th></tr></thead><tbody><tr><td align="left">{}</td><td align="left">dict</td></tr><tr><td align="left">[]</td><td align="left">list</td></tr><tr><td align="left">“string”</td><td align="left">str</td></tr><tr><td align="left">1234.56</td><td align="left">int或float</td></tr><tr><td align="left">true/false</td><td align="left">True/False</td></tr><tr><td align="left">null</td><td align="left">None</td></tr></tbody></table><p>Python内置的<code>json</code>模块提供了非常完善的Python对象到JSON格式的转换。我们先看看如何把Python对象变成一个JSON：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> json<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> dict<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> score<span class="token operator">=</span><span class="token number">88</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token string">'{"age": 20, "score": 88, "name": "Bob"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>dumps()</code>方法返回一个<code>str</code>，内容就是标准的JSON。类似的，<code>dump()</code>方法可以直接把JSON写入一个<code>file-like Object</code>。</p><p>要把JSON反序列化为Python对象，用<code>loads()</code>或者对应的<code>load()</code>方法，前者把JSON的字符串反序列化，后者从<code>file-like Object</code>中读取字符串并反序列化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> json_str <span class="token operator">=</span> <span class="token string">'{"age": 20, "score": 88, "name": "Bob"}'</span><span class="token operator">>></span><span class="token operator">></span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'score'</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Bob'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于JSON标准规定JSON编码是UTF-8，所以我们总是能正确地在Python的<code>str</code>与JSON的字符串之间转换。</p><h4 id="JSON进阶"><a href="#JSON进阶" class="headerlink" title="JSON进阶"></a>JSON进阶</h4><p>Python的<code>dict</code>对象可以直接序列化为JSON的<code>{}</code>，不过，很多时候，我们更喜欢用<code>class</code>表示对象，比如定义<code>Student</code>类，然后序列化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age        self<span class="token punctuation">.</span>score <span class="token operator">=</span> scores <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行代码，毫不留情地得到一个<code>TypeError</code>：</p><pre class="line-numbers language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>TypeError<span class="token punctuation">:</span> <span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student object at <span class="token number">0x10603cc50</span><span class="token operator">></span> <span class="token keyword">is</span> <span class="token operator">not</span> JSON serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>错误的原因是<code>Student</code>对象不是一个可序列化为JSON的对象。</p><p>如果连<code>class</code>的实例对象都无法序列化为JSON，这肯定不合理！</p><p>别急，我们仔细看看<code>dumps()</code>方法的参数列表，可以发现，除了第一个必须的<code>obj</code>参数外，<code>dumps()</code>方法还提供了一大堆的可选参数：</p><p><a href="https://docs.python.org/3/library/json.html#json.dumps" target="_blank" rel="noopener">https://docs.python.org/3/library/json.html#json.dumps</a></p><p>这些可选参数就是让我们来定制JSON序列化。前面的代码之所以无法把<code>Student</code>类实例序列化为JSON，是因为默认情况下，<code>dumps()</code>方法不知道如何将<code>Student</code>实例变为一个JSON的<code>{}</code>对象。</p><p>可选参数<code>default</code>就是把任意一个对象变成一个可序列为JSON的对象，我们只需要为<code>Student</code>专门写一个转换函数，再把函数传进去即可：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">student2dict</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> std<span class="token punctuation">.</span>name<span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span> std<span class="token punctuation">.</span>age<span class="token punctuation">,</span>        <span class="token string">'score'</span><span class="token punctuation">:</span> std<span class="token punctuation">.</span>score    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，<code>Student</code>实例首先被<code>student2dict()</code>函数转换成<code>dict</code>，然后再被顺利序列化为JSON：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>s<span class="token punctuation">,</span> default<span class="token operator">=</span>student2dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不过，下次如果遇到一个<code>Teacher</code>类的实例，照样无法序列化为JSON。我们可以偷个懒，把任意<code>class</code>的实例变为<code>dict</code>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>s<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token keyword">lambda</span> obj<span class="token punctuation">:</span> obj<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为通常<code>class</code>的实例都有一个<code>__dict__</code>属性，它就是一个<code>dict</code>，用来存储实例变量。也有少数例外，比如定义了<code>__slots__</code>的class。</p><p>同样的道理，如果我们要把JSON反序列化为一个<code>Student</code>对象实例，<code>loads()</code>方法首先转换出一个<code>dict</code>对象，然后，我们传入的<code>object_hook</code>函数负责把<code>dict</code>转换为<code>Student</code>实例：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dict2student</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> Student<span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> json_str <span class="token operator">=</span> <span class="token string">'{"age": 20, "score": 88, "name": "Bob"}'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>json_str<span class="token punctuation">,</span> object_hook<span class="token operator">=</span>dict2student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>Student object at <span class="token number">0x10cd3c190</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打印出的是反序列化的<code>Student</code>实例对象。</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>要让Python程序实现多进程（multiprocessing），我们先了解操作系统的相关知识。</p><p>Unix/Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p><p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p><p>Python的<code>os</code>模块封装了常见的系统调用，其中就包括<code>fork</code>，可以在Python程序中轻松创建子进程：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Process (%s) start...'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Only works on Unix/Linux/Mac:</span>pid <span class="token operator">=</span> os<span class="token punctuation">.</span>fork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I am child process (%s) and my parent is %s.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>getppid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'I (%s) just created a child process (%s).'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-python"><code class="language-python">Process <span class="token punctuation">(</span><span class="token number">876</span><span class="token punctuation">)</span> start<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>I <span class="token punctuation">(</span><span class="token number">876</span><span class="token punctuation">)</span> just created a child process <span class="token punctuation">(</span><span class="token number">877</span><span class="token punctuation">)</span><span class="token punctuation">.</span>I am child process <span class="token punctuation">(</span><span class="token number">877</span><span class="token punctuation">)</span> <span class="token operator">and</span> my parent <span class="token keyword">is</span> <span class="token number">876</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于Windows没有<code>fork</code>调用，上面的代码在Windows上无法运行。而Mac系统是基于BSD（Unix的一种）内核，所以，在Mac下运行是没有问题的，推荐大家用Mac学Python！</p><p>有了<code>fork</code>调用，一个进程在接到新任务时就可以复制出一个子进程来处理新任务，常见的Apache服务器就是由父进程监听端口，每当有新的http请求时，就fork出子进程来处理新的http请求。</p><h4 id="multiprocessing"><a href="#multiprocessing" class="headerlink" title="multiprocessing"></a>multiprocessing</h4><p>如果你打算编写多进程的服务程序，Unix/Linux无疑是正确的选择。由于Windows没有<code>fork</code>调用，难道在Windows上无法用Python编写多进程的程序？</p><p>由于Python是跨平台的，自然也应该提供一个跨平台的多进程支持。<code>multiprocessing</code>模块就是跨平台版本的多进程模块。</p><p><code>multiprocessing</code>模块提供了一个<code>Process</code>类来代表一个进程对象，下面的例子演示了启动一个子进程并等待其结束：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 子进程要执行的代码</span><span class="token keyword">def</span> <span class="token function">run_proc</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Run child process %s (%s)...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Parent process %s.'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>run_proc<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Child process will start.'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Child process end.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre class="line-numbers language-python"><code class="language-python">Parent process <span class="token number">928</span><span class="token punctuation">.</span>Child process will start<span class="token punctuation">.</span>Run child process test <span class="token punctuation">(</span><span class="token number">929</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Process end<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code>实例，用<code>start()</code>方法启动，这样创建进程比<code>fork()</code>还要简单。</p><p><code>join()</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步。</p><h4 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h4><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token punctuation">,</span> random<span class="token keyword">def</span> <span class="token function">long_time_task</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Run task %s (%s)...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Task %s runs %0.2f seconds.'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Parent process %s.'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>long_time_task<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Waiting for all subprocesses done...'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'All subprocesses done.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre class="line-numbers language-python"><code class="language-python">Parent process <span class="token number">669</span><span class="token punctuation">.</span>Waiting <span class="token keyword">for</span> all subprocesses done<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Run task <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">671</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Run task <span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">672</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Run task <span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">673</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Run task <span class="token number">3</span> <span class="token punctuation">(</span><span class="token number">674</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Task <span class="token number">2</span> runs <span class="token number">0.14</span> seconds<span class="token punctuation">.</span>Run task <span class="token number">4</span> <span class="token punctuation">(</span><span class="token number">673</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Task <span class="token number">1</span> runs <span class="token number">0.27</span> seconds<span class="token punctuation">.</span>Task <span class="token number">3</span> runs <span class="token number">0.86</span> seconds<span class="token punctuation">.</span>Task <span class="token number">0</span> runs <span class="token number">1.41</span> seconds<span class="token punctuation">.</span>Task <span class="token number">4</span> runs <span class="token number">1.91</span> seconds<span class="token punctuation">.</span>All subprocesses done<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码解读：</p><p>对<code>Pool</code>对象调用<code>join()</code>方法会等待所有子进程执行完毕，调用<code>join()</code>之前必须先调用<code>close()</code>，调用<code>close()</code>之后就不能继续添加新的<code>Process</code>了。</p><p>请注意输出的结果，task <code>0</code>，<code>1</code>，<code>2</code>，<code>3</code>是立刻执行的，而task <code>4</code>要等待前面某个task完成后才执行，这是因为<code>Pool</code>的默认大小在我的电脑上是4，因此，最多同时执行4个进程。这是<code>Pool</code>有意设计的限制，并不是操作系统的限制。如果改成：</p><pre class="line-numbers language-python"><code class="language-python">p <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以同时跑5个进程。</p><p>由于<code>Pool</code>的默认大小是CPU的核数，如果你不幸拥有8核CPU，你要提交至少9个子进程才能看到上面的等待效果。</p><h4 id="子进程"><a href="#子进程" class="headerlink" title="子进程"></a>子进程</h4><p>很多时候，子进程并不是自身，而是一个外部进程。我们创建了子进程后，还需要控制子进程的输入和输出。</p><p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出。</p><p>下面的例子演示了如何在Python代码中运行命令<code>nslookup www.python.org</code>，这和命令行直接运行的效果是一样的：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'$ nslookup www.python.org'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nslookup'</span><span class="token punctuation">,</span> <span class="token string">'www.python.org'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exit code:'</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-python"><code class="language-python">$ nslookup www<span class="token punctuation">.</span>python<span class="token punctuation">.</span>orgServer<span class="token punctuation">:</span>        <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">19.4</span>Address<span class="token punctuation">:</span>    <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">19.4</span><span class="token comment" spellcheck="true">#53</span>Non<span class="token operator">-</span>authoritative answer<span class="token punctuation">:</span>www<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org    canonical name <span class="token operator">=</span> python<span class="token punctuation">.</span>map<span class="token punctuation">.</span>fastly<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Name<span class="token punctuation">:</span>    python<span class="token punctuation">.</span>map<span class="token punctuation">.</span>fastly<span class="token punctuation">.</span>netAddress<span class="token punctuation">:</span> <span class="token number">199.27</span><span class="token punctuation">.</span><span class="token number">79.223</span>Exit code<span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果子进程还需要输入，则可以通过<code>communicate()</code>方法输入：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'$ nslookup'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'nslookup'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>output<span class="token punctuation">,</span> err <span class="token operator">=</span> p<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span>b<span class="token string">'set q=mx\npython.org\nexit\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Exit code:'</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>returncode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码相当于在命令行执行命令<code>nslookup</code>，然后手动输入：</p><pre class="line-numbers language-python"><code class="language-python">set q<span class="token operator">=</span>mxpython<span class="token punctuation">.</span>orgexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-python"><code class="language-python">$ nslookupServer<span class="token punctuation">:</span>        <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">19.4</span>Address<span class="token punctuation">:</span>    <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">19.4</span><span class="token comment" spellcheck="true">#53</span>Non<span class="token operator">-</span>authoritative answer<span class="token punctuation">:</span>python<span class="token punctuation">.</span>org    mail exchanger <span class="token operator">=</span> <span class="token number">50</span> mail<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org<span class="token punctuation">.</span>Authoritative answers can be found <span class="token keyword">from</span><span class="token punctuation">:</span>mail<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org    internet address <span class="token operator">=</span> <span class="token number">82.94</span><span class="token punctuation">.</span><span class="token number">164.166</span>mail<span class="token punctuation">.</span>python<span class="token punctuation">.</span>org    has AAAA address <span class="token number">2001</span><span class="token punctuation">:</span><span class="token number">888</span><span class="token punctuation">:</span><span class="token number">2000</span><span class="token punctuation">:</span>d<span class="token punctuation">:</span><span class="token punctuation">:</span>a6Exit code<span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p><code>Process</code>之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的<code>multiprocessing</code>模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code>等多种方式来交换数据。</p><p>我们以<code>Queue</code>为例，在父进程中创建两个子进程，一个往<code>Queue</code>里写数据，一个从<code>Queue</code>里读数据：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> Queue<span class="token keyword">import</span> os<span class="token punctuation">,</span> time<span class="token punctuation">,</span> random<span class="token comment" spellcheck="true"># 写数据进程执行的代码:</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Process to write: %s'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> value <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Put %s to queue...'</span> <span class="token operator">%</span> value<span class="token punctuation">)</span>        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 读数据进程执行的代码:</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Process to read: %s'</span> <span class="token operator">%</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Get %s from queue.'</span> <span class="token operator">%</span> value<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 父进程创建Queue，并传给各个子进程：</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    pw <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pr <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>read<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动子进程pw，写入:</span>    pw<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动子进程pr，读取:</span>    pr<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等待pw结束:</span>    pw<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># pr进程里是死循环，无法等待其结束，只能强行终止:</span>    pr<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下：</p><pre class="line-numbers language-python"><code class="language-python">Process to write<span class="token punctuation">:</span> <span class="token number">50563</span>Put A to queue<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Process to read<span class="token punctuation">:</span> <span class="token number">50564</span>Get A <span class="token keyword">from</span> queue<span class="token punctuation">.</span>Put B to queue<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Get B <span class="token keyword">from</span> queue<span class="token punctuation">.</span>Put C to queue<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Get C <span class="token keyword">from</span> queue<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Unix/Linux下，<code>multiprocessing</code>模块封装了<code>fork()</code>调用，使我们不需要关注<code>fork()</code>的细节。由于Windows没有<code>fork</code>调用，因此，<code>multiprocessing</code>需要“模拟”出<code>fork</code>的效果，父进程所有Python对象都必须通过pickle序列化再传到子进程去，所以，如果<code>multiprocessing</code>在Windows下调用失败了，要先考虑是不是pickle失败了。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>在Unix/Linux下，可以使用<code>fork()</code>调用实现多进程。</p><p>要实现跨平台的多进程，可以使用<code>multiprocessing</code>模块。</p><p>进程间通信是通过<code>Queue</code>、<code>Pipes</code>等实现的。</p><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。</p><p>我们前面提到了进程是由若干线程组成的，一个进程至少有一个线程。</p><p>由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持，Python也不例外，并且，Python的线程是真正的Posix Thread，而不是模拟出来的线程。</p><p>Python的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code>是高级模块，对<code>_thread</code>进行了封装。绝大多数情况下，我们只需要使用<code>threading</code>这个高级模块。</p><p>启动一个线程就是把一个函数传入并创建<code>Thread</code>实例，然后调用<code>start()</code>开始执行：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token punctuation">,</span> threading<span class="token comment" spellcheck="true"># 新线程执行的代码:</span><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    n <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s >>> %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s is running...'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'LoopThread'</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'thread %s ended.'</span> <span class="token operator">%</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre><code>thread MainThread is running...thread LoopThread is running...thread LoopThread &gt;&gt;&gt; 1thread LoopThread &gt;&gt;&gt; 2thread LoopThread &gt;&gt;&gt; 3thread LoopThread &gt;&gt;&gt; 4thread LoopThread &gt;&gt;&gt; 5thread LoopThread ended.thread MainThread ended.</code></pre><p>由于任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的<code>threading</code>模块有个<code>current_thread()</code>函数，它永远返回当前线程的实例。主线程实例的名字叫<code>MainThread</code>，子线程的名字在创建时指定，我们用<code>LoopThread</code>命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为<code>Thread-1</code>，<code>Thread-2</code>……</p><h4 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h4><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。</p><p>我们必须确保一个线程在修改<code>balance</code>的时候，别的线程一定不能改。</p><p>创建一个锁就是通过<code>threading.Lock()</code>来实现：</p><pre><code>balance = 0lock = threading.Lock()def run_thread(n):    for i in range(100000):        # 先要获取锁:        lock.acquire()        try:            # 放心地改吧:            change_it(n)        finally:            # 改完了一定要释放锁:            lock.release()</code></pre><p>当多个线程同时执行<code>lock.acquire()</code>时，只有一个线程能成功地获取锁，然后继续执行代码，其他线程就继续等待直到获得锁为止。</p><p>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用<code>try...finally</code>来确保锁一定会被释放。</p><p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。其次，由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。</p><h4 id="多核CPU"><a href="#多核CPU" class="headerlink" title="多核CPU"></a>多核CPU</h4><p>如果你不幸拥有一个多核CPU，你肯定在想，多核应该可以同时执行多个线程。</p><p>如果写一个死循环的话，会出现什么情况呢？</p><p>打开Mac OS X的Activity Monitor，或者Windows的Task Manager，都可以监控某个进程的CPU使用率。</p><p>我们可以监控到一个死循环线程会100%占用一个CPU。</p><p>如果有两个死循环线程，在多核CPU中，可以监控到会占用200%的CPU，也就是占用两个CPU核心。</p><p>要想把N核CPU的核心全部跑满，就必须启动N个死循环线程。</p><p>试试用Python写个死循环：</p><pre><code>import threading, multiprocessingdef loop():    x = 0    while True:        x = x ^ 1for i in range(multiprocessing.cpu_count()):    t = threading.Thread(target=loop)    t.start()</code></pre><p>启动与CPU核心数量相同的N个线程，在4核CPU上可以监控到CPU占用率仅有102%，也就是仅使用了一核。</p><p>但是用C、C++或Java来改写相同的死循环，直接可以把全部核心跑满，4核就跑到400%，8核就跑到800%，为什么Python不行呢？</p><p>因为Python的线程虽然是真正的线程，但解释器执行代码时，有一个GIL锁：Global Interpreter Lock，任何Python线程执行前，必须先获得GIL锁，然后，每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行。这个GIL全局锁实际上把所有线程的执行代码都给上了锁，所以，多线程在Python中只能交替执行，即使100个线程跑在100核CPU上，也只能用到1个核。</p><p>GIL是Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带GIL的解释器。</p><p>所以，<code>在Python中，可以使用多线程，但不要指望能有效利用多核。</code>如果一定要通过多线程利用多核，那只能通过C扩展来实现，不过这样就失去了Python简单易用的特点。</p><p>不过，也不用过于担心，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务。多个Python进程有各自独立的GIL锁，互不影响。</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>多线程编程，模型复杂，容易发生冲突，必须用锁加以隔离，同时，又要小心死锁的发生。</p><p>Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。</p><h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>在多线程环境下，每个线程都有自己的数据。一个线程使用自己的局部变量比使用全局变量好，因为局部变量只有线程自己能看见，不会影响其他线程，而全局变量的修改必须加锁。</p><p>但是局部变量也有问题，就是在函数调用的时候，传递起来很麻烦：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_student</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    std <span class="token operator">=</span> Student<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># std是局部变量，但是每个函数都要用它，因此必须传进去：</span>    do_task_1<span class="token punctuation">(</span>std<span class="token punctuation">)</span>    do_task_2<span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">do_task_1</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">:</span>    do_subtask_1<span class="token punctuation">(</span>std<span class="token punctuation">)</span>    do_subtask_2<span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">do_task_2</span><span class="token punctuation">(</span>std<span class="token punctuation">)</span><span class="token punctuation">:</span>    do_subtask_2<span class="token punctuation">(</span>std<span class="token punctuation">)</span>    do_subtask_2<span class="token punctuation">(</span>std<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个函数一层一层调用都这么传参数那还得了？用全局变量？也不行，因为每个线程处理不同的<code>Student</code>对象，不能共享。</p><p>如果用一个全局<code>dict</code>存放所有的<code>Student</code>对象，然后以<code>thread</code>自身作为<code>key</code>获得线程对应的<code>Student</code>对象如何？</p><pre class="line-numbers language-python"><code class="language-python">global_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">std_thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    std <span class="token operator">=</span> Student<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把std放到全局变量global_dict中：</span>    global_dict<span class="token punctuation">[</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> std    do_task_1<span class="token punctuation">(</span><span class="token punctuation">)</span>    do_task_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">do_task_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 不传入std，而是根据当前线程查找：</span>    std <span class="token operator">=</span> global_dict<span class="token punctuation">[</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">do_task_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 任何函数都可以查找出当前线程的std变量：</span>    std <span class="token operator">=</span> global_dict<span class="token punctuation">[</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式理论上是可行的，它最大的优点是消除了<code>std</code>对象在每层函数中的传递问题，但是，每个函数获取<code>std</code>的代码有点丑。</p><p>有没有更简单的方式？</p><p><code>ThreadLocal</code>应运而生，不用查找<code>dict</code>，<code>ThreadLocal</code>帮你自动做这件事：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token comment" spellcheck="true"># 创建全局ThreadLocal对象:</span>local_school <span class="token operator">=</span> threading<span class="token punctuation">.</span>local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取当前线程关联的student:</span>    std <span class="token operator">=</span> local_school<span class="token punctuation">.</span>student    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s (in %s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>std<span class="token punctuation">,</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_thread</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 绑定ThreadLocal的student:</span>    local_school<span class="token punctuation">.</span>student <span class="token operator">=</span> name    process_student<span class="token punctuation">(</span><span class="token punctuation">)</span>t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span> process_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Thread-A'</span><span class="token punctuation">)</span>t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span> process_thread<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'Thread-B'</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>t1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>t2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果：</p><pre><code>Hello, Alice (in Thread-A)Hello, Bob (in Thread-B)</code></pre><p>全局变量<code>local_school</code>就是一个<code>ThreadLocal</code>对象，每个<code>Thread</code>对它都可以读写<code>student</code>属性，但互不影响。你可以把<code>local_school</code>看成全局变量，但每个属性如<code>local_school.student</code>都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，<code>ThreadLocal</code>内部会处理。</p><p>可以理解为全局变量<code>local_school</code>是一个<code>dict</code>，不但可以用<code>local_school.student</code>，还可以绑定其他变量，如<code>local_school.teacher</code>等等。</p><p><code>ThreadLocal</code>最常用的地方就是为每个线程绑定一个数据库连接，HTTP请求，用户身份信息等，这样一个线程的所有调用到的处理函数都可以非常方便地访问这些资源。</p><p><strong>小结</strong></p><p>一个<code>ThreadLocal</code>变量虽然是全局变量，但每个线程都只能读写自己线程的独立副本，互不干扰。<code>ThreadLocal</code>解决了参数在一个线程中各个函数之间互相传递的问题。</p><h3 id="进程-vs-线程"><a href="#进程-vs-线程" class="headerlink" title="进程 vs. 线程"></a>进程 vs. 线程</h3><p>我们介绍了多进程和多线程，这是实现多任务最常用的两种方式。现在，我们来讨论一下这两种方式的优缺点。</p><p>首先，要实现多任务，通常我们会设计Master-Worker模式，Master负责分配任务，Worker负责执行任务，因此，多任务环境下，通常是一个Master，多个Worker。</p><p>如果用多进程实现Master-Worker，主进程就是Master，其他进程就是Worker。</p><p>如果用多线程实现Master-Worker，主线程就是Master，其他线程就是Worker。</p><p>多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是Master进程只负责分配任务，挂掉的概率低）著名的Apache最早就是采用多进程模式。</p><p>多进程模式的缺点是创建进程的代价大，在Unix/Linux系统下，用<code>fork</code>调用还行，在Windows下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p><p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。在Windows上，如果一个线程执行的代码出了问题，你经常可以看到这样的提示：“该程序执行了非法操作，即将关闭”，其实往往是某个线程出了问题，但是操作系统会强制结束整个进程。</p><p>在Windows下，多线程的效率比多进程要高，所以微软的IIS服务器默认采用多线程模式。由于多线程存在稳定性的问题，IIS的稳定性就不如Apache。为了缓解这个问题，IIS和Apache现在又有多进程+多线程的混合模式，真是把问题越搞越复杂。</p><h4 id="线程切换"><a href="#线程切换" class="headerlink" title="线程切换"></a>线程切换</h4><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？</p><p>我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。</p><p>如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型，或者批处理任务模型。</p><p>假设你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以幼儿园小朋友的眼光来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。</p><p>所以，多任务一旦多到一个限度，就会消耗掉系统所有的资源，结果效率急剧下降，所有任务都做不好。</p><h4 id="计算密集型-vs-IO密集型"><a href="#计算密集型-vs-IO密集型" class="headerlink" title="计算密集型 vs. IO密集型"></a>计算密集型 vs. IO密集型</h4><p>是否采用多任务的第二个考虑是任务的类型。我们可以把任务分为计算密集型和IO密集型。</p><p>计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如计算圆周率、对视频进行高清解码等等，全靠CPU的运算能力。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数。</p><p>计算密集型任务由于主要消耗CPU资源，因此，代码运行效率至关重要。Python这样的脚本语言运行效率很低，完全不适合计算密集型任务。对于计算密集型任务，最好用C语言编写。</p><p>第二种任务的类型是IO密集型，涉及到网络、磁盘IO的任务都是IO密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待IO操作完成（因为IO的速度远远低于CPU和内存的速度）。对于IO密集型任务，任务越多，CPU效率越高，但也有一个限度。常见的大部分任务都是IO密集型任务，比如Web应用。</p><p>IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。</p><h4 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h4><p>考虑到CPU和IO之间巨大的速度差异，一个任务在执行的过程中大部分时间都在等待IO操作，单进程单线程模型会导致别的任务无法并行执行，因此，我们才需要多进程模型或者多线程模型来支持多任务并发执行。</p><p>现代操作系统对IO操作已经做了巨大的改进，最大的特点就是支持异步IO。如果充分利用操作系统提供的异步IO支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型，Nginx就是支持异步IO的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。由于系统总的进程数量十分有限，因此操作系统调度非常高效。用异步IO编程模型来实现多任务是一个主要的趋势。</p><p>对应到Python语言，单线程的异步编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。我们会在后面讨论如何编写协程。</p><h3 id="分布式进程"><a href="#分布式进程" class="headerlink" title="分布式进程"></a>分布式进程</h3><p>在Thread和Process中，应当优选Process，因为Process更稳定，而且，Process可以分布到多台机器上，而Thread最多只能分布到同一台机器的多个CPU上。</p><p>Python的<code>multiprocessing</code>模块不但支持多进程，其中<code>managers</code>子模块还支持把多进程分布到多台机器上。一个服务进程可以作为调度者，将任务分布到其他多个进程中，依靠网络通信。由于<code>managers</code>模块封装很好，不必了解网络通信的细节，就可以很容易地编写分布式多进程程序。</p><p>举个例子：如果我们已经有一个通过<code>Queue</code>通信的多进程程序在同一台机器上运行，现在，由于处理任务的进程任务繁重，希望把发送任务的进程和处理任务的进程分布到两台机器上。怎么用分布式进程实现？</p><p>原有的<code>Queue</code>可以继续使用，但是，通过<code>managers</code>模块把<code>Queue</code>通过网络暴露出去，就可以让其他机器的进程访问<code>Queue</code>了。</p><p>我们先看服务进程，服务进程负责启动<code>Queue</code>，把<code>Queue</code>注册到网络上，然后往<code>Queue</code>里面写入任务：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># task_master.py</span><span class="token keyword">import</span> random<span class="token punctuation">,</span> time<span class="token punctuation">,</span> queue<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token comment" spellcheck="true"># 发送任务的队列:</span>task_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 接收结果的队列:</span>result_queue <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从BaseManager继承的QueueManager:</span><span class="token keyword">class</span> <span class="token class-name">QueueManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 把两个Queue都注册到网络上, callable参数关联了Queue对象:</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_task_queue'</span><span class="token punctuation">,</span> callable<span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> task_queue<span class="token punctuation">)</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_result_queue'</span><span class="token punctuation">,</span> callable<span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> result_queue<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 绑定端口5000, 设置验证码'abc':</span>manager <span class="token operator">=</span> QueueManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span>b<span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 启动Queue:</span>manager<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获得通过网络访问的Queue对象:</span>task <span class="token operator">=</span> manager<span class="token punctuation">.</span>get_task_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> manager<span class="token punctuation">.</span>get_result_queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 放几个任务进去:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Put task %d...'</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>    task<span class="token punctuation">.</span>put<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从result队列读取结果:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Try get results...'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> result<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Result: %s'</span> <span class="token operator">%</span> r<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭:</span>manager<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'master exit.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，当我们在一台机器上写多进程程序时，创建的<code>Queue</code>可以直接拿来用，但是，在分布式多进程环境下，添加任务到<code>Queue</code>不可以直接对原始的<code>task_queue</code>进行操作，那样就绕过了<code>QueueManager</code>的封装，必须通过<code>manager.get_task_queue()</code>获得的<code>Queue</code>接口添加。</p><p>然后，在另一台机器上启动任务进程（本机上启动也可以）：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># task_worker.py</span><span class="token keyword">import</span> time<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> queue<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>managers <span class="token keyword">import</span> BaseManager<span class="token comment" spellcheck="true"># 创建类似的QueueManager:</span><span class="token keyword">class</span> <span class="token class-name">QueueManager</span><span class="token punctuation">(</span>BaseManager<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 由于这个QueueManager只从网络上获取Queue，所以注册时只提供名字:</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_task_queue'</span><span class="token punctuation">)</span>QueueManager<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'get_result_queue'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 连接到服务器，也就是运行task_master.py的机器:</span>server_addr <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connect to server %s...'</span> <span class="token operator">%</span> server_addr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 端口和验证码注意保持与task_master.py设置的完全一致:</span>m <span class="token operator">=</span> QueueManager<span class="token punctuation">(</span>address<span class="token operator">=</span><span class="token punctuation">(</span>server_addr<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authkey<span class="token operator">=</span>b<span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从网络连接:</span>m<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取Queue的对象:</span>task <span class="token operator">=</span> m<span class="token punctuation">.</span>get_task_queue<span class="token punctuation">(</span><span class="token punctuation">)</span>result <span class="token operator">=</span> m<span class="token punctuation">.</span>get_result_queue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从task队列取任务,并把结果写入result队列:</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> task<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run task %d * %d...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> <span class="token string">'%d * %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token operator">*</span>n<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span>put<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    <span class="token keyword">except</span> Queue<span class="token punctuation">.</span>Empty<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task queue is empty.'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 处理结束:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'worker exit.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任务进程要通过网络连接到服务进程，所以要指定服务进程的IP。</p><p>现在，可以试试分布式进程的工作效果了。先启动<code>task_master.py</code>服务进程：</p><pre><code>$ python3 task_master.py Put task 3411...Put task 1605...Put task 1398...Put task 4729...Put task 5300...Put task 7471...Put task 68...Put task 4219...Put task 339...Put task 7866...Try get results...</code></pre><p><code>task_master.py</code>进程发送完任务后，开始等待<code>result</code>队列的结果。现在启动<code>task_worker.py</code>进程：</p><pre><code>$ python3 task_worker.pyConnect to server 127.0.0.1...run task 3411 * 3411...run task 1605 * 1605...run task 1398 * 1398...run task 4729 * 4729...run task 5300 * 5300...run task 7471 * 7471...run task 68 * 68...run task 4219 * 4219...run task 339 * 339...run task 7866 * 7866...worker exit.</code></pre><p><code>task_worker.py</code>进程结束，在<code>task_master.py</code>进程中会继续打印出结果：</p><pre><code>Result: 3411 * 3411 = 11634921Result: 1605 * 1605 = 2576025Result: 1398 * 1398 = 1954404Result: 4729 * 4729 = 22363441Result: 5300 * 5300 = 28090000Result: 7471 * 7471 = 55815841Result: 68 * 68 = 4624Result: 4219 * 4219 = 17799961Result: 339 * 339 = 114921Result: 7866 * 7866 = 61873956</code></pre><p>这个简单的Master/Worker模型有什么用？其实这就是一个简单但真正的分布式计算，把代码稍加改造，启动多个worker，就可以把任务分布到几台甚至几十台机器上，比如把计算<code>n*n</code>的代码换成发送邮件，就实现了邮件队列的异步发送。</p><p>Queue对象存储在哪？注意到<code>task_worker.py</code>中根本没有创建Queue的代码，所以，Queue对象存储在<code>task_master.py</code>进程中：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823151204722.png" alt="image-20210823151204722"></p><p>而<code>Queue</code>之所以能通过网络访问，就是通过<code>QueueManager</code>实现的。由于<code>QueueManager</code>管理的不止一个<code>Queue</code>，所以，要给每个<code>Queue</code>的网络调用接口起个名字，比如<code>get_task_queue</code>。</p><p><code>authkey</code>有什么用？这是为了保证两台机器正常通信，不被其他机器恶意干扰。如果<code>task_worker.py</code>的<code>authkey</code>和<code>task_master.py</code>的<code>authkey</code>不一致，肯定连接不上。</p><p><strong>小结</strong></p><p>Python的分布式进程接口简单，封装良好，适合需要把繁重任务分布到多台机器的环境下。</p><p>注意Queue的作用是用来传递任务和接收结果，每个任务的描述数据量要尽量小。比如发送一个处理日志文件的任务，就不要发送几百兆的日志文件本身，而是发送日志文件存放的完整路径，由Worker进程再去共享的磁盘上读取文件。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议介绍</title>
      <link href="/wang-luo-xie-yi-jie-shao.html"/>
      <url>/wang-luo-xie-yi-jie-shao.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h1><blockquote><p>注：本文参考链接：<a href="https://zhuanlan.zhihu.com/p/128000072及https://zhuanlan.zhihu.com/p/268196525" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/128000072及https://zhuanlan.zhihu.com/p/268196525</a></p></blockquote><p>如下图所示，计算机网络体系结构主要包括OSI七层协议模型、TCP/IP四层模型、TCP/IP五层模型。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823155454017.png" alt="结构对照"></p><h2 id="OSI七层协议模型"><a href="#OSI七层协议模型" class="headerlink" title="OSI七层协议模型"></a>OSI七层协议模型</h2><p><strong>OSI七层模型</strong>（Open System Interconnect）即开放系统互连参考模型，是由<strong>ISO</strong>（International Organization for Standardization）<strong>国际标准化组织</strong>提出的，用于计算机或通信系统间互联的标准体系。</p><p>从上到下可分为七层：<strong>每一层都完成特定的功能，并为上一层提供服务，并使用下层所提供的服务。</strong></p><ul><li><p>7 应用层（Application）：为用户的应用程序（如：电子邮件、文件传输和仿真终端）提供网络服务。</p></li><li><p>6 表示层（Presentation）：将信息表示为一定形式和格式的数据流。</p></li><li><p>5 会话层（Session）：负责通信主机之间会话的建立、管理和拆除，协调通信双方的会话。</p></li><li><p>4 传输层（Transport）：负责通信主机间端到端的连接。如：TCP（传输控制协议TCP，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）和UDP（用户数据报协议UDP，与TCP特性恰恰相反，用于传输可靠性要求不高、数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。</p></li><li><p>3 网络层（Network）：负责将分组从源机送到目的机，包括寻址和最优路径选择等。</p></li><li><p>2 数据链路层（Data Link）：定义了如何让数据格式化进行传输，以及如何让控制对物理介质的访问。提供可靠的帧传递，实现差错控制、流控等等。</p></li><li><p>1 物理层（Physical）：主要定义物理设备标准，例如网线的接口类型、光线的接口类型、各种传输介质的传</p><p>输速率等。提供透明的比特流（0、1流）传递。</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-1ebda43e282ef7b086285563fa32a8c6_r.jpg" alt="preview"></p><h2 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h2><p>TCP/IP四层参考模型从上到下可分为四层：</p><ul><li>4 应用层（Application）：为用户提供所需要的各种服务</li><li>3 传输层（Transport）：为应用层实体提供端到端的通信功能，保证了数据包的顺序传送及数据的完整性</li><li>2 网络层（Internet）：主要解决主机到主机的通信问题</li><li>1 链路层（Network Access）：负责监视数据在主机和网络之间的交换</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/22932333-102c822bf6b88dbd.png" alt="img"></p><h2 id="TCP-IP五层模型"><a href="#TCP-IP五层模型" class="headerlink" title="TCP/IP五层模型"></a>TCP/IP五层模型</h2><p>TCP/IP协议中最重要的特点就是分层。由上往下分别为 应用层，传输层，网络层，数据链路层，物理层：</p><ul><li>5 应用层（Application）：TCP/IP模型将OSI参考模型中的会话层和表示层的功能合并到应用层实现。</li><li>4 传输层（Transport）：在TCP/IP模型中，传输层的功能是使源端主机和目标端主机上的对等实体可以进行会话。在传输层定义了两种服务质量不同的协议。即：传输控制协议TCP和用户数据报协议UDP。</li><li>3 网络层（Internet）：网络层是整个TCP/IP协议栈的核心。它的功能是把分组发往目标网络或主机。同时，为了尽快地发送分组，可能需要沿不同的路径同时进行分组传递。因此，分组到达的顺序和发送的顺序可能不同，这就需要上层必须对分组进行排序。网络层定义了分组格式和协议，即IP协议（Internet Protocol ）。</li><li>2 数据链路层（Data Link）：控制网络层与物理层之间的通信，主要功能是保证物理线路上进行可靠的数据传递。为了保证传输，从网络层接收到的数据被分割成特定的可被物理层传输的帧。帧是用来移动数据结构的结构包，他不仅包含原始数据，还包含发送方和接收方的物理地址以及纠错和控制信息。其中的地址确定了帧将发送到何处，而纠错和控制信息则确保帧无差错到达。如果在传达数据时，接收点检测到所传数据中有差错，就要通知发送方重发这一帧。</li><li>1 物理层（Physical）：该层负责比特流在节点之间的传输，即负责物理传输，这一层的协议既与链路有关，也与传输的介质有关。通俗来说就是把计算机连接起来的物理手段。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823161151750.png" alt="image-20210823161151750"></p><h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>用户数据报协议 UDP（User Datagram Protocol）:无连接；尽最大努力的交付；面向报文；无拥塞控制；支持一对一、一对多、多对一、多对多的交互通信；首部开销小(只有四个字段：源端口、目的端口、长度、检验和)。UDP是面向报文的传输方式是应用层交给UDP多长的报文，UDP发送多长的报文，即一次发送一个报文。因此，应用程序必须选择合适大小的报文。</li><li>传输控制协议 TCP（Transmission Control Protocol）:面向连接；每一个TCP连接<code>只能是</code>点对点的(一对一)；提供可靠交付服务；提供全双工通信；面向字节流。应用程序和TCP的交互是一次一个数据块(大小不等)，但TCP把应用程序看成是一连串的无结构的字节流。TCP有一个缓冲，当应该程序传送的数据块太长，TCP就可以把它划分短一些再传送。</li></ul><table><thead><tr><th align="left"></th><th align="left">UDP</th><th align="left">TCP</th></tr></thead><tbody><tr><td align="left">是否连接</td><td align="left">无连接</td><td align="left">面向连接</td></tr><tr><td align="left">是否可靠</td><td align="left">不可靠传输，不使用流量控制和拥塞控制</td><td align="left">可靠传输，使用流量控制和拥塞控制</td></tr><tr><td align="left">连接对象个数</td><td align="left">支持一对一，一对多，多对一和多对多交互通信</td><td align="left">只能是一对一通信</td></tr><tr><td align="left">传输方式</td><td align="left">面向报文</td><td align="left">面向字节流</td></tr><tr><td align="left">首部开销</td><td align="left">首部开销小，仅8字节</td><td align="left">首部最小20字节，最大60字节</td></tr><tr><td align="left">适用场景</td><td align="left">适用于实时应用（IP电话、视频会议、直播等）</td><td align="left">适用于要求可靠传输的应用，例如文件传输</td></tr></tbody></table><h3 id="UDP报文首部格式"><a href="#UDP报文首部格式" class="headerlink" title="UDP报文首部格式"></a>UDP报文首部格式</h3><p>用户数据报有两个字段：数据字段和首部字段，数据字段很简单，只有8个字节，由四个字段组成，每个字段的长度都是两个字节。各字段意义如下：</p><ol><li><strong>源端口：</strong> 源端口号，在需要给对方回信时使用。不需要是可全用0.</li><li><strong>目的端口号：</strong> 这在终点交付报文时必须使用。</li><li><strong>长度：</strong> 用户数据报UDP的长度，最小为8（仅首部）。</li><li><strong>校验和：</strong> 用于校验用户数据报在传输过程是否出错，出错则丢弃该报文。</li></ol><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823170709056.png" alt="image-20210823170709056"></p><h3 id="TCP报文首部格式"><a href="#TCP报文首部格式" class="headerlink" title="TCP报文首部格式:"></a>TCP报文首部格式:</h3><ol><li><strong>源端口和目的端口:</strong> 各占两个字节，分别写入源端口号和目的端口号。</li><li><strong>序号 ：</strong> 占4个字节；用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</li><li><strong>确认号 ：</strong> 占4个字节；期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</li><li><strong>数据偏移 ：</strong> 占4位；指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</li><li><strong>确认 ACK ：</strong>当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</li><li><strong>同步 SYN ：</strong>在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</li><li><strong>终止 FIN ：</strong> 用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</li><li><strong>窗口 ：</strong> 占2字节；窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</li><li><strong>检验和：</strong> 占2个字节；检验和字段检验的范围包括首部和数据这两个部分。在计算检验和时，在TCP报文段的前面加上12字节的伪首部。</li><li><strong>套接字：</strong> TCP连接的端点叫做套接字或插口。端口号拼接到IP地址即构成了套接字。</li></ol><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-cacf8766f040b3b650e0c8e2d89bbf37_720w.jpg" alt="img"></p><h3 id="TCP的三次握手与四次握手"><a href="#TCP的三次握手与四次握手" class="headerlink" title="TCP的三次握手与四次握手"></a>TCP的三次握手与四次握手</h3><p><strong>TCP的三次握手与四次挥手：</strong></p><ul><li>第一次握手：Client将标志位SYN置为1，随机产生一个值seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。</li><li>第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。</li><li>第三次握手：Client收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client与Server之间可以开始传输数据了。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823172538614.png" alt="image-20210823172538614"></p><blockquote><p><strong>为什么要进行三次握手呢?</strong> </p><p>​            第三次握手是为了防止失效的连接请求到达服器，让服务器错误打开连接。客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。<br><strong>如果此时变成两次挥手行不行？</strong></p><p>​            举个打电话的例子，比如：第一次握手：A给B打电话说，你可以听到我说话吗？第二次握手：B收到了A的信息，然后对A说：我可以听得到你说话啊，你能听得到我说话吗？第三次握手：A收到了B的信息，然后说可以的，我要给你发信息啦！<strong>结论：</strong>在三次握手之后，A和B都能确定这么一件事：我能听到你，你也能听到我。这样，就可以开始正常通信了。如果是两次，那将无法确定。</p></blockquote><p>当数据传送完毕,断开连接就需要进行TCP的四次挥手：</p><ul><li>第一次挥手，客户端设置seq和 ACK ,向服务器发送一个 FIN(终结)报文段。此时，客户端进入 FIN_WAIT_1状态，表示客户端没有数据要发送给服务端了。</li><li>第二次挥手，服务端收到了客户端发送的 FIN 报文段，向客户端回了一个 ACK 报文段。</li><li>第三次挥手，服务端向客户端发送FIN 报文段，请求关闭连接，同时服务端进入 LAST_ACK 状态。</li><li>第四次挥手，客户端收到服务端发送的 FIN 报文段后，向服务端发送 ACK 报文段,然后客户端进入 TIME_WAIT状态。服务端收到客户端的 ACK 报文段以后，就关闭连接。此时，客户端等待2MSL（指一个片段在网络中最大的存活时间）后依然没有收到回复，则说明服务端已经正常关闭，这样客户端就可以关闭连接了。四次挥手</li></ul><p><strong>最后完整的过程图</strong></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823172617199.png" alt="image-20210823172617199"></p><blockquote><p><strong>为什么要四次挥手？</strong><br>            客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。<br><strong>HTTP持久连接</strong><br>            如果有大量的连接，每次在连接，关闭都要经历三次握手，四次挥手，这显然会造成性能低下。因此。Http 有一种叫做 长连接（keepalive connections） 的机制。它可以在传输数据后仍保持连接，当客户端需要再次获取数据时，直接使用刚刚空闲下来的连接而无需再次握手。</p></blockquote><h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><blockquote><p>超文本传输协议，是一个基于请求与响应，无状态的，应用层的协议，常基于TCP/IP协议传输数据，互联网上应用最为广泛的一种网络协议,所有的WWW文件都必须遵守这个标准。设计HTTP的初衷是为了提供一种发布和接收HTML页面的方法。</p></blockquote><h4 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点"></a><strong>HTTP特点</strong></h4><ul><li>无状态：协议对客户端没有状态存储，对事物处理没有“记忆”能力，比如访问一个网站需要反复进行登录操作。</li><li>无连接：限制每次连接只处理一个请求。服务器处理完请求，并收到客户的应答后，即断开连接，但是却不利于客户端与服务器保持会话连接，为了弥补这种不足，产生了两项记录HTTP状态的技术，一个叫做Cookie,一个叫做Session。</li><li>基于请求和响应：HTTP协议支持客户端/服务端模式，也是一种请求/响应模式的协议。由客户端发起请求，服务端响应。</li><li>灵活：HTTP允许传输任意类型的数据对象。传输的类型由Content-Type加以标记。</li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。</li><li>通信使用明文、请求和响应不会对通信方进行确认、无法保护数据的完整性。</li></ul><h4 id="HTTP报文组成"><a href="#HTTP报文组成" class="headerlink" title="HTTP报文组成"></a><strong>HTTP报文组成</strong></h4><ul><li>请求行：包括请求方法、URL、协议/版本</li><li>请求头(Request Header)</li><li>请求正文</li><li>状态行</li><li>响应头</li><li>响应正文</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823172941077.png" alt="image-20210823172941077"></p><h4 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a><strong>HTTP的缺点</strong></h4><ol><li>通信使用明文（不加密），内容可能会被窃听。</li><li>不验证通信方的身份，因此有可能遭遇伪装。</li><li>无法证明报文的完整性，所以有可能已遭篡改。</li></ol><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><blockquote><p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-f791c1ea46637f40164370b23220b0d2_720w.jpg" alt="img"></p><p>HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用SSL（Secure Socket Layer）和 TLS（Transport Layer Security）协议代替而已。通常，HTTP 直接和 TCP 通信。当使用 SSL时，则演变成先和 SSL通信，再由 SSL和 TCP 通信了。简言之，所谓 HTTPS，其实就是身披SSL协议这层外壳的 HTTP。</p><h4 id="HTTPS通讯方式"><a href="#HTTPS通讯方式" class="headerlink" title="HTTPS通讯方式"></a><strong>HTTPS通讯方式</strong></h4><ol><li>客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</li><li>Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</li><li>客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</li><li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li><li>Web服务器利用自己的私钥解密出会话密钥。</li><li>Web服务器利用会话密钥加密与客户端之间的通信。</li></ol><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210823173157414.png" alt="image-20210823173157414"></p><h4 id="为什么HTTPS安全"><a href="#为什么HTTPS安全" class="headerlink" title="为什么HTTPS安全"></a>为什么HTTPS安全</h4><ol><li>SSL不仅提供加密处理，加密方式为混合加密。</li><li>SSL而且还使用了一种被称为证书的手段，可用于确定方。证书由值得信任的第三方机构颁发，用以证明服务器和客户端是实际存在的。另外，伪造证书从技术角度来说是异常困难的一件事。所以只要能够确认通信方（服务器或客户端）持有的证书。</li></ol><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-787b052e4ba8de8e95c66774cd76deee_720w.jpg" alt="img"></p><h4 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a><strong>HTTPS的缺点</strong></h4><ol><li>HTTPS协议多次握手，导致页面的加载时间延长近50%；</li><li>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗；</li><li>申请SSL证书需要钱，功能越强大的证书费用越高。</li><li>SSL涉及到的安全算法会消耗 CPU 资源，对服务器资源消耗较大。</li></ol><h4 id="加密方法"><a href="#加密方法" class="headerlink" title="加密方法"></a><strong>加密方法</strong></h4><blockquote><p><strong>对称加密：</strong>加密和解密同用一个密钥的方式称为共享密钥加密（Common keycrypto system），也被叫做对称密钥加密.</p></blockquote><p>对称加密的方式效率比较低，加密速度慢。另外对称加密存在安全隐患的问题，对称加密的密钥必须要传到对方对方才能解密，要是对方在密钥传输的过程获取到密钥，那不是密钥失去了加密的意义，所以完全使用对称加密也是不安全的。</p><blockquote><p><strong>非对称加密：</strong>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥（private key），另一把叫做公开密钥（public key）。顾名思义，私有密钥不能让其他任何人知道，而公开密钥则可以随意发布，任何人都可以获得。公钥加密，私钥解密使用公开密钥加密方式，发送密文的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。</p></blockquote><p>那么非对称加密就一定安全吗？非对称加密也不安全，为什么呢？因为存在中间伪造公钥和私钥，假如在公钥传给对方的时候，有人获取到公钥，虽然她不能用你的公钥做什么，但是它截获公钥后，把自己伪造的公钥发送给对方，这样对方获取的就不是真正的公钥，当对方用公钥进行加密文件，再将文件发送给对方，这样即使截获人没有获取到真正的私钥，但是加密时的公钥是截获人的，他获取到加密文件，只需要用自己的私钥进行解密就成功获取到文件了。</p><blockquote><p><strong>混合加密机制（对称加密与非对称加密结合的方式）</strong>顾名思义也就是对称加密和非对称加密的方式相结合。</p></blockquote><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-b0798d73eea48168bcfc8ea9f7b9edcf_720w.jpg" alt="img"></p><p>如何证明公开没要本身的真实性。因为在公开秘钥传输的过程中，可能真正的公开秘钥已经被攻击者替换掉了。</p><p>为了解决上述问题，于是除了CA认证证书。服务器将CA证书发送给客户端，以进行公开密钥加密方式通信。接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事：</p><ul><li>一：认证服务器的公开密钥的是真实有效的数字证书认证机构。</li><li>二：服务器的公开密钥是值得信赖的。</li></ul><p>那么公开密钥如何交接给客户端是一件非常重要的事，因此多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥，这样就确保公钥是使用认证机构的公钥避免了公钥伪造的过程，进而确保了安全。</p><h3 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h3><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p><ul><li>URI：Uniform Resource Identifier 统一资源<strong>标识</strong>符</li><li>URL：Uniform Resource Location 统一资源<strong>定位</strong>符</li></ul><p>URI 是用来标示 一个具体的资源的，我们可以通过 URI 知道一个资源是什么。</p><p>URL 则是用来定位具体的资源的，标示了一个具体的资源位置。互联网上的每个文件都有一个唯一的URL。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> TCP&amp;UDP </tag>
            
            <tag> HTTP&amp;HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora美化及配置</title>
      <link href="/typora-mei-hua-ji-pei-zhi.html"/>
      <url>/typora-mei-hua-ji-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Typora更换主题"><a href="#一、Typora更换主题" class="headerlink" title="一、Typora更换主题"></a>一、Typora更换主题</h2><ul><li><a href="https://theme.typora.io/" target="_blank" rel="noopener">Typora主题官方下载链接</a></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819103147758.png" alt></p><ul><li>选择喜欢的主题并下载</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819103318928.png" alt="image-20210819103318928"></p><ul><li>打开Typora的主题文件夹</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819103353363.png" alt="image-20210819103353363"></p><ul><li>将下载好的主题解压后复制到Typora的主题文件夹</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819103533708.png" alt="image-20210819103533708"></p><ul><li>重启Typora即可在主题按钮下选择主题</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819103632160.png" alt="image-20210819103632160"></p><h2 id="二、修改Typora背景颜色"><a href="#二、修改Typora背景颜色" class="headerlink" title="二、修改Typora背景颜色"></a>二、修改Typora背景颜色</h2><p>白色背景有时候会与图片的白色背景融合在一起，不容易看到图片边界，因此可以通过以下方式修改下Typora的背景颜色。</p><ul><li><p>打开Typora安装路径下的\Typora\Typora\resources\style\base.css文件</p></li><li><p>修改–bg-color的颜色</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819104558631.png" alt="image-20210819104558631"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819104615514.png" alt="image-20210819104615514"></p><ul><li>保存后重新启动Typora</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819104710412.png" alt="image-20210819104710412"></p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装openLDAP</title>
      <link href="/ubuntu16-04-an-zhuang-openldap.html"/>
      <url>/ubuntu16-04-an-zhuang-openldap.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、OpenLDAP-Server安装步骤"><a href="#一、OpenLDAP-Server安装步骤" class="headerlink" title="一、OpenLDAP Server安装步骤"></a>一、OpenLDAP Server安装步骤</h2><ul><li>安装Berkeley DB</li></ul><pre><code>$&gt; tar zxvf db-4.8.30.tar.gz$&gt; cd db-4.8.30/build_unix/$&gt; ../dist/configure$&gt; make$&gt; sudo make install$&gt; sudo cp /usr/local/BerkeleyDB.4.8/include/* /usr/include/ (for build openldap)$&gt; sudo cp /usr/local/BerkeleyDB.4.8/lib/* /usr/lib (for build openldap)</code></pre><ul><li>安装openssl和ldap-utils</li></ul><pre><code>sudo apt-get install libcurl4-openssl-dev ldap-utils libssl-dev</code></pre><ul><li>安装OpenLDAP</li></ul><pre><code>$&gt; tar zxvf openldap-2.4.50.tgz$&gt; cd openldap-2.4.50/$&gt; export CPPFLAGS=&quot;-I/usr/local/BerkeleyDB.4.8/include&quot;$&gt; export LDFLAGS=&quot;-L/usr/local/BerkeleyDB.4.8/lib&quot;$&gt; ./configure --prefix=/usr/local/openldap --with-tls=openssl$&gt; make depend$&gt; make$&gt; sudo make install</code></pre><h2 id="二、配置OpenLDAP—-无加密"><a href="#二、配置OpenLDAP—-无加密" class="headerlink" title="二、配置OpenLDAP—-无加密"></a>二、配置OpenLDAP—-无加密</h2><ul><li>修改OpenLDAP配置文件</li></ul><pre><code>$&gt; sudo vim /usr/local/openldap/etc/openldap/slapd.conf</code></pre><ul><li>在上述命令打开的slapd.conf配置文件中添加下述内容</li></ul><pre><code>include /usr/local/openldap/etc/openldap/schema/corba.schemainclude /usr/local/openldap/etc/openldap/schema/cosine.schemainclude /usr/local/openldap/etc/openldap/schema/dyngroup.schemainclude /usr/local/openldap/etc/openldap/schema/inetorgperson.schemainclude /usr/local/openldap/etc/openldap/schema/java.schemainclude /usr/local/openldap/etc/openldap/schema/misc.schemainclude /usr/local/openldap/etc/openldap/schema/nis.schemainclude /usr/local/openldap/etc/openldap/schema/openldap.schema</code></pre><ul><li>在打开的slapd.conf配置文件中修改下述内容</li></ul><pre><code>suffix &quot;dc=example,dc=com&quot;rootdn &quot;cn=Manager,dc=example,dc=com&quot;rootpw secret</code></pre><ul><li>启动OpenLDAP Server</li></ul><pre><code>$&gt; sudo /usr/local/openldap/libexec/slapd -d 1</code></pre><ul><li>为OpenLDAP Server添加用户</li></ul><pre><code>$&gt; vim ~/.ldaprc</code></pre><p>​         在上述文件中添加下述内容</p><pre><code>URI ldap://192.168.0.100(192.168.0.100 is ldap server ip)BASE dc=example,dc=com</code></pre><p>​         添加用户—-abcd.ldif文件内容见附录</p><pre><code>$&gt; /usr/local/openldap/bin/ldapadd -x -D &quot;cn=Manager,dc=example,dc=com&quot; -W -f abcd.ldif</code></pre><p>​         查看用户</p><pre><code>$&gt; /usr/local/openldap/bin/ldapsearch -x -b &#39;dc=example,dc=com&#39; (for check adding use roperation) </code></pre><h2 id="三、配置OpenLDAP—-SSL加密"><a href="#三、配置OpenLDAP—-SSL加密" class="headerlink" title="三、配置OpenLDAP—-SSL加密"></a>三、配置OpenLDAP—-SSL加密</h2><ul><li>创建SSL认证文件</li></ul><pre><code>$&gt; openssl req -newkey rsa:1024 -x509 -nodes -out server.pem -keyout server.pem -days 3650$&gt; sudo cp server.pem /usr/local/etc/</code></pre><ul><li>配置OpenLDAP Server以支持SSL加密—-此配置是在无加密配置上更改</li></ul><pre><code>$&gt; sudo vim /usr/local/openldap/etc/openldap/slapd.conf</code></pre><ul><li>在上述配置文件添加下述内容</li></ul><pre><code>TLSCipherSuite HIGH:MEDIUM:+SSLv2:+SSLv3:+TLSv1TLSVerifyClient neverTLSCACertificateFile /usr/local/etc/server.pemTLSCertificateFile /usr/local/etc/server.pemTLSCertificateKeyFile /usr/local/etc/server.pem</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819111609955.png" alt="image-20210819111609955"></p><ul><li>启动OpenLDAP Server</li></ul><pre><code>$&gt; sudo /usr/local/openldap/libexec/slapd -h ldaps:// -d 1</code></pre><h2 id="四、配置OpenLDAP—-StartTLS加密"><a href="#四、配置OpenLDAP—-StartTLS加密" class="headerlink" title="四、配置OpenLDAP—-StartTLS加密"></a>四、配置OpenLDAP—-StartTLS加密</h2><ul><li>生成StartTLS认证文件。注意：192.168.0.100是OpenLDAP Server IP</li></ul><pre><code>Create CA certificat:$&gt; openssl genrsa 2048 &gt; cakey.pem$&gt; openssl req -new -sha256 -x509 -nodes -days 3650 -key cakey.pem -out cacert.pem -subj &#39;/C=bb/ST=bb/L=bb/CN=192.168.0.100/emailAddress=bb@bb.bb&#39;Create server certificate:$&gt; openssl req -sha256 -newkey rsa:2048 -days 3650 -nodes -keyout server-key.pem -out server-req.pem -subj &#39;/C=cc/ST=cc/L=cc/CN=192.168.0.100/emailAddress=cc@cc.cc&#39;$&gt; openssl rsa -in server-key.pem -out server-key.pem$&gt; openssl x509 -sha256 -req -in server-req.pem -days 3650 -CA cacert.pem -CAkey cakey.pem -set_serial 01 -out server-crt.pemCreate client certificate:$&gt; openssl req -sha256 -newkey rsa:2048 -days 3650 -nodes -keyout client-key.pem -out client-req.pem -subj &#39;/C=dd/ST=dd/L=dd/CN=192.168.0.100/emailAddress=dd@dd.dd&#39;$&gt; openssl rsa -in client-key.pem -out client-key.pem$&gt; openssl x509 -sha256 -req -in client-req.pem -days 3650 -CA cacert.pem -CAkey cakey.pem -set_serial 01 -out client-crt.pem</code></pre><ul><li>修改认证文件路径</li></ul><pre><code>$&gt; sudo mkdir /var/myca$&gt; sudo mkdir /var/myca/client$&gt; sudo cp cacert.pem /usr/local/openldap/etc/certs/$&gt; sudo cp cacert.pem /var/myca/client$&gt; sudo mv server-* /usr/local/openldap/etc/certs/$&gt; sudo mv client-* /var/myca/client</code></pre><ul><li>配置OpenLDAP Server以支持StartTLS加密—-此配置是在SSL配置上更改的</li></ul><pre><code>$&gt; vim /usr/local/openldap/etc/openldap/slapd.conf</code></pre><ul><li>在slapd.conf文件中修改下述内容</li></ul><pre><code>TLSVerifyClient never =&gt; TLSVerifyClient demand</code></pre><ul><li>在slapd.conf文件中注释下述内容</li></ul><pre><code>#TLSCACertificateFile /usr/local/openldap/etc/server.pem#TLSCertificateFile /usr/local/openldap/etc/server.pem#TLSCertificateKeyFile /usr/local/openldap/etc/server.pem</code></pre><ul><li>在slapd.conf文件中添加下述内容</li></ul><pre><code>TLSCACertificateFile /usr/local/openldap/etc/certs/cacert.pemTLSCertificateFile /usr/local/openldap/etc/certs/server-crt.pemTLSCertificateKeyFile /usr/local/openldap/etc/certs/server-key.pem</code></pre><ul><li>启动OpenLDAP Server</li></ul><pre><code> $&gt; /usr/local/openldap/libexec/slapd -d 1</code></pre><h2 id="附录：abcd-ldif文件内容"><a href="#附录：abcd-ldif文件内容" class="headerlink" title="附录：abcd.ldif文件内容"></a>附录：abcd.ldif文件内容</h2><pre><code>dn: dc=example,dc=comobjectclass: topobjectClass: dcobjectobjectClass: organizationdc: exampleo: example comdn: ou=user, dc=example,dc=comou: userobjectClass: organizationalUnitdn: ou=testgroup, dc=example,dc=comou: testgroupobjectClass: organizationalUnitdn: cn=ldaprg1,ou=testgroup, dc=example,dc=comobjectClass: groupOfNamescn: ldaprg1member: cn=LDAPuser1,ou=user,dc=example,dc=comdn: cn=LDAPuser1,ou=user, dc=example,dc=comuserPassword:: MTExMTEx#Password is 111111uid: test001objectClass: uidObjectobjectClass: topobjectClass: personsn: LDAPcn: LDAPuser1</code></pre>]]></content>
      
      
      <categories>
          
          <category> ubuntu16.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> build server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装dhcpv6</title>
      <link href="/ubuntu16-04-an-zhuang-dhcpv6.html"/>
      <url>/ubuntu16-04-an-zhuang-dhcpv6.html</url>
      
        <content type="html"><![CDATA[<h2 id="ISC-dhcp-server安装"><a href="#ISC-dhcp-server安装" class="headerlink" title="ISC dhcp server安装"></a>ISC dhcp server安装</h2><ul><li>执行下述命令安装ISC dhcp server</li></ul><pre><code>sudo apt-get install isc-dhcp-server</code></pre><ul><li>为接口设置一个静态IPv6地址我要从中运行DHCPv6服务器，该地址是DHCP范围之外的IPv6网络子网的一部分。</li></ul><pre><code>sudo ifconfig eth0 inet6 add 2001:db8:0:1::128/64</code></pre><ul><li>编辑/etc/dhcp/dhcpd6.conf文件以配置DHCPv6范围等，添加下述内容。</li></ul><pre><code>default-lease-time 600;max-lease-time 7200;log-facility local7;subnet6 2001:db8:0:1::/64{#Range for clientsrange6 2001:db8:0:1::129 2001:db8:0:1::254;}</code></pre><ul><li>创建/var/lib/dhcp/dhcpd6.leases</li></ul><pre><code>touch /var/lib/dhcp/dhcpd6.leasessudo chmod 777 /var/lib/dhcp/dhcpd6.leases</code></pre><ul><li>手动启动DHCPv6服务器。</li></ul><pre><code>sudo dhcpd -6 -f -cf /etc/dhcp/dhcpd6.conf eth0</code></pre>]]></content>
      
      
      <categories>
          
          <category> ubuntu16.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ipv6 </tag>
            
            <tag> build server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装radvd</title>
      <link href="/ubuntu16-04-an-zhuang-radvd.html"/>
      <url>/ubuntu16-04-an-zhuang-radvd.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装radvd"><a href="#安装radvd" class="headerlink" title="安装radvd"></a>安装radvd</h2><ul><li>执行下述命令进行安装</li></ul><pre><code>sudo apt-install radvd</code></pre><ul><li>配置radvd</li></ul><pre><code>touch /etc/radvd.conf chmod 777 /etc/radvd.conf</code></pre><p>​         配置如下：</p><pre><code>#log-level 8#log-mode full#statelessinterface eth0 {   AdvSendAdvert on;   MinRtrAdvInterval 30;   MaxRtrAdvInterval 600;   AdvManagedFlag on;                   #M bit=1   AdvOtherConfigFlag on;               #O bit=1   AdvLinkMTU 1500;   AdvSourceLLAddress on;   AdvDefaultPreference high;   prefix 2001:db8:0:1::/64   {   AdvOnLink on;   AdvAutonomous off;                   #A bit=0   AdvRouterAddr on;   AdvPreferredLifetime 3600;   AdvValidLifetime 7200;   }; route 2001:db8:0:1::/64 {    };};</code></pre><ul><li>启动radvd</li></ul><pre><code>sudo radvd –C /etc/radvd.conf start</code></pre><ul><li>停止的话需要手动kill这个进程</li></ul><pre><code>killall radvd</code></pre>]]></content>
      
      
      <categories>
          
          <category> ubuntu16.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ipv6 </tag>
            
            <tag> build server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习环境配置</title>
      <link href="/shen-du-xue-xi-huan-jing-pei-zhi-cuda-tensorflow-pytorch.html"/>
      <url>/shen-du-xue-xi-huan-jing-pei-zhi-cuda-tensorflow-pytorch.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装Anaconda"><a href="#一、安装Anaconda" class="headerlink" title="一、安装Anaconda"></a>一、安装Anaconda</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>下载地址：<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">https://www.anaconda.com/download/</a></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819141212750.png" alt="image-20210819141212750"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>打开安装包，点击Next</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724211856768.png" alt="在这里插入图片描述"></p><ul><li>点击I Agree</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724211918523.png" alt="在这里插入图片描述"></p><ul><li>Just me还是All Users，假如你的电脑有好几个 Users ，才需要考虑这个问题.其实我们电脑一般就一个 User，就我们一个人使用，如果你的电脑有多个用户，选择All Users，我这里直接 All User，继续点击 Next。</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724212329536.png" alt="在这里插入图片描述"></p><ul><li>选择安装目录</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724212534120.png" alt="在这里插入图片描述"></p><ul><li>第一个选项是加入环境变量，建议小伙伴们选中这个选项，否则后面需要自己配置环境变量比较麻烦，第二个是默认使用 Python 3.8，此选项可以不选。点击Install</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724213932775.png" alt="在这里插入图片描述"></p><ul><li>执行安装</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724214310251.png" alt="在这里插入图片描述"></p><ul><li>点击Next</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/2020072421485150.png" alt="在这里插入图片描述"></p><ul><li>还是点击Next</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724214955473.png" alt="在这里插入图片描述"></p><ul><li>这两个选项直接取消掉就行，跟安装一点关系没有。点击Finish</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200724215308519.png" alt="在这里插入图片描述"></p><ul><li>安装完成后打开cmd，输入下列命令查看是否安装成功</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20200725100810974.png" alt="在这里插入图片描述"></p><h2 id="二、使用Anaconda创建虚拟环境"><a href="#二、使用Anaconda创建虚拟环境" class="headerlink" title="二、使用Anaconda创建虚拟环境"></a>二、使用Anaconda创建虚拟环境</h2><p>创建虚拟环境的目的：满足存在多个项目需要不同运行环境的情况。<br>创建方法：</p><ul><li>在Anaconda Prompt中输入下述命令</li></ul><pre><code>conda create -n &lt;your env name&gt; python=&lt;your python version&gt;</code></pre><blockquote><p>注：上述命令中 <code>&lt;your env name&gt;</code>是虚拟环境名，<code>&lt;your python version&gt;</code>是虚拟环境所使用的python版本。</p><p>例如若环境名设置为tensorflow_lh，python版本使用3.6则命令为：</p><pre><code>conda create -n tensorflow_lh python=3.6</code></pre></blockquote><ul><li>激活虚拟环境则在Anaconda Prompt中输入下述命令</li></ul><pre><code>conda activate &lt;your env name&gt;</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819142914767.png" alt="image-20210819142914767"></p><h2 id="三、安装CUDA和cudnn"><a href="#三、安装CUDA和cudnn" class="headerlink" title="三、安装CUDA和cudnn"></a>三、安装CUDA和cudnn</h2><p>此部分安装教程配置为RTX3060显卡+CUDA11.1+cudnn8.0.5</p><h3 id="CUDA下载与安装"><a href="#CUDA下载与安装" class="headerlink" title="CUDA下载与安装"></a>CUDA下载与安装</h3><ul><li>cuda下载地址：<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-toolkit-archive</a></li><li>选择cuda11.1下载</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819143631053.png" alt="image-20210819143631053"></p><ul><li>根据自己电脑配置选择并下载</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/25011725-eed1f92551583cb6.png" alt="img"></p><ul><li>下载完成后点击安装包进行安装</li></ul><h3 id="Cudnn下载与安装"><a href="#Cudnn下载与安装" class="headerlink" title="Cudnn下载与安装"></a>Cudnn下载与安装</h3><ul><li>cudnn下载网址：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="noopener">https://developer.nvidia.com/cudnn</a></li><li>直接官网下载就可以了，不过需要注册个账号。下载cudnn8.0.5</li><li>下载解压完成后，就是三个文件夹+一个txt</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/25011725-d16b66da90922267.png" alt="img"></p><ul><li>将cudnn里面的三个文件夹复制到cuda安装目录，然后全部替换掉。cuda默认安装话，安装目录如下图：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/25011725-d103202ac10d51c0.png" alt="img"></p><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><ul><li>下面是环境变量配置，在系统中添加以下 5个 环境变量：</li></ul><pre><code>CUDA_SDK_PATH = C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.1       （cuda默认安装的话就是这个路径）CUDA_LIB_PATH = %CUDA_PATH%\lib\x64CUDA_BIN_PATH = %CUDA_PATH%\binCUDA_SDK_BIN_PATH = %CUDA_SDK_PATH%\bin\win64CUDA_SDK_LIB_PATH = %CUDA_SDK_PATH%\common\lib\x64</code></pre><ul><li>在环境变量Path中添加：</li></ul><pre><code>C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.1\common\lib\x64C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\lib\x64C:\ProgramData\NVIDIA Corporation\CUDA Samples\v11.1\bin\win64C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.1\bin</code></pre><h2 id="四、安装Tensorflow-gpu"><a href="#四、安装Tensorflow-gpu" class="headerlink" title="四、安装Tensorflow-gpu"></a>四、安装Tensorflow-gpu</h2><ul><li>在Anaconda Prompt中激活虚拟环境</li></ul><pre><code>例如：conda activate tensorflow_lh</code></pre><ul><li>执行下列命令进行安装</li></ul><pre><code>pip install tensorflow-gpu==2.4.1 -i https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><h2 id="五、安装Pytorch"><a href="#五、安装Pytorch" class="headerlink" title="五、安装Pytorch"></a>五、安装Pytorch</h2><ul><li>在Anaconda Prompt中激活虚拟环境</li></ul><pre><code>例如：conda activate pytorch_lh</code></pre><ul><li>执行下列命令进行安装</li><li>安装命令可参考此链接：<a href="https://pytorch.org/get-started/locally/" target="_blank" rel="noopener">https://pytorch.org/get-started/locally/</a></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819145600765.png" alt="image-20210819145600765"></p><pre><code>conda install pytorch torchvision torchaudio cudatoolkit=11.1 -c pytorch -c conda-forge</code></pre>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> Tensorflow </tag>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neo4j安装</title>
      <link href="/neo4j-an-zhuang.html"/>
      <url>/neo4j-an-zhuang.html</url>
      
        <content type="html"><![CDATA[<h2 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h2><p>从官网下载jdk1.8</p><p>下载地址:<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819151628734.png" alt="image-20210819151628734"></p><ul><li>下载后点击安装</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819152513903.png" alt="image-20210819152513903"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819152528683.png" alt="image-20210819152528683"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819152547735.png" alt="image-20210819152547735"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819152645928.png" alt="image-20210819152645928"></p><ul><li>打开cmd输入<code>java -version</code>可查看java是否安装成功</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819152735871.png" alt="image-20210819152735871"></p><h2 id="Neo4j安装"><a href="#Neo4j安装" class="headerlink" title="Neo4j安装"></a>Neo4j安装</h2><p>下载链接：<a href="https://neo4j.com/download-center/" target="_blank" rel="noopener">Neo4j Download Center - Neo4j Graph Database Platform</a></p><p>推荐下载community server版本</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819151058618.png" alt="image-20210819151058618"></p><ul><li>解压后即安装完成</li><li>添加neo4j的环境变量</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819154348241.png" alt="image-20210819154348241"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819153251764.png" alt="image-20210819153251764"></p><ul><li>验证</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819161959580.png" alt="image-20210819161959580"></p><blockquote><p>除了<code>neo4j.bat console</code>以外还可以用service的形式运行neo4j</p></blockquote><ul><li>在cmd下输入<code>neo4j.bat install-service</code></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819171816521.png" alt="image-20210819171816521"></p><ul><li>然后再windows的services list下可以发现neo4j的service已经安装成功</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819171941917.png" alt="image-20210819171941917"></p><ul><li>之后我们可以再cmd中使用<code>neo4j.bat start</code>命令启动neo4j sevices</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819172106844.png" alt="image-20210819172106844"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819172237397.png" alt="image-20210819172237397"></p><p>注：默认登陆账号密码均为neo4j，初次登陆后需要修改密码，可修改为admin</p><ul><li>若要查看当前neo4j service的状态可通过<code>neo4j.bat status</code>命令</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819173041674.png" alt="image-20210819173041674"></p><ul><li>若要停止neo4j sevices可在cmd输入<code>neo4j.bat stop</code>命令</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819172403607.png" alt="image-20210819172403607"></p><ul><li>如果不需要neo4j services则可通过<code>neo4j.bat uninstall-service</code>命令卸载服务</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210819172825494.png" alt="image-20210819172825494"></p>]]></content>
      
      
      <categories>
          
          <category> 知识图谱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Neo4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora+picgo+gitee配置图片上传</title>
      <link href="/typora-picgo-gitee-pei-zhi-tu-pian-shang-chuan.html"/>
      <url>/typora-picgo-gitee-pei-zhi-tu-pian-shang-chuan.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Gitee配置"><a href="#一、Gitee配置" class="headerlink" title="一、Gitee配置"></a>一、Gitee配置</h2><ul><li>新建仓库</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818204142273.png" alt="image-20210818204142273"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818204220680.png" alt="image-20210818204220680"></p><ul><li>获取私人令牌</li><li>头像–&gt;设置–&gt;私有令牌–&gt;生成新令牌</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818204449582.png" alt="image-20210818204449582"></p><ul><li>提交后保留令牌token</li></ul><h2 id="二、PicGo"><a href="#二、PicGo" class="headerlink" title="二、PicGo"></a>二、PicGo</h2><ul><li><p>传送门： <em><a href="https://link.zhihu.com/?target=https%3A//github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></em></p><p>根据自己的系统来选择对应的版本</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-d6fe717dbc7be6954a43e62bf9808120_720w.jpg" alt="img"></p><ul><li>软件安装成功打开的界面如下：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-5171ea8bddd6cc103c4c417816954b78_720w.jpg" alt="img"></p><ul><li>下载gitee插件</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818204736995.png" alt="image-20210818204736995"></p><ul><li><p>下载好插件后重启picgo</p></li><li><p>配置gitee图床</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818204921634.png" alt="image-20210818204921634"></p><ul><li>配置picgo server</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818204944513.png" alt="image-20210818204944513"></p><h2 id="三、Typora配置"><a href="#三、Typora配置" class="headerlink" title="三、Typora配置"></a>三、Typora配置</h2><ul><li>配置图像上传信息</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818205121794.png" alt="image-20210818205121794"></p><ul><li>点击“验证图片上传选项”进行验证</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818205107864.png" alt="image-20210818205107864"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitee </tag>
            
            <tag> Picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装NVM管理nodejs</title>
      <link href="/an-zhuang-nvm-guan-li-nodejs.html"/>
      <url>/an-zhuang-nvm-guan-li-nodejs.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>nvm 的全称是 Node Version Manager，Nodejs 版本管理器。nvm 可以帮助我们快速切换 Nodejs 版本。</p><h2 id="一、-安装步骤"><a href="#一、-安装步骤" class="headerlink" title="一、 安装步骤"></a>一、 安装步骤</h2><p><strong>1. 下载地址</strong></p><ul><li>链接：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></li></ul><p><strong>可下载以下版本：</strong></p><ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需要进行配置。</li><li>nvm-setup.zip：安装版，推荐使用</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818172640754.png" alt="image-20210818172640754"></p><p><strong>2. 安装（nvm-setup)</strong></p><ul><li>双击解压后的文件<code>nvm-setup.exe</code></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/webp.png" alt="img"></p><ul><li>选择nvm安装路径</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/webp-16292801254522.png" alt="img"></p><blockquote><p>注意：路径文件夹名不要出现中文和空格</p></blockquote><ul><li>选择nodeks安装路径</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/webp-16292801273374.png" alt="img"></p><ul><li>确认安装</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/webp-16292801291186.png" alt="img"></p><ul><li>检查是否安装成功</li></ul><p>打开CMD，输入<code>nvm</code>，安装成功则会如下图所示，它会显示出当前nvm版本以及nvm的命令：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/webp-16292801308228.png" alt="img"></p><h2 id="二、-配置nvm（避免timeout）"><a href="#二、-配置nvm（避免timeout）" class="headerlink" title="二、 配置nvm（避免timeout）"></a>二、 配置nvm（避免timeout）</h2><p>在nvm安装目录，找到settings.txt，添加以下两行</p><pre><code>node_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818203803904.png" alt="image-20210818203803904"></p><h2 id="三、使用NVM"><a href="#三、使用NVM" class="headerlink" title="三、使用NVM"></a>三、使用NVM</h2><ul><li>nvm list 命令 - 显示版本列表</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">nvm list <span class="token comment" spellcheck="true">// 显示已安装的版本（同 nvm list installed）</span>nvm list installed <span class="token comment" spellcheck="true">// 显示已安装的版本</span>nvm list available <span class="token comment" spellcheck="true">// 显示所有可以下载的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>nvm install 命令 - 安装指定版本nodejs</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">nvm install <span class="token number">12.17</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// 安装12.17.0版本node</span>nvm install latest <span class="token comment" spellcheck="true">// 安装最新版本node</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>nvm use 命令 - 使用指定版本node</li></ul><pre class="line-numbers language-rust"><code class="language-rust">nvm <span class="token keyword">use</span> <span class="token number">12.17</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// 使用12.17.0版本node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用node -v和npm -v命令查看当前使用的nodejs和npm版本</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/20201127175820370.png" alt="在这里插入图片描述"></p><ul><li>nvm uninstall 命令 - 卸载指定版本 node</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">nvm uninstall <span class="token number">12.17</span><span class="token punctuation">.</span><span class="token number">0</span> <span class="token comment" spellcheck="true">// 卸载12.17.0版本node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：在运行<code>nvm install</code> 的时候，有可能会出现无权限安装的问题，如果遇到此问题，请 <code>以管理员身份运行</code> cmd。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建个人博客超详细教程</title>
      <link href="/github-hexo-da-jian-ge-ren-bo-ke-chao-xiang-xi-jiao-cheng.html"/>
      <url>/github-hexo-da-jian-ge-ren-bo-ke-chao-xiang-xi-jiao-cheng.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇内容参考[枫叶](<a href="https://zhuanlan.zhihu.com/p/102592286" target="_blank" rel="noopener">从零开始搭建个人博客（超详细） - 知乎 (zhihu.com)</a>)和[随风](<a href="https://zhuanlan.zhihu.com/p/111614119" target="_blank" rel="noopener">（一）Github + Hexo 搭建个人博客超详细教程 - 知乎 (zhihu.com)</a>)两位大佬的教程，非常感谢</p><h2 id="一、创建GitHub仓库"><a href="#一、创建GitHub仓库" class="headerlink" title="一、创建GitHub仓库"></a>一、创建GitHub仓库</h2><ul><li>新建仓库</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818210502894.png" alt="image-20210818210502894"></p><ul><li>输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上。名称一定要和你的Github名字完全一样，比如你github名字叫A，那么仓库名字一定要是A.github.io</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818210821131.png" alt="image-20210818210821131"></p><h2 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h2><ul><li><p>Git 2.25.0 安装步骤：</p><p>进入Git官网<a href="https://link.zhihu.com/?target=https%3A//git-scm.com/" target="_blank" rel="noopener">Git官网</a>，点击 <strong><em>Downloads</em></strong> 下载：</p></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818211006168.png" alt="image-20210818211006168"></p><p>​        选择你的系统类型，我的是 Windows：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/image-20210818211019604.png" alt="image-20210818211019604"></p><ul><li>下载完成双击打开：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-ffd6a780ac8b9f7f7e66604f1c796f99_720w.jpg" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-df7dfe1d55e72e2f28292733194ed1f2_720w.jpg" alt="img"></p><ul><li>可以选择 Git 安装位置，然后点击 <strong><em>next\</em></strong>：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-acdb676bf346b7bc844946ba5b4994d2_720w.jpg" alt="img"></p><ul><li>保持默认就好，直接点击 <strong><em>next</em></strong>：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-01beee7ec450d746190901e14896f183_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-6f8213444c1d382a9f72c012b43cf9f4_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-3dcca92f4b2ab2a909e773c75d55bb9e_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-99ba29abf274903ac4319558920d5741_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-09bafa50241530e08ea6ca7a215de2dd_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-a5179b18ef6e7ee2373278803d07eeb5_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-51a46602b6b59bf66447a47ea1117232_720w.jpg" alt="img"></p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-b63d3a8617a7c9d2574c8eb5ed98d217_720w.jpg" alt="img"></p><ul><li>完成后选择打开 Git Bash 即可：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-c4f1129c5fbb5ed081e6817d1bb3b97d_720w.jpg" alt="img"></p><ul><li>检验成功，点击鼠标右键，出现下图中图标即完成：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-f9c4facc5feccfd6613965fabc8d0833_720w.jpg" alt="img"></p><ul><li>打开 Git Bash, 输入git:</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-3d312f3ae164edbe8627faeb25684805_720w.jpg" alt="img"></p><p>​        回车得到如下图：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-0f41afdb907b3f7f9b26769a2eab1784_720w.jpg" alt="img"></p><h2 id="三、安装Nodejs和Hexo"><a href="#三、安装Nodejs和Hexo" class="headerlink" title="三、安装Nodejs和Hexo"></a>三、安装Nodejs和Hexo</h2><ul><li><p>Nodejs详见NVM安装过程</p></li><li><p>Hexo安装</p></li><li><p>首先在D盘建立一个文件夹 Blog，点开 Blog 文件夹，鼠标右键打开 Git Bush Here，输入npm命令安装Hexo：</p></li></ul><pre class="line-numbers language-text"><code class="language-text">npm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装完成后，输入 hexo init 命令初始化博客：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-e58d83d78710849cdc32321f122550e8_720w.jpg" alt="img"></p><ul><li>然后输入 hexo g 静态部署：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-fdc87aa8600fdbbecdc0c9bc2c141412_720w.jpg" alt="img"></p><ul><li>这时网页已经部署完成，输入 hexo s 命令可以查看：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-11a0b4917c962bab07a48f7a04160e8b_720w.png" alt="img"></p><ul><li>浏览器输入 <a href="https://link.zhihu.com/?target=http%3A//baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%80%E5%8E%9F%E5%A7%8B%E7%9A%84%E6%95%88%E6%9E%9C%E4%BA%86" target="_blank" rel="noopener">http://localhost:4000</a> 就可以打开新部署的网页：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-5a8d3a94b1eb5e4e79f2e733ddaed2aa_720w.jpg" alt="img"></p><ul><li>看完之后 ctrl +c 停止运行服务器。</li></ul><h2 id="四、SSH绑定GitHub"><a href="#四、SSH绑定GitHub" class="headerlink" title="四、SSH绑定GitHub"></a>四、SSH绑定GitHub</h2><p>我们要用git上传文件到GitHub首先得利用SSH登录远程主机，而登录方式有两种：一种是口令登录；另一种是公钥登录。口令登录每次都要输入密码十分麻烦，而公钥登录就省去了输入密码的步骤，所以我们选择公钥授权。首先我们得在 GitHub 上添加 SSH key 配置，要想生成SSH key，就要先安装 SSH，不过我们安装了 Git Bash，其应该自带了 SSH。</p><ul><li>检验一下是否安装 SSH，我们在新建的文件夹中右键打开 Git Bash：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-daee176b8f87fbc5c6ff5feca6bd0887_720w.png" alt="img"></p><ul><li>输入 ssh 命令，查看本机是否安装 SSH：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-b4792b227defc69aa7927ca9b73e4316_720w.jpg" alt="img"></p><ul><li>如上图所示，即已安装 SSH. 然后，输入 ssh-keygen -t rsa 命令<strong><em>（注意空格）</em></strong>，表示我们指定 RSA 算法生成密钥，然后敲四次回车键，之后就就会生成两个文件，分别为秘钥 id_rsa 和公钥 id_rsa.pub. <strong><em>（注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和 Shift+insert.）\</em></strong>文件的位置在 Git Bash 上面都有显示，默认生成在以下目录：</li></ul><pre><code> Linux 系统：~/.ssh Mac 系统：~/.ssh Windows 10 ：C:/Users/ASUS/.ssh</code></pre><ul><li>接下来我们要做的事情就是把公钥 id_rsa.pub 的内容添加到 GitHub。复制公钥 id_rsa.pub 文件里的内容，你可以通过目录找到 id_rsa.pub 文件的位置，用记事本打开文件复制。如果你实在找不到文件也没有关系，按照以下步骤直接在 Git Bash 上打开就行：</li></ul><pre class="line-numbers language-c"><code class="language-c">$ cd <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh $ ls$ cat id_rsa<span class="token punctuation">.</span>pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-692b1cd8e719dac8012afe6fda775209_720w.jpg" alt="img"></p><ul><li>（再次注意：git中的复制粘贴不是 Ctrl+C 和 Ctrl+V，而是 Ctrl+insert 和Shift+insert.）接下来进入我们的 GitHub 主页，先点击右上角，再点击 settings：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-0fe5a7f1dcbff38030bfdfeaba2c9515_720w.jpg" alt="img"></p><ul><li>如下图，先点击 <strong>SSH and GPG keys，</strong>再点击 <strong>New SSH key.</strong></li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-c799cbbea9d6ca9572796364571790bd_720w.jpg" alt="img"></p><ul><li>将复制的公钥 id_rsa.pub 的内容粘贴到 key 内，再点击 <strong>Add SSH key，</strong>如下图：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-0b61abaf4069dc04003e85e7499d42b0_720w.jpg" alt="img"></p><ul><li>验证是否成功，我们可以通过在 Git Bash 中输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 进行检验：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-5b4f05ea2e2a7fb8b13fd35a9bafa8ce_720w.png" alt="img"></p><ul><li>第一次会出现这种情况，填 yes 就行，若出现下图中的情况，则表明绑定成功：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-3915b3e46e40010d3d911f84d4e8b0ff_720w.png" alt="img"></p><h2 id="五、将Hexo部署到GitHub"><a href="#五、将Hexo部署到GitHub" class="headerlink" title="五、将Hexo部署到GitHub"></a>五、将Hexo部署到GitHub</h2><ul><li>现在回到我们的 Blog 文件夹，用笔记本打开 _config.yml 文件，如下图：</li></ul><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-b60225e9260cd78e1142e81c133b567a_720w.jpg" alt="img"></p><ul><li>下滑到文件底部，填上如下内容：</li></ul><pre class="line-numbers language-text"><code class="language-text">deploy:  type: git  repository: https://github.com/fengye97/fengye97.github.io.git  #你的仓库地址  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意空格：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-7f9e09b1827fd9202088cc9d9b19880e_720w.png" alt="img"></p><p>你的仓库地址就是下图这个：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-5014abdff592085ca394335730020fae_720w.jpg" alt="img"></p><p>然后回到 Blog 文件夹中，打开 Git Bash，安装Git部署插件，输入命令：</p><pre class="line-numbers language-text"><code class="language-text">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-a5172536904c8eaa602debc6e54c877b_720w.jpg" alt="img"></p><p>然后分别输入以下三条命令：</p><pre class="line-numbers language-text"><code class="language-text">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 publichexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-54e0b045f1d46c70e740ec83a3552fe0_720w.jpg" alt="img"></p><p>完成以后，打开浏览器，输入 <a href="https://link.zhihu.com/?target=https%3A//fengye97.github.io/" target="_blank" rel="noopener">https://xxx.github.io</a> 就可以打开你的网页了：</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/v2-aa3a0b56dbcadf942397b8ea224b78b9_720w.jpg" alt="img"></p><h2 id="六、写文章、发布文章"><a href="#六、写文章、发布文章" class="headerlink" title="六、写文章、发布文章"></a>六、写文章、发布文章</h2><p>首先在博客根目录下右键打开Git Bash Here输入以下命令，安装一个扩展.</p><pre><code>npm i hexo-deployer-git</code></pre><p>然后输入下面的命令，新建一篇文章。</p><pre><code>hexo new post &quot;article title&quot;</code></pre><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/22.png" alt="img"></p><p>然后打开C:\panakot Blog\Hexo\source_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p><img src="https://gitee.com/charlesli1111/picgo-image-lib/raw/master/23.png" alt="img"></p><p>编写完markdown文件后，根目录下右键打开Git Bash Here输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。</p><p>你的博客地址：https://你的用户名.github.io</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
